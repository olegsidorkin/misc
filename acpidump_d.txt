/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20221020 (64-bit version)
 * Copyright (c) 2000 - 2022 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of /tmp/acpidump.DgyIdR/acpdump.din, Sun Feb 11 16:08:08 2024
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00032629 (206377)
 *     Revision         0x02
 *     Checksum         0x85
 *     OEM ID           "ALASKA"
 *     OEM Table ID     "A M I "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20230331 (539165489)
 */
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.M625, MethodObj)    // 2 Arguments
    External (_SB_.MACO, IntObj)
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.FLG0, IntObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP18, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.M241, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.M434, IntObj)
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP1._ADR, IntObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP7._ADR, IntObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.UHBS, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C1, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C2, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C3, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C4, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C5, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6C6, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.W6GS, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68, DeviceObj)
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA, DeviceObj)
    External (_SB_.PCI0.GPPB, DeviceObj)
    External (_SB_.PCI0.GPPC, DeviceObj)
    External (_SB_.PCI0.GPPD, DeviceObj)
    External (_SB_.PCI0.GPPE, DeviceObj)
    External (_SB_.PCI0.GPPF, DeviceObj)
    External (_SB_.PCI0.GPPG, DeviceObj)
    External (_SB_.PCI0.GPPH, DeviceObj)
    External (_SB_.PCI0.M641, IntObj)
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.U4PC, IntObj)
    External (_SB_.UBTC, DeviceObj)
    External (AFN7, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (DDEP, IntObj)
    External (DIMS, IntObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M011, MethodObj)    // 4 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M014, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M04E, MethodObj)    // 3 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M252, MethodObj)    // 3 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M644, MethodObj)    // 3 Arguments
    External (M652, FieldUnitObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments
    External (NFPC, MethodObj)    // 0 Arguments
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)
    External (TBIN, IntObj)
    External (UHBS, IntObj)
    External (W6C1, IntObj)
    External (W6C2, IntObj)
    External (W6C3, IntObj)
    External (W6C4, IntObj)
    External (W6C5, IntObj)
    External (W6C6, IntObj)
    External (W6GS, IntObj)

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, Zero)
    Name (IO1L, Zero)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO4B, Zero)
    Name (IO4L, Zero)
    Name (SP1O, 0x2E)
    Name (KBFG, Zero)
    Name (MSFG, Zero)
    Name (PEBL, 0x10000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, 0xFEB00000)
    Name (WDTL, 0x1000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0x7339E000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0x733A2000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xF7210510)
    Name (FTPM, 0xF7210510)
    Name (PPIM, 0x765F8A18)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (HSPB, 0xFFFFFFFF)
    Name (HSPS, 0xFFFFFFFF)
    Name (IOHW, 0x0290)
    Name (IO3B, 0x0200)
    Name (IO3L, 0x40)
    Name (SMIM, 0x80000009)
    Name (SMIP, 0xB2)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        OperationRegion (WPBR, SystemMemory, 0x75F1A000, 0x0001)
        Field (WPBR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            CTRL,   8
        }
    }

    Scope (\)
    {
        Device (AWW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AWW")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x12, 0x02, 0xC3, 0xBC, 0xD0, 0xA2, 0x41,  // .......A
                /* 0008 */  0xBA, 0x17, 0x81, 0x6C, 0xD5, 0xED, 0x77, 0x44,  // ...l..wD
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, NotSerialized)
            {
                Local0 = \_SB.CTRL
                Return (Local0)
            }

            Name (WQMO, Buffer (0x0241)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x31, 0x02, 0x00, 0x00, 0x9C, 0x04, 0x00, 0x00,  // 1.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5A, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // (Z.....B
                /* 0020 */  0x20, 0xA4, 0x02, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x45, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // E....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01,  // J.C...D.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02,  // .|...(..
                /* 0068 */  0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88, 0x6C, 0x34,  // ,.....l4
                /* 0070 */  0x4E, 0x50, 0x36, 0x34, 0x4A, 0x06, 0x84, 0x3C,  // NP64J..<
                /* 0078 */  0x0B, 0xB0, 0x0E, 0x4C, 0x08, 0xEC, 0x5E, 0x80,  // ...L..^.
                /* 0080 */  0x43, 0x01, 0xCE, 0x04, 0x08, 0x13, 0xA0, 0x4C,  // C......L
                /* 0088 */  0x80, 0x31, 0x08, 0x02, 0xD3, 0xD6, 0x70, 0x04,  // .1....p.
                /* 0090 */  0x54, 0x21, 0x98, 0x50, 0xCE, 0x25, 0x52, 0x83,  // T!.P.%R.
                /* 0098 */  0x60, 0x42, 0x09, 0x14, 0x24, 0x4C, 0x6F, 0x28,  // `B..$Lo(
                /* 00A0 */  0x12, 0x07, 0x22, 0x6D, 0x78, 0xC2, 0x6C, 0x4D,  // .."mx.lM
                /* 00A8 */  0x80, 0x45, 0x0C, 0x41, 0x45, 0x08, 0x1A, 0xA1,  // .E.AE...
                /* 00B0 */  0xFD, 0x41, 0x90, 0x58, 0x0B, 0xD6, 0x50, 0x1D,  // .A.X..P.
                /* 00B8 */  0x69, 0x34, 0xA8, 0xE1, 0x25, 0x38, 0x5C, 0x0F,  // i4..%8\.
                /* 00C0 */  0xF5, 0x1C, 0x3B, 0x17, 0x20, 0x7D, 0x92, 0x02,  // ..;. }..
                /* 00C8 */  0x39, 0xC8, 0x73, 0xAB, 0x73, 0x9C, 0x04, 0x24,  // 9.s.s..$
                /* 00D0 */  0x81, 0xB1, 0x12, 0x74, 0x30, 0x70, 0x28, 0xAE,  // ...t0p(.
                /* 00D8 */  0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0, 0x50,  // .5..e..P
                /* 00E0 */  0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.@...!2
                /* 00E8 */  0x40, 0xCF, 0xEE, 0x68, 0x30, 0x07, 0x00, 0x8F,  // @..h0...
                /* 00F0 */  0xEC, 0x64, 0xDE, 0x03, 0x4A, 0x15, 0x60, 0x76,  // .d..J.`v
                /* 00F8 */  0xCC, 0x9A, 0x5A, 0x82, 0xE3, 0x31, 0xF4, 0xE9,  // ..Z..1..
                /* 0100 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                /* 0108 */  0x46, 0x66, 0x68, 0xCF, 0xF4, 0xB4, 0x62, 0x86,  // Ffh...b.
                /* 0110 */  0x3C, 0xFC, 0xC3, 0x62, 0x62, 0x21, 0xF4, 0x41,  // <..bb!.A
                /* 0118 */  0xF0, 0x78, 0xE0, 0xFD, 0xFF, 0xC7, 0x03, 0x1E,  // .x......
                /* 0120 */  0xC5, 0x67, 0x02, 0x21, 0xBC, 0x12, 0xC4, 0xF6,  // .g.!....
                /* 0128 */  0x80, 0x12, 0x94, 0x07, 0x8C, 0x1E, 0x90, 0xFD,  // ........
                /* 0130 */  0x0A, 0x40, 0x08, 0x5E, 0xE6, 0x88, 0xE4, 0x14,  // .@.^....
                /* 0138 */  0x41, 0x63, 0xF2, 0xE4, 0x5E, 0x0D, 0x42, 0x3C,  // Ac..^.B<
                /* 0140 */  0x24, 0x14, 0x3E, 0x00, 0xCD, 0xEA, 0x31, 0x81,  // $.>...1.
                /* 0148 */  0x11, 0x14, 0x09, 0x8F, 0x12, 0x03, 0x8F, 0x3A,  // .......:
                /* 0150 */  0x04, 0x44, 0x3E, 0x9A, 0x73, 0x09, 0x7F, 0x34,  // .D>.s..4
                /* 0158 */  0x51, 0x4E, 0xE1, 0x70, 0x7C, 0x62, 0x30, 0x42,  // QN.p|b0B
                /* 0160 */  0xF8, 0x72, 0x0F, 0x0E, 0x44, 0xF3, 0x7C, 0x34,  // .r..D.|4
                /* 0168 */  0x89, 0x33, 0x7A, 0x17, 0xF0, 0xD9, 0x80, 0x1D,  // .3z.....
                /* 0170 */  0x2E, 0x1C, 0x89, 0x42, 0x36, 0x16, 0xEA, 0xA1,  // ...B6...
                /* 0178 */  0x52, 0x61, 0x40, 0x9A, 0x78, 0xDC, 0x98, 0x47,  // Ra@.x..G
                /* 0180 */  0xD1, 0xFB, 0x78, 0x28, 0xCA, 0xEB, 0x01, 0x83,  // ..x(....
                /* 0188 */  0x38, 0x29, 0x8F, 0x4E, 0xF0, 0x14, 0xC2, 0x12,  // 8).N....
                /* 0190 */  0x48, 0xE8, 0x90, 0x3C, 0x02, 0x47, 0x06, 0xA3,  // H..<.G..
                /* 0198 */  0x20, 0x1E, 0xBF, 0xE3, 0x40, 0xC8, 0xC9, 0x51,  //  ...@..Q
                /* 01A0 */  0x00, 0x35, 0x3A, 0xDF, 0x04, 0x3C, 0xAE, 0x53,  // .5:..<.S
                /* 01A8 */  0x3A, 0x8C, 0x03, 0x39, 0x8B, 0x28, 0xAF, 0x0C,  // :..9.(..
                /* 01B0 */  0x26, 0x30, 0xCE, 0x23, 0x03, 0xAC, 0x11, 0x1E,  // &0.#....
                /* 01B8 */  0xCE, 0xD9, 0x79, 0x22, 0x86, 0x33, 0xA4, 0xE1,  // ..y".3..
                /* 01C0 */  0xF8, 0x55, 0xE0, 0x8D, 0x22, 0x01, 0x3F, 0x12,  // .U..".?.
                /* 01C8 */  0xC0, 0xBF, 0x6E, 0xF8, 0x40, 0x70, 0x0A, 0x8F,  // ..n.@p..
                /* 01D0 */  0x1A, 0x6F, 0x19, 0x09, 0x2C, 0xF0, 0x48, 0x00,  // .o..,.H.
                /* 01D8 */  0x0A, 0x20, 0x5F, 0x02, 0xAC, 0xF4, 0x20, 0x40,  // . _... @
                /* 01E0 */  0xE7, 0x10, 0x22, 0x4C, 0x34, 0x13, 0xFC, 0xFF,  // .."L4...
                /* 01E8 */  0xC3, 0x73, 0xC1, 0x63, 0xA5, 0xB2, 0xC6, 0x85,  // .s.c....
                /* 01F0 */  0x1A, 0xAA, 0x4F, 0x07, 0x0C, 0xFB, 0x1D, 0xC0,  // ..O.....
                /* 01F8 */  0xA2, 0x67, 0xA8, 0x1B, 0xC1, 0x41, 0xBD, 0x3D,  // .g...A.=
                /* 0200 */  0x58, 0xA2, 0x53, 0xA9, 0x4E, 0x61, 0x3D, 0x52,  // X.S.Na=R
                /* 0208 */  0x0E, 0x6B, 0xB4, 0xB0, 0x07, 0xFC, 0xE4, 0xE0,  // .k......
                /* 0210 */  0x5B, 0x87, 0x67, 0x66, 0x8C, 0xB0, 0x1E, 0xAD,  // [.gf....
                /* 0218 */  0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  // ......U.
                /* 0220 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  // 25.4...R
                /* 0228 */  0x63, 0xC6, 0x4E, 0x22, 0x8E, 0xF1, 0x12, 0xD0,  // c.N"....
                /* 0230 */  0x58, 0x2C, 0x62, 0x39, 0x02, 0xB1, 0x74, 0x0A,  // X,b9..t.
                /* 0238 */  0x19, 0x01, 0x51, 0x10, 0x10, 0x01, 0xF9, 0xFF,  // ..Q.....
                /* 0240 */  0x0F                                             // .
            })
        }
    }

    Name (MNVA, 0x75F04000)
    Name (MNVL, 0x1000)
    OperationRegion (MNVS, SystemMemory, MNVA, MNVL)
    Field (MNVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        W6GS,   8, 
        Offset (0x01), 
        W6C1,   8, 
        Offset (0x02), 
        W6C2,   8, 
        Offset (0x03), 
        W6C3,   8, 
        Offset (0x04), 
        W6C4,   8, 
        Offset (0x05), 
        W6C5,   8, 
        Offset (0x06), 
        W6C6,   8
    }

    Name (WNVA, 0x75F05000)
    Name (WNVL, 0x1000)
    OperationRegion (WNVS, SystemMemory, WNVA, WNVL)
    Field (WNVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        UHBS,   32
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1C
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0x80000000)
            Name (MBL, 0x60000000)
            Name (MAB, 0x0000001080000000)
            Name (MAL, 0x000000EF80000000)
            Name (MAM, 0x000000FFFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000020000000)
                    Name (UMAB, 0x0000001060000000)
                    Name (UMAM, 0x000000107FFFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG07) /* \_SB_.AG07 */
                    }

                    Return (PG07) /* \_SB_.PG07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG09) /* \_SB_.AG09 */
                    }

                    Return (PG09) /* \_SB_.PG09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00F)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG19) /* \_SB_.AG19 */
                    }

                    Return (PG19) /* \_SB_.PG19 */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D021)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GPPG)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D023)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPH)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D025)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D026)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xF7200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (D032)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        Return (0x0105D041)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        Offset (0x22), 
                        SCF2,   8, 
                        Offset (0x23), 
                        SCF3,   8, 
                        Offset (0x24), 
                        SCF4,   8, 
                        Offset (0x25), 
                        SCF5,   8, 
                        Offset (0x26), 
                        SCF6,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1F)
                        IRQNoFlags (_Y1D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IRQNoFlags (_Y20)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y21)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y26)
                        IRQ (Edge, ActiveLow, Shared, _Y24)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y25)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 = Zero
                                OPT7 = Zero
                                If (KBFG)
                                {
                                    OPT6 |= 0x10
                                }
                                Else
                                {
                                    OPT6 &= 0xEF
                                }

                                If (MSFG)
                                {
                                    OPT6 |= 0x20
                                }
                                Else
                                {
                                    OPT6 &= 0xDF
                                }

                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                Local0 = (One | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                                OPT2 = Local0
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    RGE0 |= 0x41
                                }
                                Else
                                {
                                    RGE0 &= 0xBE
                                }

                                If (MSFG)
                                {
                                    RGE6 &= 0x7F
                                    RGE0 |= 0x22
                                }
                                Else
                                {
                                    RGE0 &= 0xDD
                                }
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE
                        RGE0 &= 0xBE
                        RGE0 &= 0xDD
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveLow, Shared, )
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveLow, Shared, )
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveLow, Shared, )
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveLow, Shared, )
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveLow, Shared, )
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (ACPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (LDN, 0x0A)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SP80)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (LDN, 0x14)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SFED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (LDN, 0x15)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (DSLP)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (LDN, 0x16)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D02E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3D) /* \_SB_.AG3D */
                    }

                    Return (PG3D) /* \_SB_.PG3D */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3F) /* \_SB_.AG3F */
                    }

                    Return (PG3F) /* \_SB_.PG3F */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG40) /* \_SB_.AG40 */
                    }

                    Return (PG40) /* \_SB_.PG40 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG41) /* \_SB_.AG41 */
                    }

                    Return (PG41) /* \_SB_.PG41 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG43) /* \_SB_.AG43 */
                    }

                    Return (PG43) /* \_SB_.PG43 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.EPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        \_SB.PCI0.SBRG.EWAK (Arg0)
        \_SB.PCI0.SBRG.EC0.DOSW (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y27)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y28)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y29)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2A)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2B,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                _Y2C)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y27._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y27._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y28._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y28._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y29._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y29._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2A._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2A._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2B._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        CreateDWordField (CRSI, \_SB.TPM._Y2C._BAS, HSPF)  // _BAS: Base Address
                        CreateDWordField (CRSI, \_SB.TPM._Y2C._LEN, HSPL)  // _LEN: Length
                        HSPF = HSPB /* \HSPB */
                        HSPL = HSPS /* \HSPS */
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y28._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02)){}
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y2B._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y2B._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            Offset (0x44), 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        OperationRegion (DBGP, SystemIO, 0x80, 0x08)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        OperationRegion (SMIP, SystemIO, 0xB2, 0x08)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            DPB2,   8
        }

        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, Lock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, Lock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Name (ECB1, Zero)
        Method (EPTS, 1, NotSerialized)
        {
        }

        Method (EWAK, 1, Serialized)
        {
            OperationRegion (ECR2, SystemIO, 0x66, One)
            Field (ECR2, ByteAcc, Lock, Preserve)
            {
                EC66,   8
            }

            OperationRegion (ECR3, SystemIO, 0x62, One)
            Field (ECR3, ByteAcc, Lock, Preserve)
            {
                EC62,   8
            }

            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0xD2
            OBFX ()
            ECB1 = EC62 /* \_SB_.PCI0.SBRG.EWAK.EC62 */
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xD2
            IBFX ()
            EC62 = (0x10 | ECB1)
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x04)  // _GPE: General Purpose Events
            Name (REGC, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    REGC = Arg1
                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040001)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040002)
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040003)
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA002000B)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0021000)
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040087)
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040088)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0x75F06018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DB80,   8
        }

        OperationRegion (IOG2, SystemIO, SMIP, 0x02)
        Field (IOG2, ByteAcc, NoLock, Preserve)
        {
            SSCP,   8, 
            SSSP,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SSCP = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (GCID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SRDM, 0, Serialized)
        {
            PINX = 0x8000000B
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (_SB)
    {
        Name (ANVM, 0x75F6C000)
        OperationRegion (ANVX, SystemMemory, ANVM, 0x00030000)
        Name (ASFH, 0x75F2C000)
        OperationRegion (ASFX, SystemMemory, ASFH, 0x00040000)
    }

    Scope (_SB)
    {
        Name (MUTX, One)
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((!Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08,  // m.].....
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                Local0 = (Arg1 & 0xFFFFFFFF)
                If ((Local0 == 0x4E554653))
                {
                    Return (SFUN ())
                }

                If ((Local0 == 0x53545344))
                {
                    Return (DSTS (IIA0))
                }

                Return (0xFFFFFFFE)
            }

            Name (WQMO, Buffer (0x0387)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x77, 0x03, 0x00, 0x00, 0x06, 0x0B, 0x00, 0x00,  // w.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x46, 0x85, 0x00, 0x01, 0x06, 0x18, 0x42,  // .F.....B
                /* 0020 */  0x10, 0x05, 0x10, 0xD2, 0xE0, 0x81, 0x42, 0x04,  // ......B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x44, 0x86, 0xA1, 0x12,  // ...8D...
                /* 0030 */  0x20, 0x24, 0x09, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x21, 0x10, 0x92, 0x28, 0xC0, 0xBC, 0x00, 0xDD,  // !..(....
                /* 0040 */  0x02, 0x0C, 0x0B, 0xB0, 0x2D, 0xC0, 0xB4, 0x00,  // ....-...
                /* 0048 */  0xC7, 0x40, 0xEA, 0xDF, 0x1F, 0xA2, 0x34, 0x10,  // .@....4.
                /* 0050 */  0x89, 0x80, 0xA4, 0x52, 0x20, 0x24, 0x54, 0x80,  // ...R $T.
                /* 0058 */  0x72, 0x01, 0xBE, 0x05, 0x68, 0x47, 0x94, 0x64,  // r...hG.d
                /* 0060 */  0x01, 0x96, 0x61, 0x44, 0x60, 0xAF, 0xC8, 0x04,  // ..aD`...
                /* 0068 */  0x8D, 0x13, 0x94, 0x33, 0x0C, 0x14, 0xBC, 0x01,  // ...3....
                /* 0070 */  0xDB, 0x14, 0x60, 0x72, 0x10, 0x54, 0xF6, 0x20,  // ..`r.T. 
                /* 0078 */  0x50, 0x32, 0x20, 0xE4, 0x59, 0x80, 0xF5, 0x31,  // P2 .Y..1
                /* 0080 */  0x10, 0x02, 0xBB, 0x17, 0x60, 0x4E, 0x80, 0x37,  // ....`N.7
                /* 0088 */  0x01, 0xE2, 0x46, 0x23, 0x6B, 0x02, 0x2C, 0xCE,  // ..F#k.,.
                /* 0090 */  0x49, 0xC2, 0x04, 0xD8, 0x82, 0x11, 0x4A, 0x6D,  // I.....Jm
                /* 0098 */  0x30, 0x42, 0x69, 0x0C, 0x41, 0x20, 0x71, 0xA2,  // 0Bi.A q.
                /* 00A0 */  0x44, 0x6C, 0x50, 0x80, 0x33, 0x58, 0xA1, 0x44,  // DlP.3X.D
                /* 00A8 */  0x0C, 0x13, 0x22, 0x42, 0x65, 0x18, 0xC4, 0x21,  // .."Be..!
                /* 00B0 */  0x94, 0xD0, 0xE2, 0x46, 0x68, 0x7F, 0x10, 0x24,  // ...Fh..$
                /* 00B8 */  0xDA, 0x8A, 0x35, 0x54, 0x47, 0x1A, 0x0D, 0x6A,  // ..5TG..j
                /* 00C0 */  0x44, 0x09, 0x0E, 0xCC, 0x83, 0x3A, 0xD5, 0xCE,  // D....:..
                /* 00C8 */  0x05, 0x48, 0x9F, 0xAB, 0x40, 0x8E, 0xF5, 0x14,  // .H..@...
                /* 00D0 */  0xEB, 0x1C, 0x2E, 0x01, 0x49, 0x60, 0xAC, 0x04,  // ....I`..
                /* 00D8 */  0x1D, 0x0C, 0x11, 0x8A, 0x6B, 0x40, 0x4D, 0xFC,  // ....k@M.
                /* 00E0 */  0x10, 0x99, 0x20, 0x38, 0xD4, 0x10, 0x3D, 0xDE,  // .. 8..=.
                /* 00E8 */  0x70, 0x27, 0x70, 0x88, 0x0C, 0xD0, 0x73, 0x3A,  // p'p...s:
                /* 00F0 */  0x1A, 0xCC, 0x39, 0xC0, 0xE3, 0x3A, 0x99, 0x33,  // ..9..:.3
                /* 00F8 */  0x2E, 0x55, 0x80, 0xD9, 0xA1, 0x6B, 0x84, 0x09,  // .U...k..
                /* 0100 */  0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E, 0x27, 0x9C,  // ....{>'.
                /* 0108 */  0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D,  // .......=
                /* 0110 */  0xC6, 0xD3, 0x8A, 0x19, 0xF2, 0x29, 0xE0, 0xB0,  // .....)..
                /* 0118 */  0x98, 0xD8, 0x53, 0x02, 0x1D, 0x0F, 0xBC, 0xFF,  // ..S.....
                /* 0120 */  0xFF, 0x78, 0xC0, 0xA3, 0xF8, 0x68, 0x20, 0x84,  // .x...h .
                /* 0128 */  0x57, 0x82, 0xD8, 0x1E, 0xD0, 0xE3, 0x82, 0x81,  // W.......
                /* 0130 */  0xB1, 0x03, 0xB2, 0x5F, 0x01, 0x08, 0xC1, 0xCB,  // ..._....
                /* 0138 */  0x1C, 0x91, 0x9C, 0x22, 0x68, 0x4C, 0x9E, 0xDC,  // ..."hL..
                /* 0140 */  0xAB, 0x41, 0x88, 0x20, 0x27, 0x75, 0xC8, 0x2F,  // .A. 'u./
                /* 0148 */  0x0B, 0x0C, 0xF1, 0x35, 0xC1, 0xD3, 0xAF, 0x10,  // ...5....
                /* 0150 */  0x50, 0x22, 0x47, 0x80, 0x12, 0x33, 0x02, 0x14,  // P"G..3..
                /* 0158 */  0x5E, 0xE4, 0x90, 0x67, 0x73, 0x04, 0xC7, 0x13,  // ^..gs...
                /* 0160 */  0xE5, 0x24, 0x0E, 0xC8, 0x47, 0x07, 0x23, 0x1C,  // .$..G.#.
                /* 0168 */  0x42, 0xB9, 0x27, 0x08, 0xA2, 0x79, 0x46, 0x9A,  // B.'..yF.
                /* 0170 */  0xC6, 0x39, 0xBD, 0x0D, 0x98, 0xA0, 0xD6, 0xC7,  // .9......
                /* 0178 */  0x81, 0x46, 0xEA, 0x90, 0xE7, 0x03, 0xD9, 0x58,  // .F.....X
                /* 0180 */  0xAA, 0x47, 0x4A, 0xA5, 0x02, 0x69, 0x04, 0x35,  // .GJ..i.5
                /* 0188 */  0x0A, 0xB0, 0x3A, 0x09, 0x11, 0x58, 0x24, 0x90,  // ..:..X$.
                /* 0190 */  0x8E, 0x1A, 0x5C, 0x1E, 0x85, 0xC4, 0x41, 0x68,  // ..\...Ah
                /* 0198 */  0x34, 0x86, 0xB3, 0x1C, 0x38, 0x0A, 0xE2, 0x31,  // 4...8..1
                /* 01A0 */  0x38, 0x2A, 0x84, 0x9C, 0x9C, 0x03, 0x50, 0x53,  // 8*....PS
                /* 01A8 */  0x4A, 0x50, 0xE9, 0x74, 0x24, 0x7C, 0x46, 0x1A,  // JP.t$|F.
                /* 01B0 */  0xD3, 0xE1, 0x9C, 0xD9, 0x71, 0x1A, 0x27, 0x10,  // ....q.'.
                /* 01B8 */  0x47, 0x3B, 0xAC, 0x50, 0x87, 0x15, 0xEA, 0xB9,  // G;.P....
                /* 01C0 */  0xC1, 0x17, 0x02, 0x83, 0xBD, 0x3B, 0x18, 0xEA,  // .....;..
                /* 01C8 */  0xD4, 0x62, 0x7A, 0x6C, 0x0F, 0x1E, 0x86, 0x89,  // .bzl....
                /* 01D0 */  0x86, 0x21, 0x88, 0xF5, 0xF4, 0x00, 0x0B, 0xF0,  // .!......
                /* 01D8 */  0x0C, 0x4E, 0xD3, 0xD3, 0x32, 0x9C, 0x21, 0x0D,  // .N..2.!.
                /* 01E0 */  0xC7, 0x6F, 0x05, 0xAF, 0x03, 0x26, 0x60, 0xA7,  // .o...&`.
                /* 01E8 */  0x03, 0xF8, 0x37, 0x0F, 0x4F, 0xE5, 0x14, 0x1E,  // ..7.O...
                /* 01F0 */  0x37, 0x9E, 0x35, 0x12, 0x58, 0xE0, 0xE9, 0x00,  // 7.5.X...
                /* 01F8 */  0xCA, 0xFF, 0xFF, 0x74, 0x80, 0x07, 0xF2, 0x6D,  // ...t...m
                /* 0200 */  0xC0, 0x63, 0x7D, 0x22, 0x60, 0x73, 0x08, 0x11,  // .c}"`s..
                /* 0208 */  0x26, 0x9A, 0xE1, 0x31, 0x82, 0x4F, 0x11, 0x54,  // &..1.O.T
                /* 0210 */  0xD6, 0xB8, 0x50, 0x07, 0x04, 0x5F, 0x14, 0x18,  // ..P.._..
                /* 0218 */  0xF6, 0x31, 0x1F, 0x4D, 0xD1, 0x33, 0xD4, 0xA4,  // .1.M.3..
                /* 0220 */  0x0F, 0xEA, 0x45, 0xC2, 0x4E, 0x35, 0x5A, 0xD5,  // ..E.N5Z.
                /* 0228 */  0x09, 0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D,  // ...rX..=
                /* 0230 */  0x6B, 0xC3, 0xBE, 0x80, 0x78, 0x66, 0xBE, 0x00,  // k...xf..
                /* 0238 */  0x78, 0xB4, 0x2C, 0xC3, 0x3A, 0x74, 0x44, 0xC0,  // x.,.:tD.
                /* 0240 */  0x29, 0x01, 0xD2, 0x6C, 0x8F, 0xE8, 0x98, 0x0E,  // )..l....
                /* 0248 */  0x89, 0x69, 0x00, 0xD2, 0xD9, 0x86, 0xA7, 0x27,  // .i.....'
                /* 0250 */  0x51, 0xF2, 0x31, 0x52, 0x38, 0x67, 0x3D, 0x28,  // Q.1R8g=(
                /* 0258 */  0x50, 0x10, 0x03, 0x3A, 0xC8, 0x11, 0x01, 0x7D,  // P..:...}
                /* 0260 */  0xA8, 0xF1, 0x18, 0x8E, 0xE5, 0x9D, 0xC6, 0x27,  // .......'
                /* 0268 */  0x14, 0xCF, 0xF5, 0x25, 0x80, 0x0D, 0xEE, 0x18,  // ...%....
                /* 0270 */  0xD9, 0xB8, 0x3C, 0x34, 0xAE, 0x01, 0x42, 0x17,  // ..<4..B.
                /* 0278 */  0x00, 0xA3, 0x5B, 0xCD, 0x58, 0x51, 0x60, 0x3E,  // ..[.XQ`>
                /* 0280 */  0x12, 0x60, 0x74, 0xDD, 0x08, 0x40, 0xA6, 0xEF,  // .`t..@..
                /* 0288 */  0x44, 0x00, 0x72, 0x74, 0x2E, 0xE1, 0x7A, 0x81,  // D.rt..z.
                /* 0290 */  0xBA, 0x16, 0x79, 0xB2, 0x06, 0xF1, 0x64, 0x1D,  // ..y...d.
                /* 0298 */  0x68, 0xB2, 0xE8, 0x0B, 0x84, 0x4F, 0x1F, 0x9E,  // h....O..
                /* 02A0 */  0x2C, 0xE6, 0x84, 0xC3, 0x20, 0x9E, 0x4B, 0xFC,  // ,... .K.
                /* 02A8 */  0xFF, 0xBF, 0x51, 0x80, 0x7D, 0x38, 0xBE, 0x51,  // ..Q.}8.Q
                /* 02B0 */  0x00, 0x9E, 0x24, 0x3A, 0x95, 0xEA, 0xF4, 0x46,  // ..$:...F
                /* 02B8 */  0x01, 0xAE, 0x00, 0xAB, 0xA0, 0xC7, 0x00, 0x4B,  // .......K
                /* 02C0 */  0x86, 0x41, 0xDD, 0xB8, 0x00, 0x2B, 0x37, 0x82,  // .A...+7.
                /* 02C8 */  0x97, 0xA0, 0x17, 0x81, 0x27, 0x80, 0x18, 0x41,  // ....'..A
                /* 02D0 */  0x7C, 0xE6, 0x7A, 0xD4, 0x3A, 0xF9, 0x40, 0x3E,  // |.z.:.@>
                /* 02D8 */  0x0D, 0x3C, 0x74, 0xF9, 0xDC, 0xC5, 0x50, 0x9E,  // .<t...P.
                /* 02E0 */  0xB5, 0x1E, 0xBA, 0x42, 0x71, 0x90, 0x58, 0xEF,  // ...Bq.X.
                /* 02E8 */  0x01, 0xFF, 0xFF, 0x47, 0x2F, 0x43, 0x05, 0x0B,  // ...G/C..
                /* 02F0 */  0x13, 0xC4, 0x50, 0x6F, 0x5C, 0x4C, 0xFE, 0x33,  // ..Po\L.3
                /* 02F8 */  0x40, 0x37, 0x0D, 0xDF, 0xB8, 0x00, 0x7E, 0x44,  // @7....~D
                /* 0300 */  0x38, 0x8B, 0xA0, 0xA1, 0x0D, 0x7A, 0x36, 0x3E,  // 8....z6>
                /* 0308 */  0x43, 0xF8, 0xE6, 0xC1, 0x8E, 0x16, 0x5C, 0xD4,  // C.....\.
                /* 0310 */  0xD1, 0x02, 0x75, 0x68, 0xF0, 0x79, 0x81, 0x21,  // ..uh.y.!
                /* 0318 */  0xBE, 0x92, 0x18, 0xE2, 0xC9, 0x82, 0x1D, 0x42,  // .......B
                /* 0320 */  0xC0, 0x79, 0x25, 0x03, 0xEF, 0xD0, 0xD8, 0xFF,  // .y%.....
                /* 0328 */  0x7F, 0x0A, 0xBE, 0x92, 0x01, 0x93, 0x31, 0xE1,  // ......1.
                /* 0330 */  0x4E, 0x0C, 0x1E, 0x02, 0x1F, 0xC0, 0x13, 0xD9,  // N.......
                /* 0338 */  0xF9, 0xF9, 0x84, 0x72, 0x56, 0xB8, 0x11, 0xF3,  // ...rV...
                /* 0340 */  0x29, 0xE1, 0x06, 0x80, 0x51, 0x68, 0xD3, 0xA7,  // )...Qh..
                /* 0348 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                /* 0350 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x3B, 0x1E,  // .V.J..;.
                /* 0358 */  0x38, 0xC6, 0xC2, 0x75, 0x02, 0xB0, 0x88, 0x47,  // 8..u...G
                /* 0360 */  0x80, 0x40, 0x1C, 0x88, 0x42, 0x46, 0x40, 0x14,  // .@..BF@.
                /* 0368 */  0x0F, 0x44, 0x40, 0x16, 0x65, 0x01, 0x88, 0x29,  // .D@.e..)
                /* 0370 */  0x04, 0x11, 0x90, 0x35, 0xBD, 0x30, 0x04, 0x44,  // ...5.0.D
                /* 0378 */  0x40, 0x04, 0xE4, 0x24, 0xEB, 0x10, 0x88, 0x75,  // @..$...u
                /* 0380 */  0x98, 0x00, 0xA2, 0x20, 0xF4, 0xFF, 0x0F         // ... ...
            })
            Method (SFUN, 0, NotSerialized)
            {
                Local0 = One
                Return (Local0)
            }

            Method (DSTS, 1, Serialized)
            {
                Local0 = (Arg0 & 0xFFFFFFFF)
                Switch (Local0)
                {
                    Case (0x00130013)
                    {
                        Local1 = 0x00010000
                    }
                    Case (0x00130014)
                    {
                        Local1 = 0x00010001
                    }
                    Default
                    {
                        Local1 = Zero
                    }

                }

                Return (Local1)
            }
        }
    }

    Scope (_SB)
    {
        Name (MYAS, One)
        Device (ASUP)
        {
            Name (_HID, "ASUS2018")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MYAS == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        Device (RMTW)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AsusMbSwInterface")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x15, 0xB1, 0x2B, 0xB8,  // BC....+.
                /* 0018 */  0xAE, 0x43, 0x35, 0x4B, 0xB7, 0x9D, 0xBD, 0x64,  // .C5K...d
                /* 0020 */  0x16, 0xAB, 0xC3, 0x81, 0x42, 0x43, 0x01, 0x02,  // ....BC..
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // r.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x4C455252)
                    {
                        Return (LERR (Arg2))
                    }
                    Case (0x47424F44)
                    {
                        Return (GBOD (Arg2))
                    }
                    Case (0x53424F44)
                    {
                        Return (SBOD (Arg2))
                    }
                    Case (0x47424F4E)
                    {
                        Return (GBON (Arg2))
                    }
                    Case (0x53415057)
                    {
                        Return (SAPW (Arg2))
                    }
                    Case (0x53555057)
                    {
                        Return (SUPW (Arg2))
                    }
                    Case (0x53555058)
                    {
                        Return (GLBN (Arg2))
                    }
                    Case (0x53555059)
                    {
                        Return (ISLG (Arg2))
                    }
                    Case (0x53555060)
                    {
                        Return (GLBO (Arg2))
                    }
                    Case (0x53555061)
                    {
                        Return (SLBO (Arg2))
                    }
                    Case (0x53424F47)
                    {
                        Return (SBOG (Arg2))
                    }
                    Case (0x4C444654)
                    {
                        Return (LDFT ())
                    }
                    Case (0x53465442)
                    {
                        Return (SFTB (Arg2))
                    }
                    Case (0x53444654)
                    {
                        Return (SDFT (Arg2))
                    }
                    Case (0x5346544D)
                    {
                        Return (SFTM ())
                    }
                    Case (0x4443544C)
                    {
                        Return (DCTL (Arg2))
                    }
                    Case (0x4746414E)
                    {
                        Return (GFAN (Arg2))
                    }
                    Case (0x4446414E)
                    {
                        Return (SFAN (Arg2))
                    }
                    Case (0x47464356)
                    {
                        Return (GFCV (Arg2))
                    }
                    Case (0x44464356)
                    {
                        Return (SFCV (Arg2))
                    }
                    Case (0x43455057)
                    {
                        Return (CKPW (Arg2))
                    }
                    Case (0x47544F44)
                    {
                        Return (GTOD (Arg2))
                    }
                    Case (0x53544F44)
                    {
                        Return (STOD (Arg2))
                    }
                    Case (0x4F505945)
                    {
                        Return (EYPO ())
                    }
                    Case (0x54505945)
                    {
                        Return (EYPT ())
                    }
                    Case (0x45505945)
                    {
                        Return (EYPE ())
                    }
                    Case (0x56505945)
                    {
                        Return (EYPF ())
                    }
                    Case (0x41504631)
                    {
                        Return (APF1 (Arg2))
                    }
                    Case (0x41505057)
                    {
                        Return (APPW (Arg2))
                    }
                    Case (0xFFFFFFFF)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \RMTW.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (RMTW, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x1A0F)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xFF, 0x19, 0x00, 0x00, 0x9A, 0xC8, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xA7, 0x9E, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x07, 0x10, 0x52, 0x90, 0x8C, 0x42, 0x04,  // ...R..B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  // ...8.`0.
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  // <..F..eC
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  // .d@.....
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,  // .......M
                /* 0088 */  0x80, 0xB8, 0x61, 0xC8, 0xDA, 0x00, 0x04, 0x55,  // ..a....U
                /* 0090 */  0x98, 0x00, 0x5B, 0x30, 0x42, 0xA9, 0x0D, 0x46,  // ..[0B..F
                /* 0098 */  0x28, 0x8D, 0x21, 0x68, 0x18, 0x46, 0x89, 0x78,  // (.!h.F.x
                /* 00A0 */  0x48, 0x9D, 0xC1, 0x0A, 0x25, 0x62, 0x98, 0x10,  // H...%b..
                /* 00A8 */  0x11, 0x2A, 0xC3, 0x20, 0xC3, 0x0A, 0x15, 0x2D,  // .*. ...-
                /* 00B0 */  0x6E, 0x84, 0xF6, 0x07, 0x41, 0xA2, 0xAD, 0x58,  // n...A..X
                /* 00B8 */  0x43, 0x75, 0xA4, 0xD1, 0xA0, 0x86, 0x97, 0xE0,  // Cu......
                /* 00C0 */  0x70, 0x3D, 0xD4, 0x73, 0xEC, 0x5C, 0x80, 0x74,  // p=.s.\.t
                /* 00C8 */  0x60, 0x81, 0x04, 0x3F, 0x8B, 0x3A, 0xC7, 0x49,  // `..?.:.I
                /* 00D0 */  0x40, 0x12, 0x18, 0xEB, 0xF8, 0xD9, 0xC0, 0xF1,  // @.......
                /* 00D8 */  0xAE, 0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0,  // ..5..e..
                /* 00E0 */  0x50, 0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21,  // PC.@...!
                /* 00E8 */  0x32, 0x40, 0xCF, 0xE9, 0x68, 0x30, 0x07, 0x00,  // 2@..h0..
                /* 00F0 */  0x3B, 0x9C, 0x8C, 0xEE, 0x01, 0xA5, 0x0A, 0x30,  // ;......0
                /* 00F8 */  0x3B, 0x66, 0x59, 0x04, 0xD2, 0x78, 0x0C, 0x7D,  // ;fY..x.}
                /* 0100 */  0xBA, 0xE7, 0x73, 0xC2, 0x09, 0x2C, 0x7F, 0x10,  // ..s..,..
                /* 0108 */  0xA8, 0x91, 0x19, 0xDA, 0x06, 0xA7, 0x25, 0xCC,  // ......%.
                /* 0110 */  0x90, 0x87, 0x7F, 0x58, 0x4C, 0xEC, 0x21, 0xC1,  // ...XL.!.
                /* 0118 */  0x10, 0x1A, 0x0F, 0xBC, 0xFF, 0xFF, 0x78, 0xC0,  // ......x.
                /* 0120 */  0xA3, 0xF8, 0x4C, 0x20, 0x84, 0x57, 0x82, 0xD8,  // ..L .W..
                /* 0128 */  0x1E, 0xD0, 0x73, 0x82, 0x81, 0xB1, 0x03, 0xB2,  // ..s.....
                /* 0130 */  0x5F, 0x01, 0x08, 0xC1, 0xCB, 0x1C, 0x91, 0x9C,  // _.......
                /* 0138 */  0x22, 0x68, 0x4C, 0xC6, 0x68, 0x15, 0x42, 0x43,  // "hL.h.BC
                /* 0140 */  0x08, 0x6D, 0x88, 0xB3, 0x8B, 0x7F, 0xF0, 0x86,  // .m......
                /* 0148 */  0x39, 0x77, 0x13, 0x14, 0x39, 0x02, 0x94, 0x98,  // 9w..9...
                /* 0150 */  0x11, 0xA0, 0x8E, 0x01, 0xD1, 0x43, 0x9F, 0x4D,  // .....C.M
                /* 0158 */  0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4, 0x33,  // ...r...3
                /* 0160 */  0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20, 0x9A,  // ....{H .
                /* 0168 */  0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02, 0x53,  // ....9..S
                /* 0170 */  0xDA, 0x0B, 0xA2, 0x3C, 0x10, 0x49, 0x5B, 0xAA,  // ...<.I[.
                /* 0178 */  0x6C, 0x2C, 0xD5, 0x83, 0xA0, 0x01, 0xCF, 0x08,  // l,......
                /* 0180 */  0xC2, 0xF5, 0x3D, 0xC2, 0x87, 0x03, 0x4F, 0xE3,  // ..=...O.
                /* 0188 */  0xB8, 0x3D, 0x85, 0x87, 0x08, 0x87, 0x82, 0xD3,  // .=......
                /* 0190 */  0x69, 0x83, 0xC7, 0xA1, 0x50, 0x18, 0x08, 0x0D,  // i...P...
                /* 0198 */  0xC8, 0xC7, 0x00, 0x02, 0x47, 0x41, 0x7C, 0x4A,  // ....GA|J
                /* 01A0 */  0x70, 0x18, 0x08, 0x39, 0x39, 0x0A, 0xA0, 0x8E,  // p..99...
                /* 01A8 */  0x17, 0x1E, 0x06, 0xF6, 0x4E, 0xC1, 0x84, 0x9F,  // ....N...
                /* 01B0 */  0x18, 0xA0, 0x5D, 0x0E, 0x7C, 0x14, 0xE0, 0x70,  // ..].|..p
                /* 01B8 */  0x86, 0x34, 0x1C, 0xBF, 0x09, 0xBC, 0x02, 0x98,  // .4......
                /* 01C0 */  0x80, 0x9D, 0x08, 0xE0, 0xDF, 0x36, 0x3C, 0x7E,  // .....6<~
                /* 01C8 */  0x1F, 0x31, 0x9E, 0x2F, 0x12, 0x38, 0xCE, 0xB0,  // .1./.8..
                /* 01D0 */  0xD0, 0xA3, 0xF5, 0x44, 0xF9, 0xA8, 0xCE, 0xE9,  // ...D....
                /* 01D8 */  0xC8, 0xA3, 0xBC, 0x58, 0x98, 0xC0, 0xE3, 0x82,  // ...X....
                /* 01E0 */  0xF7, 0xFF, 0x1F, 0x17, 0x38, 0xC6, 0xEC, 0x71,  // ....8..q
                /* 01E8 */  0x81, 0x4F, 0xE0, 0xC1, 0x01, 0x14, 0x40, 0xBE,  // .O....@.
                /* 01F0 */  0x28, 0x58, 0xE9, 0x61, 0x81, 0xCE, 0x21, 0x44,  // (X.a..!D
                /* 01F8 */  0x98, 0x68, 0x86, 0xC7, 0x08, 0x3E, 0x60, 0x50,  // .h...>`P
                /* 0200 */  0x59, 0xE3, 0x42, 0x0D, 0xD5, 0x27, 0x17, 0x86,  // Y.B..'..
                /* 0208 */  0xFD, 0x3E, 0x70, 0x34, 0x45, 0x5F, 0x1B, 0x74,  // .>p4E_.t
                /* 0210 */  0x20, 0x38, 0xA8, 0x27, 0x02, 0x4B, 0xB4, 0xA8,  //  8.'.K..
                /* 0218 */  0xD5, 0x29, 0xAC, 0x47, 0xCA, 0x61, 0x8D, 0x16,  // .).G.a..
                /* 0220 */  0xF6, 0x80, 0x9F, 0x2F, 0x7C, 0x9F, 0xE0, 0x57,  // .../|..W
                /* 0228 */  0x17, 0x8F, 0x96, 0x25, 0x39, 0x3D, 0xA0, 0x06,  // ...%9=..
                /* 0230 */  0x6C, 0x3D, 0x40, 0x3A, 0x27, 0x60, 0x2F, 0x2B,  // l=@:'`/+
                /* 0238 */  0x0C, 0xE2, 0x44, 0xA3, 0x1C, 0x93, 0x00, 0x35,  // ..D....5
                /* 0240 */  0x68, 0x8F, 0xCA, 0xD9, 0x49, 0x94, 0x7C, 0x9C,  // h...I.|.
                /* 0248 */  0x74, 0x00, 0xCE, 0x3A, 0x76, 0x0A, 0x62, 0x40,  // t..:v.b@
                /* 0250 */  0x07, 0x39, 0x3E, 0x80, 0x66, 0x80, 0xC7, 0xC9,  // .9>.f...
                /* 0258 */  0xC6, 0xE6, 0xE1, 0x71, 0x0D, 0xE7, 0x02, 0x04,  // ...q....
                /* 0260 */  0x78, 0x35, 0xE3, 0x45, 0x81, 0xF9, 0xF4, 0x80,  // x5.E....
                /* 0268 */  0xD1, 0x75, 0x2B, 0x00, 0x99, 0xBE, 0x53, 0x01,  // .u+...S.
                /* 0270 */  0x94, 0xFF, 0xFF, 0xA9, 0x00, 0x4C, 0xE8, 0x7C,  // .....L.|
                /* 0278 */  0xA3, 0x9E, 0x2C, 0x8F, 0x3C, 0x59, 0x0A, 0xE2,  // ..,.<Y..
                /* 0280 */  0xC9, 0xFA, 0x52, 0x01, 0x1C, 0xCE, 0x08, 0x67,  // ..R....g
                /* 0288 */  0xF7, 0x98, 0xE2, 0x4B, 0x05, 0x20, 0xD2, 0xA1,  // ...K. ..
                /* 0290 */  0xD4, 0x4B, 0x05, 0xC8, 0xD2, 0xAC, 0x42, 0x97,  // .K....B.
                /* 0298 */  0x0A, 0xCE, 0x61, 0x4D, 0x40, 0xBA, 0x1B, 0xF1,  // ..aM@...
                /* 02A0 */  0x3B, 0x85, 0x91, 0x9F, 0x89, 0x9E, 0x29, 0x0C,  // ;.....).
                /* 02A8 */  0x13, 0xE4, 0x35, 0x2A, 0xBA, 0x6F, 0x0D, 0x82,  // ..5*.o..
                /* 02B0 */  0xD4, 0xAD, 0x82, 0xA7, 0xA7, 0x90, 0xEE, 0x93,  // ........
                /* 02B8 */  0x01, 0x4A, 0xE9, 0x1D, 0x87, 0x82, 0x78, 0x70,  // .J....xp
                /* 02C0 */  0x0E, 0x71, 0x32, 0x40, 0xFE, 0xFF, 0x09, 0xDE,  // .q2@....
                /* 02C8 */  0x99, 0x3C, 0x87, 0x63, 0x3A, 0x90, 0xA7, 0x27,  // .<.c:..'
                /* 02D0 */  0x76, 0xA7, 0x00, 0x9E, 0x11, 0x86, 0x84, 0x46,  // v......F
                /* 02D8 */  0xF7, 0xD9, 0xE1, 0x3C, 0x5F, 0x3A, 0xC0, 0x3C,  // ...<_:.<
                /* 02E0 */  0x53, 0x5F, 0x3A, 0x80, 0x73, 0x88, 0xBB, 0x00,  // S_:.s...
                /* 02E8 */  0x4A, 0xF6, 0x5D, 0x80, 0x82, 0x78, 0x62, 0x8E,  // J.]..xb.
                /* 02F0 */  0x32, 0x53, 0xF4, 0x4C, 0x8C, 0xFF, 0x28, 0xF0,  // 2S.L..(.
                /* 02F8 */  0x32, 0xF0, 0x80, 0x85, 0xB9, 0x72, 0x80, 0xFB,  // 2....r..
                /* 0300 */  0xB2, 0xE0, 0x2B, 0x07, 0xF8, 0x8E, 0x35, 0xB8,  // ..+...5.
                /* 0308 */  0xFF, 0xFF, 0x85, 0x81, 0xDF, 0x06, 0x9E, 0x74,  // .......t
                /* 0310 */  0x0C, 0x71, 0x50, 0xE0, 0x87, 0xF2, 0xB5, 0x04,  // .qP.....
                /* 0318 */  0xF0, 0xA4, 0xD4, 0xE9, 0x79, 0xF3, 0xB5, 0x04,  // ....y...
                /* 0320 */  0x5C, 0x51, 0xAE, 0x25, 0xA8, 0xB3, 0xA6, 0x05,  // \Q.%....
                /* 0328 */  0x01, 0xC9, 0xFB, 0xA5, 0x90, 0x60, 0xFA, 0x5C,  // .....`.\
                /* 0330 */  0x02, 0x8F, 0x60, 0xFC, 0xD3, 0x13, 0x2A, 0x38,  // ..`...*8
                /* 0338 */  0x85, 0xA2, 0x1F, 0x1E, 0x50, 0x61, 0x0F, 0x0F,  // ....Pa..
                /* 0340 */  0x14, 0xC4, 0xC7, 0x49, 0xDF, 0x4B, 0x80, 0xEF,  // ...I.K..
                /* 0348 */  0xFF, 0xFF, 0x5E, 0x02, 0xB8, 0xC9, 0x30, 0x22,  // ..^...0"
                /* 0350 */  0xB4, 0x8A, 0xA3, 0x05, 0x72, 0x46, 0x60, 0x3D,  // ....rF`=
                /* 0358 */  0x11, 0xF8, 0xE4, 0x02, 0x9C, 0xC3, 0x1F, 0xDD,  // ........
                /* 0360 */  0x50, 0x71, 0xE7, 0x4C, 0x41, 0x3C, 0x28, 0x9F,  // Pq.LA<(.
                /* 0368 */  0x5C, 0x80, 0xDF, 0xA9, 0x04, 0xEE, 0xFF, 0xFF,  // \.......
                /* 0370 */  0x54, 0x02, 0xF8, 0xF0, 0x7A, 0x2A, 0x01, 0xDD,  // T...z*..
                /* 0378 */  0xDD, 0x0B, 0x4C, 0x57, 0x93, 0x33, 0x89, 0x16,  // ..LW.3..
                /* 0380 */  0xDC, 0x77, 0x2F, 0x80, 0x0B, 0xFF, 0xFF, 0xBB,  // .w/.....
                /* 0388 */  0x17, 0xC0, 0xFF, 0xFF, 0xFF, 0xDD, 0x0B, 0x64,  // .......d
                /* 0390 */  0x5E, 0xEF, 0x5E, 0xC0, 0xEB, 0x5C, 0x82, 0xB9,  // ^.^..\..
                /* 0398 */  0x7B, 0x01, 0x7C, 0xFB, 0xFF, 0xDF, 0xBD, 0x00,  // {.|.....
                /* 03A0 */  0x02, 0x9F, 0x4A, 0x40, 0x96, 0xED, 0x54, 0x82,  // ..J@..T.
                /* 03A8 */  0x56, 0xE8, 0xE0, 0xFF, 0x7F, 0x8E, 0x86, 0x39,  // V......9
                /* 03B0 */  0x81, 0x43, 0x79, 0xC2, 0xE8, 0x1A, 0x96, 0xE8,  // .Cy.....
                /* 03B8 */  0xB9, 0x7C, 0xA1, 0x94, 0xC0, 0xE8, 0xF2, 0x05,  // .|......
                /* 03C0 */  0xB0, 0x2D, 0xD0, 0x5D, 0x00, 0x15, 0xE1, 0x2E,  // .-.]....
                /* 03C8 */  0x40, 0x41, 0x7C, 0xF9, 0x02, 0x0E, 0xFF, 0xFF,  // @A|.....
                /* 03D0 */  0xCB, 0x17, 0x70, 0x0A, 0x05, 0x21, 0x23, 0x37,  // ..p..!#7
                /* 03D8 */  0x09, 0x7A, 0xF9, 0x82, 0x73, 0x71, 0xF0, 0xFD,  // .z..sq..
                /* 03E0 */  0xC8, 0x83, 0x02, 0xD7, 0x60, 0xCE, 0xBB, 0xD8,  // ....`...
                /* 03E8 */  0x93, 0x22, 0xBD, 0x9E, 0xC0, 0xBD, 0x73, 0x78,  // ."....sx
                /* 03F0 */  0x6C, 0xE0, 0x10, 0x77, 0x05, 0x03, 0xF6, 0x2E,  // l..w....
                /* 03F8 */  0x6F, 0x27, 0xE0, 0xD2, 0xB6, 0x76, 0xDD, 0x4E,  // o'...v.N
                /* 0400 */  0x70, 0x09, 0x8F, 0xD3, 0x90, 0x8F, 0x27, 0x98,  // p.....'.
                /* 0408 */  0x3C, 0xB7, 0x13, 0x54, 0x12, 0x18, 0x65, 0x21,  // <..T..e!
                /* 0410 */  0xD1, 0x11, 0x82, 0xAB, 0xBF, 0x89, 0xD1, 0xFF,  // ........
                /* 0418 */  0x3F, 0x88, 0x2D, 0xDC, 0x4E, 0x00, 0x3A, 0x8C,  // ?.-.N.:.
                /* 0420 */  0x19, 0xCE, 0x88, 0xDE, 0x2B, 0x0C, 0xE9, 0x33,  // ....+..3
                /* 0428 */  0x18, 0x30, 0x0D, 0x74, 0x04, 0x41, 0x5F, 0xD2,  // .0.t.A_.
                /* 0430 */  0xB0, 0x09, 0x6E, 0x20, 0x74, 0x46, 0xF0, 0x2E,  // ..n tF..
                /* 0438 */  0x20, 0x70, 0x27, 0x86, 0xF9, 0xFF, 0x4F, 0x0C,  //  p'...O.
                /* 0440 */  0x77, 0x00, 0x01, 0xDF, 0x59, 0x0D, 0x30, 0x78,  // w...Y.0x
                /* 0448 */  0x00, 0xF0, 0x59, 0x0D, 0x50, 0x75, 0x7B, 0x01,  // ..Y.Pu{.
                /* 0450 */  0xD9, 0x35, 0xC5, 0xB7, 0x17, 0x3E, 0x60, 0x6B,  // .5...>`k
                /* 0458 */  0x00, 0xD2, 0xF1, 0xE1, 0xF4, 0x8F, 0xE3, 0x28,  // .......(
                /* 0460 */  0xCE, 0xEB, 0x34, 0x5E, 0x60, 0x62, 0xD4, 0x2C,  // ..4^`b.,
                /* 0468 */  0xE0, 0xFF, 0x7F, 0xCA, 0xF0, 0x84, 0x7B, 0x03,  // ......{.
                /* 0470 */  0x54, 0xEA, 0x6B, 0x14, 0x1D, 0x95, 0xF3, 0x92,  // T.k.....
                /* 0478 */  0x28, 0xF5, 0xB1, 0x00, 0x95, 0xF3, 0x58, 0x40,  // (.....X@
                /* 0480 */  0x41, 0x0C, 0xE8, 0x8B, 0x87, 0x95, 0x5C, 0x3C,  // A.....\<
                /* 0488 */  0xD0, 0x83, 0x38, 0xD9, 0x37, 0x54, 0x5F, 0x3C,  // ..8.7T_<
                /* 0490 */  0xC0, 0x7C, 0x77, 0x01, 0x97, 0xB1, 0x5B, 0xCF,  // .|w...[.
                /* 0498 */  0x0B, 0x05, 0x10, 0x09, 0x3E, 0x55, 0x54, 0xD4,  // ....>UT.
                /* 04A0 */  0xA9, 0x52, 0x10, 0x4F, 0xD5, 0x31, 0x4E, 0x24,  // .R.O.1N$
                /* 04A8 */  0x9E, 0x2A, 0xFA, 0x24, 0x74, 0x6E, 0x6F, 0x24,  // .*.$tno$
                /* 04B0 */  0xFC, 0x3C, 0xF0, 0x3E, 0x01, 0xE6, 0xA1, 0xF8,  // .<.>....
                /* 04B8 */  0x70, 0x05, 0xFC, 0xFF, 0xFF, 0xD7, 0x09, 0x70,  // p......p
                /* 04C0 */  0x28, 0xF4, 0x69, 0x52, 0xE9, 0x75, 0x02, 0x5C,  // (.iR.u.\
                /* 04C8 */  0x82, 0xAE, 0x13, 0xE8, 0x58, 0x4B, 0xD5, 0x75,  // ....XK.u
                /* 04D0 */  0x02, 0xDE, 0x30, 0x1D, 0xE4, 0x3A, 0x41, 0x8F,  // ..0..:A.
                /* 04D8 */  0x79, 0x3C, 0xC0, 0x61, 0x0F, 0x25, 0x19, 0x8E,  // y<.a.%..
                /* 04E0 */  0x82, 0x78, 0x6C, 0xBE, 0x93, 0xFB, 0x3A, 0x01,  // .xl...:.
                /* 04E8 */  0xF7, 0xCE, 0x02, 0xEF, 0x3A, 0xC1, 0x0E, 0x05,  // ....:...
                /* 04F0 */  0xB0, 0x09, 0x7C, 0x67, 0x01, 0xCF, 0x81, 0x82,  // ..|g....
                /* 04F8 */  0x1D, 0x1C, 0xC0, 0x3C, 0x28, 0x70, 0x1C, 0x1C,  // ...<(p..
                /* 0500 */  0x80, 0xE3, 0xFF, 0xFF, 0xE0, 0x00, 0x34, 0x6E,  // ......4n
                /* 0508 */  0xB4, 0x20, 0xD3, 0x7F, 0x70, 0x40, 0xAB, 0xB8,  // . ..p@..
                /* 0510 */  0xD6, 0x40, 0x94, 0x76, 0x1A, 0x22, 0xB9, 0xAF,  // .@.v."..
                /* 0518 */  0x35, 0xA8, 0xC4, 0xD7, 0x1A, 0x40, 0x76, 0xF4,  // 5....@v.
                /* 0520 */  0xA9, 0xA2, 0xC2, 0x4E, 0x95, 0x82, 0x78, 0xAA,  // ...N..x.
                /* 0528 */  0xBE, 0x72, 0xC0, 0xBA, 0x4E, 0x60, 0x8E, 0x5D,  // .r..N`.]
                /* 0530 */  0x60, 0xF9, 0xFF, 0x5F, 0x27, 0x60, 0x5E, 0x39,  // `.._'`^9
                /* 0538 */  0xC0, 0x77, 0xEC, 0x02, 0xE2, 0xF7, 0x1A, 0xD0,  // .w......
                /* 0540 */  0x49, 0xBA, 0x4F, 0xA0, 0x83, 0xDD, 0x6B, 0x20,  // I.O...k 
                /* 0548 */  0xDE, 0x27, 0x9E, 0xD6, 0x9E, 0xE8, 0x74, 0xAF,  // .'....t.
                /* 0550 */  0x41, 0x85, 0xA0, 0xD0, 0xC5, 0xC6, 0xA7, 0x02,  // A.......
                /* 0558 */  0x2E, 0x1A, 0x8E, 0x82, 0xF8, 0x5E, 0x03, 0x38,  // .....^.8
                /* 0560 */  0x39, 0x39, 0x80, 0xE1, 0xFF, 0x7F, 0xAF, 0x01,  // 99......
                /* 0568 */  0xFB, 0xC9, 0x01, 0x50, 0x75, 0xB1, 0x01, 0x59,  // ...Pu..Y
                /* 0570 */  0x82, 0x93, 0x03, 0x5A, 0xC7, 0xC5, 0x06, 0x2A,  // ...Z...*
                /* 0578 */  0x42, 0x82, 0xC9, 0x2F, 0x36, 0xA8, 0xCC, 0x17,  // B../6...
                /* 0580 */  0x1B, 0x40, 0xD6, 0xFF, 0xFF, 0x7E, 0x0A, 0x7C,  // .@...~.|
                /* 0588 */  0x2F, 0x02, 0x0F, 0x14, 0xB8, 0x9B, 0x0D, 0x30,  // /......0
                /* 0590 */  0xBD, 0x9F, 0x02, 0x7F, 0x89, 0x37, 0x1B, 0xD0,  // .....7..
                /* 0598 */  0x89, 0xBA, 0x50, 0xA0, 0xA3, 0xDD, 0x6C, 0xA0,  // ..P...l.
                /* 05A0 */  0x5A, 0x03, 0x54, 0x98, 0x9B, 0x0D, 0x2A, 0x06,  // Z.T...*.
                /* 05A8 */  0x85, 0xAE, 0x36, 0x3E, 0x16, 0x70, 0xD9, 0x70,  // ..6>.p.p
                /* 05B0 */  0x14, 0xC4, 0x37, 0x1B, 0xFC, 0xFF, 0xFF, 0x66,  // ..7....f
                /* 05B8 */  0x03, 0x38, 0x38, 0x3A, 0x80, 0xFB, 0x6A, 0x03,  // .88:..j.
                /* 05C0 */  0x7C, 0x8E, 0x0E, 0x80, 0x82, 0xAB, 0x0D, 0xC8,  // |.......
                /* 05C8 */  0x62, 0x7C, 0xB0, 0x75, 0x74, 0xC0, 0x89, 0x01,  // b|.ut...
                /* 05D0 */  0xD2, 0xD1, 0x01, 0xD6, 0x5D, 0x20, 0x42, 0x82,  // ....] B.
                /* 05D8 */  0xF1, 0x57, 0xA4, 0xAB, 0x0D, 0x0F, 0x0E, 0xA3,  // .W......
                /* 05E0 */  0xFF, 0x7F, 0x74, 0x12, 0x5D, 0xE4, 0x10, 0x30,  // ..t.]..0
                /* 05E8 */  0xBA, 0xC8, 0x11, 0x10, 0x5D, 0x63, 0x7C, 0x91,  // ....]c|.
                /* 05F0 */  0xF7, 0x39, 0x13, 0x37, 0x4A, 0x2B, 0x1C, 0x83,  // .9.7J+..
                /* 05F8 */  0xE6, 0x91, 0xE0, 0x28, 0xDE, 0x6C, 0xC0, 0x7B,  // ...(.l.{
                /* 0600 */  0xC9, 0x04, 0xD7, 0x84, 0xE0, 0x0C, 0xE1, 0x7C,  // .......|
                /* 0608 */  0x6B, 0x9F, 0x10, 0x88, 0x4F, 0xA1, 0xE0, 0x8B,  // k...O...
                /* 0610 */  0x30, 0x21, 0xB4, 0x0A, 0x10, 0x69, 0x3C, 0x04,  // 0!...i<.
                /* 0618 */  0x10, 0xC7, 0x23, 0x02, 0xF1, 0xA1, 0x81, 0x8F,  // ..#.....
                /* 0620 */  0x08, 0x5C, 0x87, 0x13, 0x1C, 0xB8, 0x6F, 0xFC,  // .\....o.
                /* 0628 */  0xF6, 0x7C, 0x77, 0x02, 0x31, 0x92, 0xEF, 0x4E,  // .|w.1..N
                /* 0630 */  0xEC, 0xFF, 0x7F, 0x33, 0x01, 0x4F, 0x86, 0xA3,  // ...3.O..
                /* 0638 */  0x2E, 0x94, 0x13, 0x46, 0xC4, 0x47, 0x8A, 0x07,  // ...F.G..
                /* 0640 */  0x0C, 0x4F, 0x19, 0xBC, 0x6F, 0x0B, 0x4D, 0x19,  // .O..o.M.
                /* 0648 */  0x64, 0xA7, 0x2B, 0xC0, 0xA0, 0x85, 0x33, 0x0D,  // d.+...3.
                /* 0650 */  0xA0, 0xE3, 0xFF, 0x7F, 0xA6, 0x81, 0x6B, 0xD2,  // ......k.
                /* 0658 */  0xA1, 0xD0, 0xD3, 0x15, 0xC8, 0x64, 0x9E, 0x69,  // .....d.i
                /* 0660 */  0xD0, 0x61, 0x57, 0xA2, 0x33, 0x0D, 0xBC, 0x69,  // .aW.3..i
                /* 0668 */  0x3A, 0xDE, 0x99, 0x86, 0x42, 0x38, 0x18, 0x8C,  // :...B8..
                /* 0670 */  0x62, 0x41, 0xE8, 0x58, 0xC0, 0x83, 0xC0, 0x51,  // bA.X...Q
                /* 0678 */  0x10, 0x7B, 0xB8, 0xFD, 0xD1, 0x33, 0x0D, 0xBC,  // .{...3..
                /* 0680 */  0x93, 0x38, 0xB8, 0x2F, 0x35, 0xE0, 0x1B, 0x12,  // .8./5...
                /* 0688 */  0x9C, 0x4B, 0x0D, 0x3F, 0xAB, 0x03, 0xD7, 0xE3,  // .K.?....
                /* 0690 */  0x3C, 0x9C, 0x63, 0x0D, 0x66, 0x4C, 0x60, 0xFA,  // <.c.fL`.
                /* 0698 */  0xFF, 0x8F, 0x09, 0xCE, 0xC1, 0x06, 0x7C, 0x63,  // ......|c
                /* 06A0 */  0xF2, 0xC1, 0x06, 0xDE, 0xF1, 0x0C, 0xDC, 0x50,  // .......P
                /* 06A8 */  0x3E, 0xC3, 0x81, 0x6F, 0xD8, 0x70, 0x8E, 0x36,  // >..o.p.6
                /* 06B0 */  0xB8, 0x61, 0x83, 0xFB, 0x6E, 0x03, 0xBE, 0x63,  // .a..n..c
                /* 06B8 */  0x1E, 0xF0, 0x3B, 0xC3, 0x00, 0x87, 0xFF, 0xFF,  // ..;.....
                /* 06C0 */  0x19, 0x06, 0xA8, 0x1E, 0xF3, 0x40, 0xA6, 0x62,  // .....@.b
                /* 06C8 */  0x15, 0x3A, 0xC3, 0xE0, 0xB2, 0x5C, 0x88, 0x21,  // .:...\.!
                /* 06D0 */  0x5E, 0x17, 0xDE, 0xCC, 0xAD, 0xFE, 0x7C, 0x47,  // ^.....|G
                /* 06D8 */  0x47, 0x65, 0xDD, 0x14, 0x52, 0x7F, 0xE0, 0x44,  // Ge..R..D
                /* 06E0 */  0xE9, 0x3D, 0x70, 0x52, 0x10, 0x8F, 0xCD, 0x49,  // .=pR...I
                /* 06E8 */  0x0E, 0x17, 0x68, 0x2D, 0x07, 0x4E, 0x32, 0xA7,  // ..h-.N2.
                /* 06F0 */  0x63, 0x38, 0x9F, 0x13, 0x2A, 0xFE, 0x4C, 0x0C,  // c8..*.L.
                /* 06F8 */  0x94, 0xEF, 0x61, 0x70, 0x06, 0x85, 0x39, 0xEB,  // ..ap..9.
                /* 0700 */  0x01, 0xB7, 0xFF, 0xFF, 0x3D, 0x0C, 0x18, 0x05,  // ....=...
                /* 0708 */  0xBF, 0x87, 0xA1, 0xA2, 0xCE, 0x88, 0x82, 0xF8,  // ........
                /* 0710 */  0x5A, 0xE0, 0x7B, 0x09, 0x9C, 0x3B, 0x07, 0xEE,  // Z.{..;..
                /* 0718 */  0x5E, 0x02, 0xEF, 0x1A, 0x06, 0x8E, 0xDB, 0x0D,  // ^.......
                /* 0720 */  0xF8, 0xAE, 0x1C, 0xC0, 0x5B, 0xAC, 0xC4, 0x2B,  // ....[..+
                /* 0728 */  0x33, 0xD8, 0xC2, 0x5D, 0x99, 0xD1, 0x12, 0xAF,  // 3..]....
                /* 0730 */  0x1C, 0x50, 0xCF, 0xF4, 0xBE, 0x3E, 0xFB, 0x16,  // .P...>..
                /* 0738 */  0xC6, 0xE5, 0xC0, 0x48, 0xCC, 0x45, 0x15, 0x15,  // ...H.E..
                /* 0740 */  0xFF, 0xCA, 0x41, 0x41, 0x7C, 0xC7, 0x71, 0x1C,  // ..AA|.q.
                /* 0748 */  0x01, 0xFF, 0xFF, 0x2B, 0x07, 0x76, 0x4C, 0xBE,  // ...+.vL.
                /* 0750 */  0x72, 0xC0, 0xBA, 0x35, 0x03, 0xE3, 0xB3, 0x03,  // r..5....
                /* 0758 */  0x9C, 0x53, 0x07, 0xEE, 0x2E, 0x06, 0xFC, 0x8F,  // .S......
                /* 0760 */  0x17, 0xE0, 0xB8, 0x8B, 0x01, 0xA7, 0xE3, 0x05,  // ........
                /* 0768 */  0xB0, 0xF9, 0xFF, 0x1F, 0x2F, 0x40, 0x76, 0x41,  // ..../@vA
                /* 0770 */  0x02, 0x99, 0x96, 0x0B, 0x12, 0x3A, 0xD1, 0xF1,  // .....:..
                /* 0778 */  0x02, 0xEA, 0x05, 0xDF, 0x19, 0x2E, 0x48, 0xA8,  // ......H.
                /* 0780 */  0x3B, 0x92, 0x53, 0x1F, 0x61, 0x50, 0x39, 0x4F,  // ;.S.aP9O
                /* 0788 */  0x07, 0x14, 0xC4, 0x80, 0xBE, 0x11, 0xFA, 0x1A,  // ........
                /* 0790 */  0x86, 0x3B, 0x37, 0xE0, 0x8F, 0x47, 0xC0, 0xF0,  // .;7..G..
                /* 0798 */  0x10, 0xC6, 0x2E, 0x3F, 0xC0, 0x22, 0xC6, 0xD9,  // ...?."..
                /* 07A0 */  0x0A, 0x25, 0xFC, 0x62, 0x42, 0x41, 0x3C, 0x31,  // .%.bBA<1
                /* 07A8 */  0x9F, 0xE0, 0xE0, 0x5C, 0x27, 0xB8, 0xC8, 0x31,  // ...\'..1
                /* 07B0 */  0xE9, 0x50, 0x0B, 0xFE, 0xFF, 0xFF, 0xB9, 0x1F,  // .P......
                /* 07B8 */  0x9C, 0xA3, 0x82, 0x3B, 0xDC, 0xB3, 0x39, 0x2A,  // ...;..9*
                /* 07C0 */  0xF0, 0x5F, 0x14, 0x7C, 0xCC, 0x03, 0x3C, 0x29,  // ._.|..<)
                /* 07C8 */  0xB5, 0x29, 0xF1, 0x8E, 0x04, 0xB2, 0x78, 0x77,  // .)....xw
                /* 07D0 */  0x24, 0xB4, 0xC8, 0x5B, 0x07, 0xD4, 0x23, 0x8F,  // $..[..#.
                /* 07D8 */  0x65, 0xDD, 0x91, 0x50, 0x82, 0x60, 0x74, 0x49,  // e..P.`tI
                /* 07E0 */  0xF2, 0xD9, 0x81, 0x2F, 0xCD, 0x60, 0x06, 0xF1,  // .../.`..
                /* 07E8 */  0x1D, 0xC9, 0x41, 0x6E, 0x1D, 0xD0, 0x4F, 0x05,  // ..An..O.
                /* 07F0 */  0x70, 0xFE, 0xFF, 0x17, 0x24, 0xE0, 0x74, 0x74,  // p...$.tt
                /* 07F8 */  0x00, 0xC7, 0xF9, 0x02, 0xFE, 0x0D, 0x09, 0x3C,  // .......<
                /* 0800 */  0xE7, 0x0B, 0xE0, 0x7A, 0x47, 0x02, 0xCF, 0xF9,  // ...zG...
                /* 0808 */  0x02, 0x30, 0xA5, 0xD4, 0xEB, 0xFF, 0xFF, 0x7C,  // .0.....|
                /* 0810 */  0x01, 0x2E, 0x3D, 0x07, 0x75, 0x74, 0xAA, 0x83,  // ..=.ut..
                /* 0818 */  0x3A, 0x54, 0x6F, 0x80, 0xCA, 0x71, 0x42, 0xA7,  // :To..qB.
                /* 0820 */  0xA3, 0x72, 0x02, 0x18, 0x5D, 0x92, 0x00, 0xD3,  // .r..]...
                /* 0828 */  0x51, 0x6E, 0x26, 0x28, 0xF1, 0x37, 0x13, 0x0A,  // Qn&(.7..
                /* 0830 */  0xE2, 0xCB, 0xB1, 0xCF, 0x70, 0x9E, 0x2A, 0x0E,  // ....p.*.
                /* 0838 */  0xDA, 0x03, 0x78, 0x04, 0x78, 0x31, 0x81, 0x7B,  // ..x.x1.{
                /* 0840 */  0x45, 0x02, 0x5E, 0x63, 0xFA, 0xFF, 0x1F, 0x13,  // E.^c....
                /* 0848 */  0x1C, 0xC5, 0x63, 0x02, 0x02, 0x37, 0x0E, 0x70,  // ..c..7.p
                /* 0850 */  0x8E, 0x09, 0xD6, 0x1D, 0xFF, 0x98, 0xC0, 0x7F,  // ........
                /* 0858 */  0x83, 0x07, 0xD7, 0x98, 0x60, 0x9F, 0x29, 0x8E,  // ....`.).
                /* 0860 */  0x09, 0xFC, 0x37, 0x23, 0xDF, 0x5B, 0x00, 0x1B,  // ..7#.[..
                /* 0868 */  0xFF, 0xFF, 0x7B, 0x0B, 0xCC, 0xBF, 0x62, 0x87,  // ..{...b.
                /* 0870 */  0xD7, 0x2C, 0x90, 0x1D, 0x34, 0x7C, 0x6F, 0xC1,  // .,..4|o.
                /* 0878 */  0x49, 0xB8, 0x66, 0x41, 0x1C, 0xE6, 0x23, 0xA6,  // I.fA..#.
                /* 0880 */  0x43, 0x5F, 0xF5, 0xE8, 0xA8, 0x1C, 0x97, 0x44,  // C_.....D
                /* 0888 */  0xA1, 0xEF, 0x2D, 0xA8, 0x98, 0x87, 0x0C, 0x0A,  // ..-.....
                /* 0890 */  0x62, 0x40, 0x1F, 0xBC, 0x81, 0x15, 0x81, 0x0F,  // b@......
                /* 0898 */  0xDE, 0x80, 0xE9, 0xD3, 0x2E, 0xAC, 0xFF, 0xFF,  // ........
                /* 08A0 */  0x51, 0x16, 0x30, 0xE2, 0xD0, 0xE2, 0x25, 0x10,  // Q.0...%.
                /* 08A8 */  0x6C, 0x97, 0x3E, 0x1F, 0x27, 0x70, 0xA1, 0x96,  // l.>.'p..
                /* 08B0 */  0xAA, 0xE3, 0x04, 0x3C, 0x73, 0x77, 0x51, 0x7A,  // ...<swQz
                /* 08B8 */  0x09, 0xE4, 0x01, 0x28, 0x24, 0xFF, 0x3E, 0x8A,  // ...($.>.
                /* 08C0 */  0x12, 0x0C, 0x47, 0x41, 0x3C, 0x36, 0x9F, 0xA8,  // ..GA<6..
                /* 08C8 */  0x81, 0xDB, 0x7D, 0x02, 0x7C, 0x27, 0x6A, 0x60,  // ..}.|'j`
                /* 08D0 */  0xF5, 0xFF, 0x3F, 0x37, 0x00, 0xBE, 0x2E, 0x77,  // ..?7...w
                /* 08D8 */  0x60, 0x4B, 0x7F, 0x6E, 0x40, 0x9F, 0xA4, 0x7D,  // `K.n@..}
                /* 08E0 */  0xB9, 0x83, 0x77, 0x6E, 0xB0, 0xEA, 0x13, 0x35,  // ..wn...5
                /* 08E8 */  0x4A, 0x2F, 0x85, 0x54, 0x9F, 0x1B, 0x50, 0x3A,  // J/.T..P:
                /* 08F0 */  0xCF, 0x0D, 0x14, 0xC4, 0x63, 0x73, 0x82, 0x43,  // ....cs.C
                /* 08F8 */  0x01, 0x7A, 0x94, 0x9E, 0xEF, 0x43, 0x40, 0x9D,  // .z...C@.
                /* 0900 */  0x87, 0x1A, 0x20, 0x7A, 0xEB, 0x01, 0x0E, 0xFF,  // .. z....
                /* 0908 */  0xFF, 0x19, 0xC1, 0x38, 0x33, 0x80, 0xEF, 0xD6,  // ...83...
                /* 0910 */  0x03, 0xD8, 0xBB, 0x4F, 0xF0, 0xEB, 0x06, 0xE0,  // ...O....
                /* 0918 */  0xC7, 0xA7, 0x49, 0xA7, 0xB7, 0x1E, 0x90, 0x45,  // ..I....E
                /* 0920 */  0xBA, 0x6E, 0xA0, 0x85, 0x5D, 0x37, 0xA0, 0xFD,  // .n..]7..
                /* 0928 */  0xFF, 0x6F, 0x3D, 0xBE, 0xD4, 0x59, 0xCA, 0x51,  // .o=..Y.Q
                /* 0930 */  0x1A, 0x25, 0xE2, 0x10, 0xED, 0x0B, 0x26, 0xEA,  // .%....&.
                /* 0938 */  0x6A, 0xC6, 0x41, 0x7C, 0xC1, 0xF3, 0xD9, 0xD4,  // j.A|....
                /* 0940 */  0xD7, 0x0D, 0x78, 0x97, 0x1E, 0xE0, 0x7F, 0x2F,  // ..x..../
                /* 0948 */  0x02, 0x1E, 0x37, 0x0E, 0xF0, 0xDD, 0x8B, 0x80,  // ..7.....
                /* 0950 */  0xDB, 0xC9, 0x02, 0xB8, 0xFD, 0xFF, 0x4F, 0x16,  // ......O.
                /* 0958 */  0x40, 0xE7, 0x5E, 0x04, 0xB2, 0xF8, 0x27, 0x0B,  // @.^...'.
                /* 0960 */  0x74, 0x88, 0x93, 0x05, 0xD4, 0x83, 0xD1, 0x13,  // t.......
                /* 0968 */  0x80, 0xEE, 0x45, 0x28, 0xC1, 0x14, 0x92, 0x7D,  // ..E(...}
                /* 0970 */  0x2F, 0x42, 0x09, 0x3D, 0x59, 0x50, 0x10, 0x8F,  // /B.=YP..
                /* 0978 */  0xCD, 0x11, 0x0E, 0x05, 0x68, 0x15, 0x20, 0x52,  // ....h. R
                /* 0980 */  0x38, 0x0F, 0x8D, 0xA1, 0xEB, 0x83, 0x11, 0x40,  // 8......@
                /* 0988 */  0x86, 0xFF, 0xFF, 0xC1, 0x08, 0xE0, 0x91, 0x4D,  // .......M
                /* 0990 */  0xAF, 0x22, 0x0F, 0x46, 0x20, 0x0B, 0x75, 0xDE,  // .".F .u.
                /* 0998 */  0x40, 0x4B, 0x3B, 0x6F, 0x40, 0x3D, 0x32, 0x5B,  // @K;o@=2[
                /* 09A0 */  0xCC, 0xC1, 0x08, 0x25, 0x03, 0x46, 0x27, 0x23,  // ...%.F'#
                /* 09A8 */  0x1F, 0x0A, 0x78, 0xEC, 0xF3, 0x06, 0x05, 0xF1,  // ..x.....
                /* 09B0 */  0xC1, 0xC8, 0x87, 0x02, 0x38, 0xE7, 0x0D, 0xCC,  // ....8...
                /* 09B8 */  0xA1, 0x00, 0xFB, 0xFF, 0x3F, 0x19, 0x01, 0x7C,  // ....?..|
                /* 09C0 */  0x3F, 0x5A, 0xE8, 0x64, 0x84, 0xFC, 0xFF, 0x1F,  // ?Z.d....
                /* 09C8 */  0x2D, 0xE0, 0x67, 0x39, 0x5A, 0xA0, 0x15, 0x1D,  // -.g9Z...
                /* 09D0 */  0x2D, 0x20, 0x4A, 0x13, 0xA0, 0xED, 0x68, 0xE3,  // - J...h.
                /* 09D8 */  0x93, 0x11, 0x2A, 0x3D, 0x89, 0xD2, 0x1F, 0x5F,  // ..*=..._
                /* 09E0 */  0x50, 0x79, 0x4F, 0x07, 0x14, 0xC4, 0x80, 0x0E,  // PyO.....
                /* 09E8 */  0x33, 0x44, 0x14, 0xA4, 0x07, 0xE2, 0xF9, 0x9E,  // 3D......
                /* 09F0 */  0xCE, 0x31, 0xBC, 0x38, 0x60, 0xA6, 0x5B, 0x39,  // .1.8`.[9
                /* 09F8 */  0x82, 0x26, 0xD3, 0x3C, 0x9C, 0xE6, 0xF2, 0x76,  // .&.<...v
                /* 0A00 */  0x04, 0x5E, 0x5D, 0xD7, 0x02, 0xE8, 0xA7, 0x80,  // .^].....
                /* 0A08 */  0xA3, 0x3D, 0x93, 0x43, 0xB0, 0xE7, 0xCB, 0x0F,  // .=.C....
                /* 0A10 */  0x10, 0x89, 0x3F, 0x5D, 0x54, 0xE0, 0xE9, 0x52,  // ..?]T..R
                /* 0A18 */  0x10, 0x4F, 0x17, 0x8E, 0x94, 0x2B, 0x05, 0x6A,  // .O...+.j
                /* 0A20 */  0xB2, 0xB8, 0x5B, 0xC1, 0xC3, 0x3A, 0xD8, 0xAF,  // ..[..:..
                /* 0A28 */  0x89, 0x1E, 0x2E, 0xEC, 0xFF, 0xFF, 0x70, 0x71,  // ......pq
                /* 0A30 */  0xD7, 0x37, 0xE0, 0xAE, 0x54, 0xE1, 0xAD, 0x02,  // .7..T...
                /* 0A38 */  0x5C, 0xB1, 0xD6, 0xA9, 0x5B, 0x05, 0x4E, 0xDC,  // \...[.N.
                /* 0A40 */  0x69, 0x1D, 0xE2, 0xAD, 0xA2, 0x37, 0x48, 0x9F,  // i....7H.
                /* 0A48 */  0xD6, 0x51, 0x42, 0x28, 0x24, 0xE3, 0xFA, 0x86,  // .QB($...
                /* 0A50 */  0xBA, 0x66, 0x19, 0xCC, 0x20, 0x1E, 0x9D, 0x43,  // .f.. ..C
                /* 0A58 */  0x9D, 0x0B, 0xD0, 0x92, 0x6E, 0x15, 0x50, 0xCE,  // ....n.P.
                /* 0A60 */  0x06, 0xE0, 0xBA, 0x05, 0x81, 0xE7, 0x6C, 0x00,  // ......l.
                /* 0A68 */  0xAC, 0xFF, 0xFF, 0x67, 0x03, 0x70, 0x7A, 0x3D,  // ...g.pz=
                /* 0A70 */  0x1B, 0x80, 0x2C, 0xCC, 0x05, 0x06, 0x2D, 0xE9,  // ..,...-.
                /* 0A78 */  0xAA, 0x05, 0xD5, 0xD9, 0x7D, 0x96, 0x5E, 0x60,  // ....}.^`
                /* 0A80 */  0x78, 0x7C, 0x12, 0x1D, 0x41, 0xE0, 0xA6, 0x39,  // x|..A..9
                /* 0A88 */  0x1B, 0xA0, 0xF5, 0x5C, 0xB5, 0x50, 0x27, 0x18,  // ...\.P'.
                /* 0A90 */  0x80, 0x25, 0xFF, 0xFF, 0x13, 0x0C, 0x60, 0xD2,  // .%....`.
                /* 0A98 */  0xE6, 0x83, 0xF0, 0xB1, 0x02, 0x64, 0xC1, 0x4E,  // .....d.N
                /* 0AA0 */  0x30, 0x68, 0x79, 0x27, 0x18, 0x88, 0xC7, 0x8A,  // 0hy'....
                /* 0AA8 */  0x37, 0x98, 0x04, 0x05, 0x9D, 0x60, 0x50, 0x52,  // 7....`PR
                /* 0AB0 */  0x28, 0x74, 0x84, 0xF1, 0xB9, 0x80, 0x47, 0x07,  // (t....G.
                /* 0AB8 */  0xA3, 0x20, 0x1E, 0x9D, 0x63, 0x9D, 0x0B, 0xD0,  // . ..c...
                /* 0AC0 */  0xA2, 0x8E, 0x15, 0x90, 0xEE, 0x06, 0x70, 0x8E,  // ......p.
                /* 0AC8 */  0x30, 0xC0, 0xF7, 0xFF, 0x7F, 0x38, 0x00, 0xEE,  // 0....8..
                /* 0AD0 */  0x47, 0x18, 0x60, 0x66, 0xED, 0x08, 0x03, 0x10,  // G.`f....
                /* 0AD8 */  0xE5, 0xFF, 0x7F, 0x84, 0x01, 0x18, 0xE1, 0xD0,  // ........
                /* 0AE0 */  0xE2, 0x11, 0x06, 0x98, 0x5D, 0x3C, 0x7D, 0x84,  // ....]<}.
                /* 0AE8 */  0x01, 0x6C, 0xFC, 0xFF, 0x8F, 0x30, 0x80, 0xC1,  // .l...0..
                /* 0AF0 */  0xC3, 0xC1, 0x23, 0x0C, 0xD8, 0xE2, 0x1C, 0x0E,  // ..#.....
                /* 0AF8 */  0xD0, 0xA2, 0x80, 0xE4, 0x71, 0x16, 0x64, 0x4C,  // ....q.dL
                /* 0B00 */  0xA7, 0x1F, 0x3B, 0x48, 0xAD, 0x27, 0x00, 0xC1,  // ..;H.'..
                /* 0B08 */  0xBF, 0x1C, 0x84, 0x6A, 0xEC, 0x2E, 0xEE, 0xC3,  // ...j....
                /* 0B10 */  0x01, 0x8A, 0xC2, 0x67, 0x10, 0xF8, 0x4E, 0xCE,  // ...g..N.
                /* 0B18 */  0x20, 0xE8, 0x59, 0xC0, 0x38, 0x83, 0x80, 0xFD,  //  .Y.8...
                /* 0B20 */  0x5C, 0x00, 0x8E, 0xAB, 0x34, 0x3F, 0x04, 0x3E,  // \...4?.>
                /* 0B28 */  0xBF, 0xFB, 0x5C, 0x00, 0xF7, 0xFF, 0x7F, 0x2E,  // ..\.....
                /* 0B30 */  0x00, 0x76, 0x16, 0xCD, 0x0A, 0xF5, 0x79, 0x2E,  // .v....y.
                /* 0B38 */  0x00, 0x5E, 0xD3, 0xF4, 0xB9, 0x00, 0xA0, 0x8F,  // .^......
                /* 0B40 */  0x54, 0xD8, 0xFF, 0xFF, 0x73, 0x01, 0xB0, 0x3A,  // T...s..:
                /* 0B48 */  0xA2, 0xFA, 0x5C, 0x00, 0xD0, 0xC7, 0xE2, 0xB9,  // ..\.....
                /* 0B50 */  0x00, 0x78, 0x9D, 0x31, 0x7D, 0x2E, 0xC0, 0xFC,  // .x.1}...
                /* 0B58 */  0xFF, 0xCF, 0x05, 0x00, 0x69, 0xB4, 0x9E, 0x0B,  // ....i...
                /* 0B60 */  0x80, 0xC5, 0xD0, 0x1E, 0xDD, 0x7C, 0x32, 0xF0,  // .....|2.
                /* 0B68 */  0xF1, 0xCC, 0x13, 0x09, 0x91, 0xC0, 0xE7, 0x02,  // ........
                /* 0B70 */  0x60, 0x30, 0x07, 0x3E, 0xE5, 0xB3, 0xF3, 0xB9,  // `0.>....
                /* 0B78 */  0x00, 0xF6, 0xFF, 0xFF, 0x5C, 0x00, 0xD8, 0x54,  // ....\..T
                /* 0B80 */  0xAA, 0xD4, 0xA2, 0xCC, 0x73, 0x01, 0xB8, 0xA4,  // ....s...
                /* 0B88 */  0x9D, 0x62, 0xD1, 0x01, 0xCF, 0x05, 0x88, 0x9B,  // .b......
                /* 0B90 */  0xE0, 0x59, 0x44, 0x08, 0xD2, 0xE7, 0x11, 0x40,  // .YD....@
                /* 0B98 */  0x27, 0x00, 0x9F, 0x0B, 0x58, 0xA4, 0x73, 0x01,  // '...X.s.
                /* 0BA0 */  0x2A, 0x0C, 0x85, 0xA2, 0x9C, 0x0F, 0x51, 0xE2,  // *.....Q.
                /* 0BA8 */  0xE1, 0x28, 0x88, 0xC7, 0xE6, 0x73, 0x01, 0xE0,  // .(...s..
                /* 0BB0 */  0xE5, 0xB0, 0x8A, 0xFD, 0xFF, 0x0F, 0x8B, 0xCD,  // ........
                /* 0BB8 */  0x15, 0xCE, 0x61, 0x15, 0xF0, 0x2C, 0xD1, 0xA7,  // ..a..,..
                /* 0BC0 */  0x42, 0x8F, 0xA7, 0x07, 0x70, 0xE5, 0x38, 0x3D,  // B...p.8=
                /* 0BC8 */  0xA0, 0xD5, 0x00, 0x69, 0x42, 0x4F, 0x0F, 0x30,  // ...iBO.0
                /* 0BD0 */  0xF3, 0x1F, 0x1B, 0xE8, 0xA8, 0x9C, 0x9C, 0x44,  // .......D
                /* 0BD8 */  0xC9, 0x0F, 0x29, 0xA8, 0xAC, 0x63, 0xA7, 0x20,  // ..)..c. 
                /* 0BE0 */  0x06, 0x74, 0x90, 0x73, 0x01, 0x68, 0xEE, 0xD3,  // .t.s.h..
                /* 0BE8 */  0xC0, 0xE4, 0xFF, 0x7F, 0x9F, 0x06, 0x1C, 0xDC,  // ........
                /* 0BF0 */  0x3C, 0x80, 0xDF, 0x9D, 0x02, 0x1C, 0x17, 0x1C,  // <.......
                /* 0BF8 */  0xC0, 0xC3, 0x9D, 0x42, 0x4E, 0x2F, 0x38, 0x20,  // ...BN/8 
                /* 0C00 */  0x5B, 0x85, 0xEE, 0x14, 0x5C, 0xD2, 0x05, 0xC7,  // [...\...
                /* 0C08 */  0x6B, 0xD1, 0x05, 0x07, 0x7F, 0x35, 0xF3, 0x9D,  // k....5..
                /* 0C10 */  0xDA, 0xE8, 0x75, 0x5E, 0xA6, 0x34, 0x02, 0xDF,  // ..u^.4..
                /* 0C18 */  0xAA, 0x74, 0xEF, 0xA7, 0xFF, 0xFF, 0xDB, 0x04,  // .t......
                /* 0C20 */  0xA1, 0x50, 0xEC, 0x93, 0x01, 0x2A, 0xE8, 0xE8,  // .P...*..
                /* 0C28 */  0x29, 0x88, 0x01, 0x9D, 0x02, 0x42, 0x4A, 0x4E,  // )....BJN
                /* 0C30 */  0x06, 0x28, 0x1D, 0x20, 0x12, 0x79, 0xA3, 0x26,  // .(. .y.&
                /* 0C38 */  0x33, 0x3A, 0x2B, 0x1F, 0x2A, 0x80, 0xDB, 0xB1,  // 3:+.*...
                /* 0C40 */  0x80, 0x5F, 0x89, 0x9F, 0xBF, 0x7D, 0xA8, 0x00,  // ._...}..
                /* 0C48 */  0x16, 0x81, 0x6E, 0x47, 0xA8, 0x08, 0xF7, 0x12,  // ..nG....
                /* 0C50 */  0x0A, 0xE2, 0xDB, 0x11, 0xF0, 0x3C, 0x54, 0x80,  // .....<T.
                /* 0C58 */  0x33, 0xD2, 0xB5, 0x05, 0xFD, 0x59, 0xF0, 0x45,  // 3....Y.E
                /* 0C60 */  0x01, 0xF6, 0xC8, 0xC0, 0xF2, 0xFF, 0x1F, 0x19,  // ........
                /* 0C68 */  0xBC, 0xE3, 0x82, 0x2F, 0x48, 0x80, 0x27, 0x9D,  // .../H.'.
                /* 0C70 */  0x17, 0x24, 0xD0, 0x69, 0x3B, 0x7D, 0xA0, 0x13,  // .$.i;}..
                /* 0C78 */  0x5E, 0x90, 0x10, 0xA3, 0x0A, 0x79, 0x24, 0x06,  // ^....y$.
                /* 0C80 */  0x3E, 0xB2, 0xE7, 0x42, 0x23, 0xF4, 0x7E, 0x5C,  // >..B#.~\
                /* 0C88 */  0x20, 0xE8, 0x26, 0x98, 0xE7, 0xF4, 0x81, 0x4A,  //  .&....J
                /* 0C90 */  0x42, 0xA1, 0x24, 0x47, 0x08, 0x94, 0xF6, 0x23,  // B.$G...#
                /* 0C98 */  0x04, 0x05, 0xF1, 0xE8, 0x1C, 0xE7, 0x70, 0x00,  // ......p.
                /* 0CA0 */  0x65, 0xC8, 0x8F, 0x03, 0xAF, 0x10, 0x1E, 0x14,  // e.......
                /* 0CA8 */  0x9B, 0x08, 0x8C, 0x5B, 0x12, 0xF0, 0x8C, 0x82,  // ...[....
                /* 0CB0 */  0x8B, 0xFA, 0xFF, 0x8F, 0xCB, 0x83, 0xF1, 0xF1,  // ........
                /* 0CB8 */  0xE1, 0xAC, 0x4E, 0xE9, 0xA8, 0x80, 0xC7, 0x94,  // ..N.....
                /* 0CC0 */  0x7D, 0x95, 0x02, 0x9C, 0xDF, 0x3E, 0xC0, 0x71,  // }....>.q
                /* 0CC8 */  0x95, 0x02, 0x3C, 0x78, 0x15, 0x6A, 0xF0, 0x2A,  // ..<x.j.*
                /* 0CD0 */  0xA5, 0xFF, 0xFF, 0xED, 0x03, 0x4C, 0xCA, 0x6E,  // .....L.n
                /* 0CD8 */  0x1F, 0x28, 0x0E, 0xE7, 0xBB, 0x7D, 0x20, 0xAC,  // .(...} .
                /* 0CE0 */  0x5E, 0x1E, 0x74, 0xAC, 0xF3, 0xFD, 0x01, 0xC6,  // ^.t.....
                /* 0CE8 */  0xE5, 0x03, 0x60, 0xE8, 0xFF, 0xFF, 0xF2, 0x01,  // ..`.....
                /* 0CF0 */  0xB0, 0xC5, 0xEA, 0xE5, 0x03, 0x64, 0x02, 0x2F,  // .....d./
                /* 0CF8 */  0x1F, 0xA8, 0x91, 0x3A, 0xE6, 0xB9, 0x10, 0x31,  // ...:...1
                /* 0D00 */  0xB4, 0x18, 0x4F, 0x08, 0xAF, 0x0F, 0x1D, 0x0B,  // ..O.....
                /* 0D08 */  0x30, 0x7F, 0x34, 0x04, 0xFA, 0xFF, 0xFF, 0xA3,  // 0.4.....
                /* 0D10 */  0x21, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0x04, 0xB8,  // !.......
                /* 0D18 */  0x8A, 0x3D, 0x80, 0x80, 0x4E, 0xD8, 0xD1, 0x10,  // .=..N...
                /* 0D20 */  0x1D, 0x6F, 0x2D, 0x02, 0x7E, 0x16, 0x7A, 0xFF,  // .o-.~.z.
                /* 0D28 */  0x80, 0x73, 0x0C, 0x79, 0x5D, 0xF0, 0xE0, 0x9F,  // .s.y]...
                /* 0D30 */  0x01, 0x1C, 0xE6, 0xF4, 0x81, 0x8A, 0x71, 0xFA,  // ......q.
                /* 0D38 */  0x00, 0x74, 0xC7, 0x39, 0x7D, 0xA0, 0x02, 0x9C,  // .t.9}...
                /* 0D40 */  0x3E, 0x28, 0x88, 0x4F, 0x1F, 0xF0, 0xFE, 0xFF,  // >(.O....
                /* 0D48 */  0xA7, 0x0F, 0xC0, 0x41, 0xA0, 0xA1, 0xA0, 0x86,  // ...A....
                /* 0D50 */  0xE5, 0x71, 0xF8, 0xA8, 0x80, 0x3F, 0x28, 0xE0,  // .q...?(.
                /* 0D58 */  0x0E, 0x1F, 0xC0, 0x4F, 0xF1, 0x29, 0x82, 0xDC,  // ...O.)..
                /* 0D60 */  0x17, 0x7C, 0x64, 0xF0, 0xE1, 0x03, 0x98, 0x9B,  // .|d.....
                /* 0D68 */  0x3D, 0x7C, 0x80, 0x4E, 0xDC, 0xE1, 0x03, 0x25,  // =|.N...%
                /* 0D70 */  0x0A, 0x42, 0x11, 0x0F, 0x53, 0xD0, 0x0F, 0x77,  // .B..S..w
                /* 0D78 */  0xFE, 0xFF, 0x1F, 0x0F, 0x7D, 0x7C, 0x20, 0x47,  // ....}| G
                /* 0D80 */  0x29, 0x80, 0xC2, 0x37, 0x05, 0xF8, 0x23, 0x83,  // )..7..#.
                /* 0D88 */  0xF3, 0xFF, 0x3F, 0x4A, 0x01, 0x4E, 0x05, 0x1F,  // ..?J.N..
                /* 0D90 */  0xA5, 0x40, 0x7D, 0xFC, 0xF0, 0x51, 0xCA, 0xD7,  // .@}..Q..
                /* 0D98 */  0x5C, 0x76, 0xFC, 0x00, 0x43, 0x94, 0xE3, 0x07,  // \v..C...
                /* 0DA0 */  0x2A, 0x04, 0x85, 0x42, 0x9C, 0x21, 0x50, 0xB2,  // *..B.!P.
                /* 0DA8 */  0xCF, 0x10, 0x14, 0xC4, 0xC3, 0xF3, 0xF1, 0x03,  // ........
                /* 0DB0 */  0x30, 0x71, 0x16, 0xC6, 0xFC, 0xFF, 0xEF, 0x0F,  // 0q......
                /* 0DB8 */  0x60, 0x3A, 0xE6, 0x02, 0xAC, 0xFE, 0xFF, 0x9F,  // `:......
                /* 0DC0 */  0x38, 0x6C, 0xF8, 0xF0, 0x01, 0xBA, 0x50, 0xEB,  // 8l....P.
                /* 0DC8 */  0xD0, 0xE1, 0x03, 0x27, 0xED, 0xF0, 0x81, 0x38,  // ...'...8
                /* 0DD0 */  0x3E, 0xC0, 0x40, 0x7A, 0x3E, 0xC3, 0xCA, 0x38,  // >.@z>..8
                /* 0DD8 */  0x7C, 0xA0, 0x28, 0xC8, 0xE1, 0x03, 0x15, 0xF9,  // |.(.....
                /* 0DE0 */  0x68, 0x40, 0x41, 0xCC, 0xE6, 0x3C, 0x37, 0x0B,  // h@A..<7.
                /* 0DE8 */  0xB4, 0xA2, 0x33, 0x28, 0x72, 0x22, 0xF0, 0x4E,  // ..3(r".N
                /* 0DF0 */  0xED, 0xC0, 0xF3, 0x68, 0x01, 0x58, 0xFC, 0xFF,  // ...h.X..
                /* 0DF8 */  0x9F, 0xA7, 0xC0, 0x79, 0xB4, 0x00, 0xDE, 0x1E,  // ...y....
                /* 0E00 */  0x7D, 0x2A, 0x3C, 0x5A, 0x80, 0xEC, 0xCC, 0xE9,  // }*<Z....
                /* 0E08 */  0xA3, 0x05, 0x1F, 0xB0, 0x45, 0x01, 0x69, 0x62,  // ....E.ib
                /* 0E10 */  0x07, 0xF1, 0xA4, 0x13, 0xF1, 0x7C, 0x83, 0xD6,  // .....|..
                /* 0E18 */  0x8C, 0xA2, 0x71, 0x86, 0x0F, 0xFD, 0x2C, 0x99,  // ..q...,.
                /* 0E20 */  0xC0, 0x32, 0x0E, 0x47, 0x14, 0xC2, 0x14, 0x3E,  // .2.G...>
                /* 0E28 */  0x17, 0x00, 0xFF, 0xE3, 0x3B, 0x3F, 0x17, 0x00,  // ....;?..
                /* 0E30 */  0xB7, 0xFF, 0xFF, 0xB9, 0x00, 0x78, 0x48, 0xD5,  // .....xH.
                /* 0E38 */  0x28, 0x51, 0xE6, 0xB9, 0x00, 0x5C, 0x19, 0x4E,  // (Q...\.N
                /* 0E40 */  0x30, 0x28, 0x58, 0x2B, 0x39, 0xC1, 0x20, 0x34,  // 0(X+9. 4
                /* 0E48 */  0xDE, 0x0A, 0x74, 0x28, 0x78, 0x86, 0xC1, 0x10,  // ..t(x...
                /* 0E50 */  0x4C, 0x7F, 0x2C, 0xA0, 0x83, 0x72, 0x6E, 0x12,  // L.,..rn.
                /* 0E58 */  0xE5, 0x3E, 0x16, 0xA0, 0x92, 0x1E, 0x0B, 0x28,  // .>.....(
                /* 0E60 */  0x88, 0x0F, 0xCB, 0x04, 0x42, 0x46, 0x8E, 0x05,  // ....BF..
                /* 0E68 */  0xA8, 0xC3, 0x98, 0x87, 0xC1, 0xB4, 0x0E, 0x43,  // .......C
                /* 0E70 */  0x63, 0x3A, 0xF8, 0xB7, 0x02, 0x5F, 0x17, 0x9E,  // c:..._..
                /* 0E78 */  0x5C, 0xC0, 0x3B, 0x52, 0x1F, 0x0A, 0xC0, 0x21,  // \.;R...!
                /* 0E80 */  0xEE, 0xE2, 0x02, 0x68, 0xFA, 0xFF, 0x5F, 0x5C,  // ...h.._\
                /* 0E88 */  0x00, 0x9B, 0x0A, 0x7F, 0x14, 0x2F, 0x2E, 0x20,  // ...../. 
                /* 0E90 */  0x13, 0x74, 0x91, 0x47, 0xC7, 0xBA, 0x51, 0x20,  // .t.G..Q 
                /* 0E98 */  0x0E, 0x52, 0xA1, 0x63, 0x1C, 0xC9, 0x71, 0x44,  // .R.c..qD
                /* 0EA0 */  0x7E, 0x76, 0xC1, 0x12, 0xF8, 0xAA, 0xE8, 0x4B,  // ~v.....K
                /* 0EA8 */  0x05, 0x97, 0x4F, 0x21, 0xF9, 0x37, 0x2C, 0x94,  // ..O!.7,.
                /* 0EB0 */  0xE0, 0xBB, 0x05, 0x05, 0xF1, 0xE8, 0x9C, 0xE4,  // ........
                /* 0EB8 */  0x86, 0x85, 0xD6, 0x02, 0xA2, 0x79, 0xE0, 0x74,  // .....y.t
                /* 0EC0 */  0x4E, 0x43, 0xD3, 0xF2, 0xF5, 0x0A, 0x98, 0x86,  // NC......
                /* 0EC8 */  0xB8, 0x3D, 0xA0, 0xFE, 0xFF, 0x93, 0xB2, 0x0C,  // .=......
                /* 0ED0 */  0x10, 0xDD, 0x3B, 0x70, 0x57, 0x45, 0x60, 0x76,  // ..;pWE`v
                /* 0ED8 */  0x74, 0xC0, 0x5E, 0x15, 0x01, 0xC6, 0xDD, 0x8C,  // t.^.....
                /* 0EE0 */  0x74, 0xF0, 0x40, 0xFF, 0xFF, 0xAF, 0x8A, 0xD0,  // t.@.....
                /* 0EE8 */  0x2F, 0x60, 0xA8, 0xAB, 0x22, 0x01, 0xD2, 0xCD,  // /`.."...
                /* 0EF0 */  0x08, 0x73, 0x75, 0x0D, 0xF2, 0x08, 0xE0, 0x03,  // .su.....
                /* 0EF8 */  0xE1, 0x71, 0x85, 0x7A, 0x3A, 0xF2, 0x64, 0x5E,  // .q.z:.d^
                /* 0F00 */  0x02, 0xF8, 0x1D, 0x0C, 0x60, 0x8F, 0xCD, 0x23,  // ....`..#
                /* 0F08 */  0x0E, 0x10, 0x39, 0xDF, 0x58, 0xFB, 0x48, 0x74,  // ..9.X.Ht
                /* 0F10 */  0x36, 0x08, 0xF2, 0x08, 0x60, 0x70, 0xDF, 0x02,  // 6...`p..
                /* 0F18 */  0x3C, 0x84, 0x47, 0x1C, 0xF6, 0xFF, 0x3F, 0xE2,  // <.G...?.
                /* 0F20 */  0x80, 0x7D, 0x1E, 0xB8, 0x23, 0x0E, 0xC0, 0xDA,  // .}..#...
                /* 0F28 */  0xFF, 0xFF, 0x11, 0x07, 0xB0, 0x26, 0x53, 0xAA,  // .....&S.
                /* 0F30 */  0x43, 0x89, 0x07, 0x0F, 0x70, 0x85, 0x95, 0x70,  // C...p..p
                /* 0F38 */  0x65, 0xC5, 0x4A, 0x06, 0xD2, 0xE9, 0xF9, 0x11,  // e.J.....
                /* 0F40 */  0x87, 0xC3, 0x1E, 0xD8, 0x4B, 0x87, 0x8F, 0x18,  // ....K...
                /* 0F48 */  0x3E, 0xE3, 0x24, 0xB0, 0x48, 0x40, 0x1D, 0x3B,  // >.$.H@.;
                /* 0F50 */  0xB8, 0x3C, 0x18, 0xC5, 0x3E, 0x17, 0xA0, 0x82,  // .<..>...
                /* 0F58 */  0x9E, 0x0B, 0x28, 0x88, 0x01, 0x9D, 0xE2, 0x32,  // ..(....2
                /* 0F60 */  0x89, 0x1E, 0xB2, 0x67, 0xC1, 0xA6, 0x7A, 0x0E,  // ...g..z.
                /* 0F68 */  0x27, 0xF5, 0x30, 0x09, 0xD8, 0xF9, 0xFF, 0x1F,  // '.0.....
                /* 0F70 */  0x29, 0x60, 0xC8, 0x5C, 0x92, 0xC6, 0xCA, 0x85,  // )`.\....
                /* 0F78 */  0xC1, 0xE8, 0xC0, 0x48, 0x40, 0x34, 0x2C, 0x1F,  // ...H@4,.
                /* 0F80 */  0x26, 0x01, 0x2F, 0x41, 0xCE, 0x35, 0xE8, 0x2B,  // &./A.5.+
                /* 0F88 */  0x8B, 0xCF, 0x54, 0xB8, 0x63, 0x07, 0xF0, 0x3B,  // ..T.c..;
                /* 0F90 */  0xD6, 0x60, 0x87, 0x0E, 0xEB, 0x3A, 0x6D, 0xEF,  // .`...:m.
                /* 0F98 */  0x18, 0xC2, 0x7C, 0xCA, 0xF0, 0x11, 0x92, 0x0D,  // ..|.....
                /* 0FA0 */  0x0B, 0xDC, 0x50, 0x1E, 0x3A, 0xF8, 0xA2, 0x0C,  // ..P.:...
                /* 0FA8 */  0x1D, 0x0D, 0xFD, 0xFF, 0x4F, 0x10, 0xF5, 0xFD,  // ....O...
                /* 0FB0 */  0xC0, 0x17, 0x8B, 0xA8, 0xCF, 0x1F, 0x1E, 0x15,  // ........
                /* 0FB8 */  0xD8, 0xBF, 0x1E, 0x1A, 0x3B, 0x08, 0x47, 0x05,  // ....;.G.
                /* 0FC0 */  0x07, 0xF2, 0x5C, 0x8C, 0xF9, 0x18, 0xE5, 0xA1,  // ..\.....
                /* 0FC8 */  0x83, 0xDF, 0xC2, 0xA8, 0x40, 0x79, 0xCC, 0x01,  // ....@y..
                /* 0FD0 */  0xDE, 0x3A, 0x0D, 0x6A, 0xF4, 0x78, 0xCC, 0x01,  // .:.j.x..
                /* 0FD8 */  0x57, 0xB2, 0x63, 0x0E, 0x5A, 0x1F, 0x90, 0x0E,  // W.c.Z...
                /* 0FE0 */  0x86, 0x98, 0x63, 0x0E, 0x0C, 0x45, 0xC7, 0x1C,  // ..c..E..
                /* 0FE8 */  0x94, 0x16, 0x18, 0x69, 0x71, 0xF0, 0xFF, 0x3F,  // ...iq..?
                /* 0FF0 */  0xAB, 0x60, 0xD2, 0x9F, 0xD9, 0x28, 0x88, 0xCF,  // .`...(..
                /* 0FF8 */  0x2A, 0x3E, 0xE6, 0x00, 0x26, 0x32, 0x5C, 0x1C,  // *>..&2\.
                /* 1000 */  0xD0, 0x2A, 0xEE, 0x29, 0xC8, 0x9B, 0x1A, 0x30,  // .*.)...0
                /* 1008 */  0xBB, 0x35, 0x60, 0x73, 0x9C, 0x52, 0xD0, 0xD7,  // .5`s.R..
                /* 1010 */  0x78, 0x9F, 0x52, 0x60, 0xCC, 0x09, 0xAC, 0x87,  // x.R`....
                /* 1018 */  0x02, 0x9F, 0xE6, 0xC0, 0x76, 0xD4, 0xF7, 0x15,  // ....v...
                /* 1020 */  0x05, 0xFE, 0x98, 0xC0, 0xF1, 0xFF, 0x1F, 0x13,  // ........
                /* 1028 */  0x0C, 0x24, 0x4F, 0x1B, 0x6C, 0x57, 0x07, 0x8F,  // .$O.lW..
                /* 1030 */  0x09, 0xA7, 0xE3, 0x82, 0x02, 0x61, 0x4A, 0x60,  // .....aJ`
                /* 1038 */  0xBD, 0xC3, 0x78, 0x4A, 0x60, 0xBB, 0x12, 0x02,  // ..xJ`...
                /* 1040 */  0x16, 0x2F, 0x37, 0xE0, 0xB8, 0x12, 0x02, 0x8F,  // ./7.....
                /* 1048 */  0xFF, 0xFF, 0xE5, 0x06, 0x28, 0x5C, 0x09, 0x41,  // ....(\.A
                /* 1050 */  0xA6, 0xFF, 0x9F, 0xA0, 0xAB, 0x2D, 0x4E, 0x05,  // .....-N.
                /* 1058 */  0x90, 0xAE, 0x84, 0x6C, 0x1C, 0xCF, 0x31, 0x1E,  // ...l..1.
                /* 1060 */  0xE6, 0x03, 0xAA, 0x8F, 0x32, 0x6C, 0x7C, 0x2F,  // ....2l|/
                /* 1068 */  0x10, 0x3E, 0xC8, 0x3E, 0x04, 0x38, 0xF3, 0xAA,  // .>.>.8..
                /* 1070 */  0x75, 0xBD, 0xE1, 0x69, 0x61, 0xA4, 0xFC, 0x6A,  // u..ia..j
                /* 1078 */  0x8B, 0xD2, 0x7A, 0xB5, 0xA5, 0x20, 0x1E, 0x9D,  // ..z.. ..
                /* 1080 */  0xAF, 0x37, 0x00, 0x1F, 0x6E, 0x1D, 0x70, 0xFF,  // .7..n.p.
                /* 1088 */  0xFF, 0xB7, 0x0E, 0x30, 0x9D, 0x3E, 0x7D, 0x19,  // ...0.>}.
                /* 1090 */  0xE0, 0x07, 0x4F, 0x0E, 0x62, 0x40, 0x1F, 0x6C,  // ..O.b@.l
                /* 1098 */  0x01, 0x2F, 0xC7, 0x46, 0x5F, 0x19, 0xF0, 0xA7,  // ./.F_...
                /* 10A0 */  0x23, 0x76, 0xB9, 0xF7, 0xCD, 0xC2, 0x04, 0xAF,  // #v......
                /* 10A8 */  0xDC, 0x3E, 0x11, 0x82, 0xFB, 0xD0, 0x00, 0xAE,  // .>......
                /* 10B0 */  0x41, 0xC1, 0x1C, 0xC4, 0xB9, 0xF8, 0x66, 0xE6,  // A.....f.
                /* 10B8 */  0x41, 0x81, 0xFB, 0xF2, 0xE3, 0x41, 0x81, 0xED,  // A....A..
                /* 10C0 */  0xFF, 0x3F, 0x28, 0x18, 0xB0, 0x01, 0xDF, 0x0D,  // .?(.....
                /* 10C8 */  0x0E, 0x1C, 0x58, 0x5C, 0x71, 0x3C, 0x28, 0x60,  // ..X\q<(`
                /* 10D0 */  0x31, 0x70, 0x60, 0x71, 0x03, 0xF1, 0xA0, 0xC0,  // 1p`q....
                /* 10D8 */  0x75, 0xAE, 0xF4, 0xA0, 0x70, 0xC7, 0x0C, 0x8B,  // u...p...
                /* 10E0 */  0x04, 0xD4, 0x2D, 0xE4, 0xF9, 0xE4, 0xC4, 0x31,  // ..-....1
                /* 10E8 */  0xA3, 0x02, 0xBB, 0x87, 0x51, 0x01, 0x95, 0x99,  // ....Q...
                /* 10F0 */  0x63, 0x46, 0x05, 0x9E, 0xFF, 0xFF, 0xA8, 0x60,  // cF.....`
                /* 10F8 */  0xC1, 0x78, 0x54, 0xE0, 0xBA, 0x4F, 0x01, 0x6F,  // .xT..O.o
                /* 1100 */  0xAD, 0x0E, 0x0F, 0x9F, 0x60, 0xD3, 0x7A, 0x9F,  // ....`.z.
                /* 1108 */  0x42, 0x27, 0x7E, 0x58, 0xE8, 0xF0, 0xC9, 0xEE,  // B'~X....
                /* 1110 */  0x53, 0xB0, 0xF3, 0xDD, 0xA7, 0x50, 0xC9, 0x60,  // S....P.`
                /* 1118 */  0x74, 0x1C, 0xF5, 0x99, 0x87, 0x67, 0x39, 0xF3,  // t....g9.
                /* 1120 */  0x50, 0x10, 0x9B, 0xB8, 0x4F, 0x01, 0xC2, 0xFE,  // P...O...
                /* 1128 */  0xFF, 0xF7, 0x29, 0x60, 0x38, 0x68, 0x38, 0x27,  // ..)`8h8'
                /* 1130 */  0x22, 0xFC, 0xA0, 0xC1, 0x7A, 0x75, 0xE0, 0x83,  // "...zu..
                /* 1138 */  0x06, 0xCF, 0x94, 0x60, 0x1E, 0x3F, 0x30, 0x53,  // ...`.?0S
                /* 1140 */  0x02, 0xEB, 0x91, 0x09, 0x7C, 0x53, 0x82, 0x73,  // ....|S.s
                /* 1148 */  0x1C, 0xC2, 0x4F, 0x09, 0xAC, 0x17, 0x26, 0xF0,  // ..O...&.
                /* 1150 */  0xFD, 0xFF, 0xA7, 0x04, 0x73, 0xD4, 0xE0, 0x3F,  // ....s..?
                /* 1158 */  0x2F, 0x81, 0xEF, 0x92, 0xEB, 0x29, 0xE1, 0x0E,  // /....)..
                /* 1160 */  0xC2, 0x3E, 0x0B, 0xC1, 0x18, 0x13, 0x58, 0x8F,  // .>....X.
                /* 1168 */  0x4B, 0xE0, 0x1B, 0x13, 0xDC, 0x61, 0x83, 0xFF,  // K....a..
                /* 1170 */  0xB0, 0x04, 0xBE, 0x53, 0x2E, 0xB0, 0xFB, 0xFF,  // ...S....
                /* 1178 */  0x9F, 0x72, 0x81, 0x27, 0x8C, 0x4F, 0xB9, 0x80,  // .r.'.O..
                /* 1180 */  0xA7, 0x5B, 0x94, 0x4E, 0xB9, 0x20, 0x4B, 0xB3,  // .[.N. K.
                /* 1188 */  0x0E, 0xDD, 0xA2, 0xF8, 0x80, 0xAD, 0x09, 0x48,  // .......H
                /* 1190 */  0x23, 0x3B, 0x89, 0x88, 0xEF, 0xDB, 0x5D, 0xCF,  // #;....].
                /* 1198 */  0x4B, 0xE7, 0xA5, 0xCE, 0x11, 0x74, 0x93, 0x79,  // K....t.y
                /* 11A0 */  0x07, 0x30, 0xB4, 0x55, 0x00, 0xEA, 0x0E, 0xC5,  // .0.U....
                /* 11A8 */  0xF3, 0x93, 0x28, 0xFF, 0xB9, 0x00, 0x95, 0xF8,  // ..(.....
                /* 11B0 */  0x5C, 0x40, 0x41, 0x0C, 0xE8, 0x38, 0x27, 0x24,  // \@A..8'$
                /* 11B8 */  0xF4, 0x4E, 0x7C, 0xAD, 0x62, 0x08, 0x87, 0xC4,  // .N|.b...
                /* 11C0 */  0x06, 0x02, 0xE3, 0x9A, 0x04, 0xAE, 0xFF, 0xFF,  // ........
                /* 11C8 */  0x3D, 0x0A, 0x7B, 0x17, 0x07, 0x9C, 0x0F, 0xC6,  // =.{.....
                /* 11D0 */  0xD7, 0x0A, 0xC0, 0x93, 0x57, 0xA1, 0x16, 0x1D,  // ....W...
                /* 11D8 */  0x5E, 0x2B, 0xC0, 0x25, 0x68, 0x15, 0xBA, 0x56,  // ^+.%h..V
                /* 11E0 */  0xE0, 0x62, 0xAD, 0x45, 0x77, 0x71, 0xE6, 0x13,  // .b.Ewq..
                /* 11E8 */  0x5A, 0x18, 0x47, 0xF2, 0xFF, 0x3F, 0x8E, 0xC8,  // Z.G..?..
                /* 11F0 */  0x87, 0xFC, 0x02, 0x11, 0x26, 0xC4, 0x03, 0xA9,  // ....&...
                /* 11F8 */  0xAE, 0x15, 0xA8, 0x08, 0x14, 0x8A, 0x7E, 0x2E,  // ......~.
                /* 1200 */  0x40, 0x85, 0x1D, 0x3B, 0x05, 0x31, 0xA0, 0x93,  // @..;.1..
                /* 1208 */  0x5C, 0x2B, 0xD0, 0x5A, 0x40, 0x34, 0x0B, 0x9C,  // \+.Z@4..
                /* 1210 */  0xCE, 0x49, 0x68, 0x52, 0x3E, 0x54, 0x00, 0xBE,  // .IhR>T..
                /* 1218 */  0x62, 0x5C, 0xE3, 0x51, 0xC2, 0xAF, 0xF1, 0x14,  // b\.Q....
                /* 1220 */  0xC4, 0x13, 0xF3, 0xA1, 0x02, 0xF0, 0x72, 0xFC,  // ......r.
                /* 1228 */  0xF5, 0xB0, 0x70, 0x32, 0x6E, 0x38, 0x3E, 0x63,  // ..p2n8>c
                /* 1230 */  0x12, 0xD4, 0x83, 0x82, 0xFD, 0xFF, 0x3F, 0x8E,  // ......?.
                /* 1238 */  0x03, 0xAB, 0x83, 0x07, 0xF0, 0x96, 0xE8, 0x53,  // .......S
                /* 1240 */  0xEA, 0xA1, 0x15, 0x64, 0x62, 0x0E, 0x1E, 0xE8,  // ...db...
                /* 1248 */  0x48, 0x6B, 0xD1, 0xA1, 0x95, 0x1D, 0x3C, 0x60,  // Hk....<`
                /* 1250 */  0x85, 0x38, 0x78, 0xA0, 0xE4, 0x53, 0x48, 0xFE,  // .8x..SH.
                /* 1258 */  0xD9, 0x01, 0x25, 0xF8, 0xEC, 0x40, 0x41, 0x3C,  // ..%..@A<
                /* 1260 */  0x36, 0x1F, 0x3C, 0x00, 0x23, 0x21, 0x6E, 0x0E,  // 6.<.#!n.
                /* 1268 */  0x50, 0xFE, 0xFF, 0x37, 0x07, 0xDC, 0xA5, 0x15,  // P..7....
                /* 1270 */  0x98, 0x1D, 0x1C, 0xB0, 0xC7, 0x27, 0xC0, 0xE2,  // .....'..
                /* 1278 */  0xB1, 0x03, 0xD0, 0xE5, 0xF4, 0xD8, 0x01, 0xEB,  // ........
                /* 1280 */  0xFF, 0x7F, 0xEC, 0x80, 0x25, 0x7E, 0x15, 0x34,  // ....%~.4
                /* 1288 */  0x34, 0x84, 0xE4, 0xC2, 0xA0, 0xEE, 0xB1, 0x1E,  // 4.......
                /* 1290 */  0x3B, 0x7E, 0x34, 0x07, 0x73, 0x0C, 0xC1, 0xD9,  // ;~4.s...
                /* 1298 */  0x29, 0xDC, 0x70, 0x7C, 0xA0, 0x9E, 0xFA, 0xA3,  // ).p|....
                /* 12A0 */  0xE7, 0x69, 0x3C, 0x6A, 0x78, 0x56, 0xCF, 0x7C,  // .i<jxV.|
                /* 12A8 */  0x21, 0x99, 0xB4, 0x21, 0xA2, 0x8E, 0x05, 0x1E,  // !..!....
                /* 12B0 */  0xEB, 0x5B, 0x81, 0x8F, 0xE2, 0x4F, 0xB3, 0x9E,  // .[...O..
                /* 12B8 */  0x50, 0x98, 0x04, 0x1E, 0x22, 0x43, 0xE3, 0x67,  // P..."C.g
                /* 12C0 */  0x7C, 0x06, 0xCD, 0x6F, 0x17, 0xBE, 0x63, 0xBC,  // |..o..c.
                /* 12C8 */  0x06, 0x78, 0x6E, 0x26, 0xE8, 0x7E, 0xE8, 0x52,  // .xn&.~.R
                /* 12D0 */  0x88, 0xA0, 0x13, 0xC0, 0x3B, 0xC1, 0xA3, 0x78,  // ....;..x
                /* 12D8 */  0x6F, 0x57, 0x01, 0xD9, 0x3A, 0x7E, 0x6A, 0xF4,  // oW..:~j.
                /* 12E0 */  0xB1, 0x1A, 0x43, 0x11, 0x44, 0x84, 0xA0, 0x51,  // ..C.D..Q
                /* 12E8 */  0x8C, 0x17, 0x21, 0x54, 0x88, 0x28, 0x51, 0x9B,  // ..!T.(Q.
                /* 12F0 */  0x03, 0x91, 0x36, 0x54, 0x81, 0x44, 0x0B, 0x66,  // ..6T.D.f
                /* 12F8 */  0x04, 0x66, 0x7F, 0x10, 0x44, 0xFA, 0x33, 0x40,  // .f..D.3@
                /* 1300 */  0xF7, 0x0C, 0x47, 0x3A, 0xA0, 0xA0, 0x87, 0xEB,  // ..G:....
                /* 1308 */  0xA1, 0x9E, 0xE3, 0xAB, 0xE0, 0x33, 0x8B, 0x41,  // .....3.A
                /* 1310 */  0x0E, 0xF2, 0xDC, 0x9E, 0x50, 0x30, 0xE0, 0x3A,  // ....P0.:
                /* 1318 */  0x43, 0x40, 0xBB, 0x30, 0x06, 0x7C, 0x77, 0xF5,  // C@.0.|w.
                /* 1320 */  0xA1, 0x8C, 0xC0, 0xA1, 0x86, 0xE8, 0x13, 0xA2,  // ........
                /* 1328 */  0x27, 0x70, 0x88, 0x0C, 0xD0, 0x87, 0x08, 0xF8,  // 'p......
                /* 1330 */  0xE3, 0xF1, 0x21, 0x05, 0x73, 0xA0, 0xD1, 0x20,  // ..!.s.. 
                /* 1338 */  0x50, 0xF7, 0x63, 0x3E, 0xD2, 0xD3, 0x7A, 0x92,  // P.c>..z.
                /* 1340 */  0xF1, 0xF5, 0x9E, 0x11, 0x14, 0x7B, 0x76, 0xA0,  // .....{v.
                /* 1348 */  0xE3, 0x81, 0xF5, 0xFF, 0x1F, 0x0F, 0x98, 0x14,  // ........
                /* 1350 */  0x9F, 0x09, 0x84, 0xF0, 0xF0, 0xE0, 0xF9, 0xFA,  // ........
                /* 1358 */  0xE0, 0xA6, 0x93, 0x08, 0x1A, 0xDA, 0xA0, 0x67,  // .......g
                /* 1360 */  0xE3, 0x33, 0x84, 0x6F, 0x1E, 0xEC, 0x68, 0xC1,  // .3.o..h.
                /* 1368 */  0x45, 0x1D, 0x2D, 0x50, 0xA7, 0x05, 0x1F, 0x14,  // E.-P....
                /* 1370 */  0xD8, 0x31, 0x88, 0x9F, 0x2C, 0xD8, 0x71, 0x0B,  // .1..,.q.
                /* 1378 */  0x9C, 0xF2, 0x0E, 0x21, 0xA0, 0x00, 0xF1, 0xC9,  // ...!....
                /* 1380 */  0x82, 0xCD, 0x0B, 0x43, 0xE0, 0x43, 0x72, 0x78,  // ...C.Crx
                /* 1388 */  0xCC, 0xA1, 0xC3, 0xF0, 0xFC, 0x94, 0xF0, 0x38,  // .......8
                /* 1390 */  0xC2, 0xB0, 0xDF, 0x48, 0x3C, 0x85, 0xC3, 0xF1,  // ...H<...
                /* 1398 */  0x91, 0xC2, 0x08, 0xC1, 0xCB, 0x3D, 0x59, 0x90,  // .....=Y.
                /* 13A0 */  0xE3, 0xF2, 0xD1, 0x9D, 0xD2, 0x29, 0x1F, 0x02,  // .....)..
                /* 13A8 */  0x1B, 0xAA, 0x87, 0xC0, 0xCF, 0x0B, 0x1E, 0x02,  // ........
                /* 13B0 */  0x1F, 0x40, 0xAB, 0xB3, 0x23, 0xE7, 0x93, 0x73,  // .@..#..s
                /* 13B8 */  0xC2, 0x8D, 0x97, 0x8F, 0x09, 0x3B, 0x00, 0x1E,  // .....;..
                /* 13C0 */  0xE4, 0xDD, 0xEC, 0xB3, 0x08, 0x8D, 0xB1, 0x7C,  // .......|
                /* 13C8 */  0x1F, 0x47, 0x80, 0xE0, 0xFF, 0xFF, 0x38, 0x02,  // .G....8.
                /* 13D0 */  0xEE, 0xD3, 0xC8, 0xA3, 0xC8, 0x23, 0xC1, 0xF3,  // .....#..
                /* 13D8 */  0x88, 0x6F, 0x22, 0xB6, 0x76, 0x0D, 0xD1, 0x48,  // .o".v..H
                /* 13E0 */  0x5E, 0x0B, 0x4E, 0xF5, 0x38, 0xA3, 0x18, 0x2B,  // ^.N.8..+
                /* 13E8 */  0x4C, 0x28, 0x83, 0x3C, 0x95, 0x3C, 0x8A, 0x9C,  // L(.<.<..
                /* 13F0 */  0x54, 0x14, 0x63, 0xBC, 0x8D, 0x44, 0x0B, 0x1B,  // T.c..D..
                /* 13F8 */  0xE3, 0xE9, 0xC4, 0xC3, 0x8E, 0x78, 0x02, 0x71,  // .....x.q
                /* 1400 */  0x1E, 0x47, 0x58, 0xA4, 0x07, 0x83, 0x86, 0xEA,  // .GX.....
                /* 1408 */  0xE3, 0x08, 0xC0, 0x8F, 0x23, 0x02, 0xEE, 0xB4,  // ....#...
                /* 1410 */  0x01, 0x13, 0xE7, 0xF5, 0xC2, 0x27, 0x07, 0x7E,  // .....'.~
                /* 1418 */  0xD6, 0x80, 0xF9, 0xFF, 0x3F, 0x6B, 0x80, 0x2D,  // ....?k.-
                /* 1420 */  0xF8, 0xC3, 0x40, 0xA3, 0xF4, 0xC9, 0xC7, 0xC7,  // ..@.....
                /* 1428 */  0x3F, 0x3E, 0x22, 0x53, 0xF9, 0xF8, 0xC7, 0x66,  // ?>"S...f
                /* 1430 */  0xF0, 0x14, 0x15, 0xFA, 0x29, 0x21, 0xAC, 0x0E,  // ....)!..
                /* 1438 */  0x7D, 0x14, 0xD8, 0x91, 0x49, 0x74, 0xC4, 0xF0,  // }...It..
                /* 1440 */  0xE1, 0x8C, 0xC7, 0x3C, 0xAC, 0x50, 0x10, 0x03,  // ...<.P..
                /* 1448 */  0x3A, 0xC3, 0x19, 0x06, 0xAD, 0x02, 0x44, 0x33,  // :.....D3
                /* 1450 */  0x38, 0x9B, 0xE3, 0x79, 0x18, 0xF0, 0xC1, 0x0F,  // 8..y....
                /* 1458 */  0x98, 0x1D, 0xEB, 0x80, 0x53, 0xF8, 0xA1, 0xA2,  // ....S...
                /* 1460 */  0xE2, 0x0E, 0x95, 0x82, 0x78, 0xA8, 0x8E, 0x72,  // ....x..r
                /* 1468 */  0xFA, 0x81, 0x72, 0x68, 0xF0, 0x41, 0xE2, 0x49,  // ..rh.A.I
                /* 1470 */  0x00, 0x73, 0x7E, 0x05, 0xB6, 0xFF, 0xFF, 0x53,  // .s~....S
                /* 1478 */  0x1D, 0x30, 0x37, 0xA6, 0x51, 0xA8, 0xC1, 0x53,  // .07.Q..S
                /* 1480 */  0x1D, 0xB8, 0x4E, 0x13, 0xB0, 0x11, 0x1E, 0xF8,  // ..N.....
                /* 1488 */  0x9F, 0x26, 0x00, 0xCE, 0xFC, 0xFF, 0x4F, 0x13,  // .&....O.
                /* 1490 */  0x80, 0x6D, 0xAF, 0x42, 0x4F, 0x13, 0x60, 0x53,  // .m.BO.`S
                /* 1498 */  0x68, 0xD3, 0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA,  // h..F.V..
                /* 14A0 */  0xD4, 0x28, 0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D,  // .(..V.J.
                /* 14A8 */  0x19, 0xB3, 0xBD, 0x56, 0x1D, 0xDC, 0x3D, 0x16,  // ...V..=.
                /* 14B0 */  0x8B, 0x58, 0x8E, 0x40, 0x2C, 0x9C, 0x42, 0x46,  // .X.@,.BF
                /* 14B8 */  0x0E, 0x67, 0x06, 0x11, 0x90, 0x65, 0x9C, 0x7C,  // .g...e.|
                /* 14C0 */  0x04, 0x64, 0x51, 0x20, 0x02, 0x72, 0x24, 0x0B,  // .dQ .r$.
                /* 14C8 */  0x40, 0x2C, 0x1F, 0x88, 0x80, 0x9C, 0xE7, 0xEF,  // @,......
                /* 14D0 */  0x20, 0x20, 0xA7, 0x03, 0x11, 0x90, 0x95, 0xAD,  //   ......
                /* 14D8 */  0x51, 0x40, 0x96, 0x09, 0x22, 0x20, 0x67, 0x03,  // Q@.." g.
                /* 14E0 */  0xA2, 0x41, 0x81, 0x68, 0x28, 0x13, 0x40, 0x2C,  // .A.h(.@,
                /* 14E8 */  0x22, 0x88, 0x80, 0x2C, 0xEE, 0x69, 0x21, 0x20,  // "..,.i! 
                /* 14F0 */  0x4B, 0x05, 0x11, 0x90, 0x83, 0xAE, 0x51, 0x40,  // K.....Q@
                /* 14F8 */  0x4E, 0x0D, 0x22, 0x20, 0x4B, 0x7D, 0x49, 0x09,  // N." K}I.
                /* 1500 */  0xC8, 0xBA, 0x41, 0x04, 0xE4, 0xB4, 0x40, 0x34,  // ..A...@4
                /* 1508 */  0x3A, 0x10, 0x8D, 0x69, 0x03, 0x88, 0x85, 0x06,  // :..i....
                /* 1510 */  0x11, 0xD0, 0xFF, 0xFF, 0x09, 0x40, 0x3E, 0x80,  // .....@>.
                /* 1518 */  0x98, 0x7A, 0x10, 0x01, 0x39, 0x32, 0x10, 0xCD,  // .z..92..
                /* 1520 */  0x0F, 0x44, 0xB3, 0x3E, 0x0C, 0x04, 0xE4, 0xE4,  // .D.>....
                /* 1528 */  0x20, 0x02, 0xB2, 0x66, 0x1A, 0x01, 0x39, 0x01,  //  ..f..9.
                /* 1530 */  0x85, 0x80, 0x9C, 0x5F, 0x09, 0x10, 0x13, 0xF3,  // ..._....
                /* 1538 */  0x92, 0x10, 0x90, 0x13, 0x80, 0x08, 0xC8, 0x71,  // .......q
                /* 1540 */  0x80, 0xA8, 0x88, 0xB7, 0x9C, 0x80, 0xAC, 0x08,  // ........
                /* 1548 */  0x44, 0x40, 0x4E, 0x0F, 0x44, 0xB5, 0x58, 0x39,  // D@N.D.X9
                /* 1550 */  0x7A, 0xD3, 0x67, 0xB7, 0x80, 0x1C, 0x0B, 0x44,  // z.g....D
                /* 1558 */  0x40, 0xD6, 0xE2, 0x05, 0x88, 0x09, 0x03, 0xD1,  // @.......
                /* 1560 */  0x00, 0xC8, 0xCB, 0x40, 0x40, 0x96, 0x04, 0x22,  // ...@@.."
                /* 1568 */  0x20, 0x47, 0x03, 0xA2, 0x41, 0x81, 0xA8, 0xC8,  //  G..A...
                /* 1570 */  0x2F, 0x89, 0x80, 0xAC, 0x18, 0x44, 0x03, 0x25,  // /....D.%
                /* 1578 */  0x40, 0x34, 0x33, 0x10, 0x95, 0xEA, 0x66, 0xD0,  // @43...f.
                /* 1580 */  0x14, 0x44, 0x40, 0xCE, 0x0E, 0x44, 0x85, 0x3C,  // .D@..D.<
                /* 1588 */  0x32, 0x04, 0xE4, 0xCC, 0x20, 0x02, 0xB2, 0x02,  // 2... ...
                /* 1590 */  0x3B, 0x40, 0x4C, 0xBB, 0x1E, 0x20, 0x16, 0x04,  // ;@L.. ..
                /* 1598 */  0x44, 0x40, 0x96, 0xEC, 0x07, 0x88, 0x05, 0x00,  // D@......
                /* 15A0 */  0x11, 0x90, 0xA3, 0x9F, 0x68, 0x34, 0x00, 0x62,  // ....h4.b
                /* 15A8 */  0x08, 0x88, 0x45, 0x00, 0x11, 0x90, 0x03, 0x01,  // ..E.....
                /* 15B0 */  0x51, 0x21, 0x8E, 0x80, 0x98, 0x2A, 0x10, 0x0D,  // Q!...*..
                /* 15B8 */  0x9C, 0x00, 0x51, 0x35, 0x2F, 0x43, 0x0D, 0x96,  // ..Q5/C..
                /* 15C0 */  0x58, 0x02, 0x62, 0xB9, 0x40, 0x04, 0x64, 0x45,  // X.b.@.dE
                /* 15C8 */  0x9A, 0x80, 0x98, 0x3E, 0x10, 0x01, 0x39, 0x99,  // ...>..9.
                /* 15D0 */  0x27, 0x20, 0x16, 0x13, 0x44, 0x07, 0x08, 0xF2,  // ' ..D...
                /* 15D8 */  0xFE, 0x14, 0x90, 0x03, 0x82, 0xE8, 0xC0, 0x40,  // .......@
                /* 15E0 */  0x54, 0x1D, 0x18, 0x28, 0x88, 0x06, 0x4B, 0x80,  // T..(..K.
                /* 15E8 */  0x68, 0x68, 0x20, 0x2A, 0xF6, 0xA1, 0x21, 0x20,  // hh *..! 
                /* 15F0 */  0x2B, 0x07, 0xD1, 0x81, 0x81, 0x00, 0xD1, 0xE8,  // +.......
                /* 15F8 */  0x40, 0x54, 0xEF, 0x93, 0x30, 0x10, 0x11, 0x0F,  // @T..0...
                /* 1600 */  0x22, 0xA0, 0xFF, 0xFF, 0xD3, 0xB7, 0x80, 0x68,  // "......h
                /* 1608 */  0x7A, 0x20, 0x2A, 0xFA, 0x81, 0xA3, 0x83, 0x02,  // z *.....
                /* 1610 */  0x01, 0xD1, 0x20, 0x88, 0x2F, 0x20, 0x26, 0x1D,  // .. ./ &.
                /* 1618 */  0x44, 0x40, 0x0E, 0xFD, 0x56, 0x11, 0x90, 0x25,  // D@..V..%
                /* 1620 */  0xBC, 0xD4, 0x74, 0xE0, 0x20, 0x20, 0x3A, 0x70,  // ..t.  :p
                /* 1628 */  0x10, 0x20, 0x1A, 0x1F, 0x88, 0x8A, 0xF9, 0xAA,  // . ......
                /* 1630 */  0x68, 0xE0, 0x04, 0x44, 0x03, 0x27, 0x40, 0x54,  // h..D.'@T
                /* 1638 */  0xCA, 0x8B, 0xE5, 0x41, 0x81, 0x81, 0x68, 0xA0,  // ...A..h.
                /* 1640 */  0x04, 0x88, 0x06, 0x04, 0xA2, 0xFA, 0x5E, 0x8F,  // ......^.
                /* 1648 */  0x81, 0x88, 0x58, 0x10, 0x01, 0x39, 0x23, 0x10,  // ..X..9#.
                /* 1650 */  0x0D, 0x0C, 0x44, 0x93, 0xBD, 0x1F, 0x03, 0x91,  // ..D.....
                /* 1658 */  0x9C, 0x20, 0x02, 0xB2, 0xCE, 0x0F, 0x64, 0x20,  // . ....d 
                /* 1660 */  0xA2, 0x1A, 0x44, 0x40, 0xCE, 0x0B, 0x44, 0xD3,  // ..D@..D.
                /* 1668 */  0x03, 0x51, 0xD5, 0xEF, 0xC9, 0x40, 0x24, 0x03,  // .Q...@$.
                /* 1670 */  0x88, 0x0E, 0x0C, 0x44, 0xDD, 0x01, 0x81, 0xBA,  // ...D....
                /* 1678 */  0x1B, 0x24, 0x05, 0xD1, 0x20, 0xC9, 0x1B, 0x56,  // .$.. ..V
                /* 1680 */  0x40, 0x96, 0x0F, 0x22, 0x20, 0x87, 0x01, 0xA2,  // @.." ...
                /* 1688 */  0x42, 0x3E, 0x46, 0x02, 0xB2, 0x2C, 0x10, 0x0D,  // B>F..,..
                /* 1690 */  0x8E, 0x00, 0xD1, 0x80, 0x40, 0x54, 0x9C, 0xBF,  // ....@T..
                /* 1698 */  0x43, 0x01, 0x05, 0x11, 0x90, 0x43, 0xBE, 0x73,  // C....C.s
                /* 16A0 */  0x04, 0xE4, 0xC4, 0x20, 0x1A, 0x1C, 0xF9, 0xDF,  // ... ....
                /* 16A8 */  0x1C, 0x1C, 0x03, 0xD1, 0x40, 0xC9, 0x73, 0x33,  // ....@.s3
                /* 16B0 */  0x10, 0x51, 0x0B, 0x22, 0x20, 0xA7, 0x04, 0xA2,  // .Q." ...
                /* 16B8 */  0x99, 0x81, 0xA8, 0xD6, 0x17, 0xCF, 0x03, 0x02,  // ........
                /* 16C0 */  0x03, 0xD1, 0xC1, 0x82, 0xFC, 0x84, 0x04, 0xE4,  // ........
                /* 16C8 */  0x27, 0x90, 0x81, 0x9C, 0x14, 0x44, 0x40, 0xCE,  // '....D@.
                /* 16D0 */  0x0D, 0x44, 0x15, 0x7B, 0x04, 0x62, 0xFA, 0x41,  // .D.{.b.A
                /* 16D8 */  0x04, 0xE4, 0xDC, 0x40, 0x54, 0xC5, 0x6B, 0x51,  // ...@T.kQ
                /* 16E0 */  0x87, 0x0C, 0xF2, 0x60, 0xD4, 0x21, 0x83, 0x80,  // ...`.!..
                /* 16E8 */  0xE8, 0x60, 0x40, 0x80, 0xA8, 0x16, 0x95, 0x40,  // .`@....@
                /* 16F0 */  0xFE, 0xFF, 0x0F, 0x58, 0x20, 0x1A, 0x30, 0x71,  // ...X .0q
                /* 16F8 */  0x09, 0xC4, 0xA4, 0x7F, 0x88, 0x02, 0x33, 0x10,  // ......3.
                /* 1700 */  0x9D, 0x82, 0xC8, 0x0F, 0x28, 0x10, 0x91, 0x03,  // ....(...
                /* 1708 */  0x22, 0x20, 0xC7, 0x00, 0xA2, 0xA1, 0x80, 0xA8,  // " ......
                /* 1710 */  0x16, 0x9F, 0x87, 0x04, 0x0A, 0x22, 0x20, 0xC7,  // ....." .
                /* 1718 */  0x01, 0xA2, 0xD9, 0x80, 0x68, 0x88, 0x17, 0x52,  // ....h..R
                /* 1720 */  0x20, 0x12, 0x09, 0x44, 0x97, 0x30, 0xF2, 0x42,  //  ..D.0.B
                /* 1728 */  0x0A, 0x44, 0xA4, 0x81, 0xE8, 0x10, 0x40, 0x80,  // .D....@.
                /* 1730 */  0x68, 0x40, 0x20, 0x2A, 0xEC, 0xA3, 0xA4, 0x43,  // h@ *...C
                /* 1738 */  0x0F, 0x01, 0xD1, 0x41, 0x83, 0x3C, 0x97, 0x0E,  // ...A.<..
                /* 1740 */  0x9C, 0x81, 0x08, 0xC8, 0x09, 0x7F, 0xC1, 0x81,  // ........
                /* 1748 */  0x48, 0x5E, 0x10, 0x01, 0x59, 0xF7, 0x5B, 0x29,  // H^..Y.[)
                /* 1750 */  0x10, 0x49, 0x01, 0xA2, 0xC3, 0x01, 0x79, 0x4D,  // .I....yM
                /* 1758 */  0x3D, 0x90, 0x30, 0x10, 0x01, 0x59, 0x83, 0xDA,  // =.0..Y..
                /* 1760 */  0x03, 0x0D, 0x05, 0xD1, 0x41, 0x88, 0xB8, 0x05,  // ....A...
                /* 1768 */  0x62, 0x49, 0x41, 0x74, 0xD0, 0x20, 0x76, 0x0F,  // bIAt. v.
                /* 1770 */  0x03, 0x14, 0x44, 0x87, 0x08, 0xA2, 0xF7, 0x10,  // ..D.....
                /* 1778 */  0x41, 0x41, 0x74, 0x40, 0x21, 0x3F, 0xAA, 0x07,  // AAt@!?..
                /* 1780 */  0x14, 0xF6, 0x96, 0x12, 0x90, 0xD3, 0x3C, 0xDC,  // ......<.
                /* 1788 */  0x0E, 0x94, 0x81, 0x08, 0xC8, 0xDA, 0x1E, 0xC2,  // ........
                /* 1790 */  0x02, 0xB2, 0x52, 0x10, 0x1D, 0x0C, 0xC8, 0xFB,  // ..R.....
                /* 1798 */  0x49, 0x07, 0x03, 0x02, 0xA2, 0x81, 0x91, 0x57,  // I......W
                /* 17A0 */  0xDC, 0x81, 0x31, 0x10, 0x01, 0x59, 0xC5, 0x37,  // ..1..Y.7
                /* 17A8 */  0x4E, 0x40, 0xD6, 0x04, 0x22, 0x20, 0x67, 0x7A,  // N@.." gz
                /* 17B0 */  0x5A, 0x05, 0x22, 0x09, 0x41, 0x74, 0x70, 0x20,  // Z.".Atp 
                /* 17B8 */  0xAA, 0x0F, 0x0E, 0x14, 0x44, 0x07, 0x22, 0xF2,  // ....D.".
                /* 17C0 */  0xC4, 0x0D, 0x44, 0x82, 0x83, 0x68, 0xD0, 0xE4,  // ..D..h..
                /* 17C8 */  0x55, 0xAC, 0xC3, 0x0A, 0x01, 0xD1, 0xA1, 0x88,  // U.......
                /* 17D0 */  0x3C, 0xEA, 0x74, 0xB0, 0x21, 0x20, 0x02, 0xB2,  // <.t.! ..
                /* 17D8 */  0xDC, 0xBF, 0xD6, 0x83, 0x0A, 0x03, 0xD1, 0x01,  // ........
                /* 17E0 */  0x81, 0xBC, 0xD3, 0x74, 0x40, 0x20, 0x20, 0x02,  // ...t@  .
                /* 17E8 */  0x72, 0x2C, 0xE3, 0x40, 0x2C, 0x23, 0x88, 0x80,  // r,.@,#..
                /* 17F0 */  0xFE, 0xFF, 0xCF, 0x64, 0xFA, 0x2E, 0x6B, 0x30,  // ...d..k0
                /* 17F8 */  0x04, 0x44, 0x83, 0x24, 0xCF, 0xB6, 0x83, 0x64,  // .D.$...d
                /* 1800 */  0x20, 0x3A, 0x84, 0x90, 0x07, 0x9B, 0x80, 0x1C,  //  :......
                /* 1808 */  0x1E, 0x44, 0x40, 0x56, 0xFE, 0x46, 0x7B, 0x58,  // .D@V.F{X
                /* 1810 */  0x61, 0x20, 0x3A, 0xBC, 0x90, 0xA7, 0xB3, 0x80,  // a :.....
                /* 1818 */  0x1C, 0x01, 0x44, 0x40, 0xD6, 0x21, 0xFE, 0xC0,  // ..D@.!..
                /* 1820 */  0x45, 0x41, 0x04, 0x64, 0x09, 0x2F, 0x62, 0x01,  // EA.d./b.
                /* 1828 */  0x59, 0x10, 0x88, 0x0E, 0x59, 0x04, 0x88, 0x46,  // Y...Y..F
                /* 1830 */  0x04, 0xA2, 0x0A, 0x9F, 0xD0, 0x81, 0x88, 0x5C,  // .......\
                /* 1838 */  0x10, 0x1D, 0x42, 0xC8, 0x3B, 0x58, 0x87, 0x10,  // ..B.;X..
                /* 1840 */  0x02, 0x22, 0x20, 0x87, 0x05, 0xA2, 0xD1, 0x81,  // ." .....
                /* 1848 */  0xA8, 0x76, 0xFD, 0x07, 0x0B, 0x0A, 0x22, 0x20,  // .v...." 
                /* 1850 */  0xCB, 0xF6, 0x0F, 0xC4, 0x42, 0x80, 0xE8, 0xC0,  // ....B...
                /* 1858 */  0x40, 0x02, 0x1C, 0x4E, 0x28, 0x88, 0x80, 0x9C,  // @..N(...
                /* 1860 */  0xAB, 0x00, 0x10, 0x0B, 0x09, 0x22, 0x20, 0xAB,  // ....." .
                /* 1868 */  0x4C, 0x00, 0xC4, 0x24, 0x83, 0x68, 0xC0, 0xA4,  // L..$.h..
                /* 1870 */  0xC1, 0x80, 0x28, 0x88, 0x80, 0x9C, 0xFC, 0x99,  // ..(.....
                /* 1878 */  0x2F, 0x20, 0xCB, 0xA8, 0x70, 0xF0, 0xA0, 0x20,  // / ..p.. 
                /* 1880 */  0x3A, 0x78, 0x90, 0xC7, 0xA3, 0x0E, 0x39, 0xA4,  // :x....9.
                /* 1888 */  0xC3, 0x21, 0x87, 0x82, 0xE8, 0xC0, 0x41, 0x4A,  // .!....AJ
                /* 1890 */  0x1C, 0x38, 0x28, 0x88, 0x0E, 0x0A, 0x24, 0xC5,  // .8(...$.
                /* 1898 */  0x41, 0x81, 0x82, 0xE8, 0x30, 0x40, 0x5A, 0x1C,  // A...0@Z.
                /* 18A0 */  0x06, 0x28, 0x88, 0x80, 0x2C, 0x2D, 0x06, 0x10,  // .(..,-..
                /* 18A8 */  0xD3, 0x09, 0x22, 0x20, 0xAB, 0xAA, 0x01, 0xC4,  // .." ....
                /* 18B0 */  0x34, 0x82, 0xE8, 0x00, 0x41, 0x72, 0x1C, 0x20,  // 4...Ar. 
                /* 18B8 */  0x28, 0x88, 0x0E, 0x25, 0x24, 0x08, 0x10, 0xCB,  // (..%$...
                /* 18C0 */  0x01, 0xA2, 0x03, 0x0A, 0x01, 0xA2, 0x5A, 0x8A,  // ......Z.
                /* 18C8 */  0x0C, 0x8E, 0x82, 0x08, 0xC8, 0x3A, 0x92, 0x00,  // .....:..
                /* 18D0 */  0xB1, 0x0C, 0x4D, 0x06, 0x46, 0x41, 0x04, 0x64,  // ..M.FA.d
                /* 18D8 */  0xF5, 0x0F, 0x46, 0x01, 0x39, 0x0B, 0x88, 0x06,  // ..F.9...
                /* 18E0 */  0x46, 0xAA, 0x0C, 0x8C, 0x82, 0x08, 0xE8, 0xFF,  // F.......
                /* 18E8 */  0x9F, 0x60, 0x22, 0x20, 0x9A, 0x0F, 0x88, 0x6A,  // .`" ...j
                /* 18F0 */  0xCB, 0x72, 0x60, 0xA0, 0x20, 0x3A, 0xD8, 0x10,  // .r`. :..
                /* 18F8 */  0x20, 0x9A, 0x19, 0x88, 0xEA, 0x0D, 0x73, 0x90,  //  .....s.
                /* 1900 */  0xA0, 0x20, 0x02, 0x72, 0x62, 0x20, 0x1A, 0x1F,  // . .rb ..
                /* 1908 */  0x88, 0x0A, 0x2F, 0x73, 0xD8, 0xA0, 0x20, 0x1A,  // ../s.. .
                /* 1910 */  0x1C, 0x01, 0xA2, 0x5A, 0xD2, 0x0C, 0x8C, 0x82,  // ...Z....
                /* 1918 */  0x68, 0x60, 0x04, 0x88, 0xCA, 0x6F, 0x73, 0x18,  // h`...os.
                /* 1920 */  0xA2, 0x20, 0x3A, 0xB8, 0x90, 0x3A, 0x40, 0x4C,  // . :..:@L
                /* 1928 */  0x19, 0x88, 0x0E, 0x31, 0x04, 0x88, 0x66, 0x03,  // ...1..f.
                /* 1930 */  0xA2, 0x49, 0xF2, 0x1C, 0xC0, 0x28, 0x88, 0x80,  // .I...(..
                /* 1938 */  0xAC, 0xA9, 0x0F, 0x10, 0x53, 0x08, 0xA2, 0x83,  // ....S...
                /* 1940 */  0x0A, 0x01, 0xA2, 0x49, 0x81, 0xA8, 0xC6, 0x40,  // ...I...@
                /* 1948 */  0x07, 0x37, 0x0A, 0xA2, 0x43, 0x08, 0x01, 0xA2,  // .7..C...
                /* 1950 */  0xC9, 0x81, 0xA8, 0xEA, 0x42, 0x07, 0x27, 0x0A,  // ....B.'.
                /* 1958 */  0xA2, 0xC3, 0x0A, 0x01, 0xA2, 0x6A, 0x12, 0x01,  // .....j..
                /* 1960 */  0xB1, 0x2C, 0x8D, 0x80, 0x58, 0x30, 0x10, 0x01,  // .,..X0..
                /* 1968 */  0x59, 0xCD, 0xC3, 0x5E, 0x07, 0x1C, 0x02, 0xA2,  // Y..^....
                /* 1970 */  0x03, 0x0A, 0x01, 0xA2, 0x01, 0x81, 0xA8, 0xB0,  // ........
                /* 1978 */  0x4A, 0x40, 0x4C, 0x25, 0x88, 0x80, 0x9C, 0x0E,  // J@L%....
                /* 1980 */  0x88, 0x46, 0x05, 0xA2, 0x12, 0x33, 0x01, 0x31,  // .F...3.1
                /* 1988 */  0xBD, 0x20, 0x3A, 0x20, 0x12, 0x20, 0x9A, 0x1A,  // . : . ..
                /* 1990 */  0x88, 0xCA, 0xED, 0x04, 0xC4, 0xB4, 0x83, 0x08,  // ........
                /* 1998 */  0xC8, 0x42, 0x43, 0x01, 0x31, 0xD9, 0x20, 0x3A,  // .BC.1. :
                /* 19A0 */  0xD0, 0x91, 0x52, 0x87, 0x05, 0x9A, 0x0A, 0x88,  // ..R.....
                /* 19A8 */  0xA5, 0x06, 0x11, 0x90, 0x35, 0xB4, 0x3A, 0x58,  // ....5.:X
                /* 19B0 */  0xD0, 0x58, 0x40, 0x2C, 0x0F, 0x88, 0x0E, 0x0C,  // .X@,....
                /* 19B8 */  0xA4, 0xD6, 0x81, 0x81, 0x82, 0xE8, 0xC0, 0x40,  // .......@
                /* 19C0 */  0x72, 0x1D, 0x18, 0x28, 0x88, 0x80, 0xFE, 0xFF,  // r..(....
                /* 19C8 */  0x0F, 0x44, 0xEA, 0x75, 0x60, 0xA0, 0x20, 0x02,  // .D.u`. .
                /* 19D0 */  0xB2, 0xAC, 0x60, 0x87, 0x0A, 0x0A, 0xA2, 0x83,  // ..`.....
                /* 19D8 */  0x1D, 0x29, 0x76, 0xB0, 0xA3, 0x20, 0x02, 0x72,  // .)v.. .r
                /* 19E0 */  0x8E, 0x66, 0x43, 0xA0, 0xD1, 0x80, 0x28, 0x08,  // .fC...(.
                /* 19E8 */  0xD5, 0xD0, 0xED, 0xC0, 0x48, 0x41, 0x68, 0xC4,  // ....HAh.
                /* 19F0 */  0x70, 0x47, 0x23, 0x0A, 0xA2, 0x63, 0x01, 0x29,  // pG#..c.)
                /* 19F8 */  0x77, 0x2C, 0xA0, 0x20, 0x3A, 0xAA, 0x90, 0x76,  // w,. :..v
                /* 1A00 */  0x47, 0x09, 0x0A, 0xA2, 0x23, 0x07, 0x89, 0x37,  // G...#..7
                /* 1A08 */  0x1C, 0x0A, 0x22, 0x20, 0xFF, 0xFF, 0x01         // .." ...
            })
            Name (EPY1, 0x578A0D3A)
            Name (EPY2, 0x712099E1)
            Name (EPY3, 0x80EB6ECA)
            Name (EPY4, 0x63B408B2)
            Method (EYPO, 0, Serialized)
            {
                Return (EPY1) /* \RMTW.EPY1 */
            }

            Method (EYPT, 0, Serialized)
            {
                Return (EPY2) /* \RMTW.EPY2 */
            }

            Method (EYPE, 0, Serialized)
            {
                Return (EPY3) /* \RMTW.EPY3 */
            }

            Method (EYPF, 0, Serialized)
            {
                Return (EPY4) /* \RMTW.EPY4 */
            }

            Name (RAMA, 0x745DB018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\RAMX, SystemMemory, RAMA, 0x0100)
            Field (RAMX, ByteAcc, NoLock, Preserve)
            {
                WFUN,   32, 
                WSIZ,   32, 
                Offset (0x10), 
                IDAT,   896, 
                Offset (0x80), 
                ODAT,   1024
            }

            Mutex (WMTX, 0x00)
            Name (LSTF, Buffer (0x04){})
            Name (LSTI, Buffer (0x70){})
            Name (CURF, Buffer (0x04){})
            Name (CURI, Buffer (0x70){})
            Method (WMII, 0, Serialized)
            {
                CURF = WFUN /* \RMTW.WFUN */
                CURI = IDAT /* \RMTW.IDAT */
                If (((CURF == LSTF) && (CURI == LSTI)))
                {
                    Return (Zero)
                }
                Else
                {
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    LSTF = WFUN /* \RMTW.WFUN */
                    LSTI = IDAT /* \RMTW.IDAT */
                }
            }

            Method (LERR, 1, Serialized)
            {
                WBUF = ODAT /* \RMTW.ODAT */
                Return (DerefOf (WBUF [Zero]))
            }

            Method (GBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000001
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000002
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GBON, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000003
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GLBN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000006
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (ISLG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000007
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000008
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000009
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SAPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000004
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SUPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000005
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SBOG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000A
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (LDFT, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000B
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFTB, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000C
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SDFT, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000D
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFTM, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000E
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (DCTL, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000F
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000010
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000011
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000012
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000013
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (CKPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000014
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GTOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000015
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (STOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000016
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (AAPD, 1, Serialized)
            {
                Return (Zero)
            }

            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (SWMI, 0, Serialized)
            {
                ISMI (0x96)
            }

            Method (APF1, 1, Serialized)
            {
                MBIF = 0x80000004
                MBDA = Arg0
                SWMI ()
                Return (WSTA) /* \RMTW.WSTA */
            }

            Method (APPW, 1, Serialized)
            {
                MBIF = 0x80000008
                MBDA = Arg0
                SWMI ()
                Return (WSTA) /* \RMTW.WSTA */
            }

            Name (AMSB, 0x75F1B018)
            OperationRegion (\ACCX, SystemMemory, AMSB, 0x0100)
            Field (ACCX, ByteAcc, NoLock, Preserve)
            {
                MBSI,   32, 
                MBIF,   32, 
                WSTA,   32, 
                MBDA,   1952
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = One
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x52494F42)
                    {
                        Return (RIOB (Arg2))
                    }
                    Case (0x57494F42)
                    {
                        Return (WIOB (Arg2))
                    }
                    Case (0x52494F57)
                    {
                        Return (RIOW (Arg2))
                    }
                    Case (0x57494F57)
                    {
                        Return (WIOW (Arg2))
                    }
                    Case (0x52494F44)
                    {
                        Return (RIOD (Arg2))
                    }
                    Case (0x57494F44)
                    {
                        Return (WIOD (Arg2))
                    }
                    Case (0x52504349)
                    {
                        Return (RPCI (Arg2))
                    }
                    Case (0x57504349)
                    {
                        Return (WPCI (Arg2))
                    }
                    Case (0x52494458)
                    {
                        Return (RIDX (Arg2))
                    }
                    Case (0x57494458)
                    {
                        Return (WIDX (Arg2))
                    }
                    Case (0x52444D52)
                    {
                        Return (RDMR (Arg2))
                    }
                    Case (0x57524D52)
                    {
                        Return (WRMR (Arg2))
                    }
                    Case (0x52434944)
                    {
                        Return (RCID (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x5253494F)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x5753494F)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x5248574D)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x5748574D)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x4252494F)
                    {
                        Return (BRIO (Arg2))
                    }
                    Case (0x4257494F)
                    {
                        Return (BWIO (Arg2))
                    }
                    Case (0x4252484D)
                    {
                        Return (BRHM (Arg2))
                    }
                    Case (0x4257484D)
                    {
                        Return (BWHM (Arg2))
                    }
                    Case (0x42524543)
                    {
                        Return (BREC (Arg2))
                    }
                    Case (0x42574543)
                    {
                        Return (BWEC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Mutex (ASMX, 0x00)
            Method (RIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    Local0 = PT08 /* \RMTW.RIOB.PT08 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, B_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    PT08 = B_DT /* \RMTW.WIOB.B_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    Local0 = PT16 /* \RMTW.RIOW.PT16 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateWordField (Arg0, 0x02, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    PT16 = W_DT /* \RMTW.WIOW.W_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    Local0 = PT32 /* \RMTW.RIOD.PT32 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateDWordField (Arg0, 0x02, D_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    PT32 = D_DT /* \RMTW.WIOD.D_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    Local0 = TBUS /* \RMTW.RPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \RMTW.RPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \RMTW.RPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \RMTW.RPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = BCFG /* \RMTW.RPCI.BCFG */
                        }
                        Case (0x02)
                        {
                            Local0 = WCFG /* \RMTW.RPCI.WCFG */
                        }
                        Case (0x04)
                        {
                            Local0 = XCFG /* \RMTW.RPCI.XCFG */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    CreateDWordField (Arg0, 0x08, TDAT)
                    Local0 = TBUS /* \RMTW.WPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \RMTW.WPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \RMTW.WPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \RMTW.WPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            BCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Case (0x02)
                        {
                            WCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Case (0x04)
                        {
                            XCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    Local0 = DATP /* \RMTW.RIDX.DATP */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    CreateByteField (Arg0, 0x03, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    DATP = W_DT /* \RMTW.WIDX.W_DT */
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (RGBF, Buffer (0x10){})
            CreateDWordField (RGBF, Zero, REAX)
            CreateDWordField (RGBF, 0x04, REBX)
            CreateDWordField (RGBF, 0x08, RECX)
            CreateDWordField (RGBF, 0x0C, REDX)
            Name (MRBF, Buffer (0x08){})
            CreateDWordField (MRBF, Zero, MEDX)
            CreateDWordField (MRBF, 0x04, MEAX)
            Method (RDMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GMSR (W_ID)
                    MEDX = REDX /* \RMTW.REDX */
                    MEAX = REAX /* \RMTW.REAX */
                    Release (ASMX)
                    Return (MRBF) /* \RMTW.MRBF */
                }

                Return (Ones)
            }

            Method (WRMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    CreateDWordField (Arg0, 0x04, W_HI)
                    CreateDWordField (Arg0, 0x08, W_LW)
                    RECX = W_ID /* \RMTW.WRMR.W_ID */
                    REDX = W_HI /* \RMTW.WRMR.W_HI */
                    REAX = W_LW /* \RMTW.WRMR.W_LW */
                    Local0 = \_SB.SMSR (RGBF)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RCID, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GCID (W_ID)
                    Release (ASMX)
                    Return (RGBF) /* \RMTW.RGBF */
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \RMTW.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \RMTW.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \RMTW.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                    ,   4, 
                HMLK,   1
            }

            Name (LCKS, Zero)
            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \RMTW.RHWM.W_BK */
                    HIDX = W_ID /* \RMTW.RHWM.W_ID */
                    Local0 = HDAT /* \RMTW.RHWM.HDAT */
                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \RMTW.WHWM.W_BK */
                    HIDX = W_ID /* \RMTW.WHWM.W_ID */
                    HDAT = W_DT /* \RMTW.WHWM.W_DT */
                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ATOH, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= 0x61) && (Arg0 <= 0x66)))
                {
                    Local0 = (Arg0 - 0x57)
                }

                If (((Arg0 >= 0x41) && (Arg0 <= 0x46)))
                {
                    Local0 = (Arg0 - 0x37)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x39)))
                {
                    Local0 = (Arg0 - 0x30)
                }

                Return (Local0)
            }

            Method (HTOA, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= Zero) && (Arg0 <= 0x09)))
                {
                    Local0 = (Arg0 + 0x30)
                }

                If (((Arg0 >= 0x0A) && (Arg0 <= 0x0F)))
                {
                    Local0 = (Arg0 - 0x0A)
                    Local0 += 0x41
                }

                Return (Local0)
            }

            Name (STRB, Buffer (0x0100){})
            Name (HEXB, Buffer (0x0100){})
            Method (STOH, 1, Serialized)
            {
                STRB = Arg0
                CreateByteField (Arg0, Zero, DCNT)
                DCNT >>= 0x02
                Local0 = Zero
                While ((Local0 < DCNT))
                {
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    Local3 = ATOH (DerefOf (STRB [Local1]))
                    Local3 <<= 0x04
                    Local3 += ATOH (DerefOf (STRB [Local2]))
                    HEXB [Local0] = Local3
                    Local0++
                }

                Return (HEXB) /* \RMTW.HEXB */
            }

            Method (HTOS, 2, Serialized)
            {
                HEXB = Arg0
                STRB [Zero] = (Arg1 << 0x02)
                STRB [One] = Zero
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    Local3 = DerefOf (HEXB [Local0])
                    Local4 = (Local3 >> 0x04)
                    Local4 &= 0x0F
                    Local3 &= 0x0F
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    STRB [Local1] = HTOA (Local4)
                    Local1++
                    STRB [Local1] = Zero
                    STRB [Local2] = HTOA (Local3)
                    Local2++
                    STRB [Local2] = Zero
                    Local0++
                }

                Return (STRB) /* \RMTW.STRB */
            }

            Name (IDBF, Buffer (0x60){})
            Name (OSBF, Buffer (0x82){})
            Name (ODBF, Buffer (0x20){})
            Name (B_CT, Zero)
            Name (B_BK, Zero)
            Name (B_ID, Zero)
            Name (B_DT, Zero)
            Method (BRIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \RMTW.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \RMTW.B_ID */
                        ODBF [Local1] = \_SB.PCI0.SBRG.SIO1.DATA
                        Local1++
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \RMTW.OSBF */
                }

                Return (Ones)
            }

            Method (BWIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \RMTW.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \RMTW.B_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = B_DT /* \RMTW.B_DT */
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (BRHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \RMTW.B_BK */
                        HIDX = B_ID /* \RMTW.B_ID */
                        ODBF [Local1] = HDAT /* \RMTW.BRHM.HDAT */
                        Local1++
                    }

                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \RMTW.OSBF */
                }

                Return (Ones)
            }

            Method (BWHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \RMTW.B_BK */
                        HIDX = B_ID /* \RMTW.B_ID */
                        HDAT = B_DT /* \RMTW.B_DT */
                    }

                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (ECBK, Zero)
            Method (BREC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (BWEC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }
        }
    }

    Name (TBIN, One)
    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (DOSS, 0xFF)
        Name (SMUV, 0x01)
        Name (MLBS, 0xFFFF)
        Name (SMNI, 0xF8)
        Name (SMND, 0xFC)
        Name (PCOR, 0xFF)
        Name (NTRD, 0x10)
        Name (CCD0, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (CCD1, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0SA, Package (0x08)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07
        })
        Name (C1SA, Package (0x08)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07
        })
        Name (C0HI, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C1HI, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0LO, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C1LO, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (TPKG, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0SZ, Zero)
        Name (C1SZ, Zero)
        Name (MCC0, 0xFF)
        Name (MCC1, 0xFF)
        Name (XCC0, One)
        Name (XCC1, One)
        Name (SWST, Zero)
        Name (WRBF, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (SLBF, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (BASE, 0xFFFFFFFF)
        Name (TRES, 0x042E)
        Name (HYST, 0x04)
        Name (HCNT, Zero)
        Name (INI0, Zero)
        Method (RM32, 4, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.SBRG.EC0_.RM32.VARR */
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
                ))
            Return (Local2)
        }

        OperationRegion (ECR2, SystemIO, 0x66, One)
        Field (ECR2, ByteAcc, NoLock, Preserve)
        {
            EC66,   8
        }

        OperationRegion (ECR3, SystemIO, 0x62, One)
        Field (ECR3, ByteAcc, NoLock, Preserve)
        {
            EC62,   8
        }

        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Method (ECRB, 1, Serialized)
        {
            Local0 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = Arg0
            OBFX ()
            Local0 = EC62 /* \_SB_.PCI0.SBRG.EC0_.EC62 */
            Return (Local0)
        }

        Method (ECWB, 2, Serialized)
        {
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = Arg0
            IBFX ()
            EC62 = Arg1
        }

        Method (ECCR, 1, Serialized)
        {
            ECWB (0xFF, Arg0)
        }

        Method (WM32, 5, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.SBRG.EC0_.WM32.VARR */
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = (Arg2 + Arg3)
            Local2 = (0x20 - Local2)
            Local2 = (((Local5 << Local2) & Local5) >> Local2)
            Local2 = ((Local2 >> Arg2) << Arg2)
            Local3 = (Arg4 << Arg2)
            Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
            VARR = Local4
        }

        Method (WSMU, 7, Serialized)
        {
            If ((SMUV == One))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109C4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109C8)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109CC)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D0)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D8)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10530)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
            ElseIf ((SMUV == 0x02))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10578)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10998)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1099C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109A0)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109A4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109A8)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109AC)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10528)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10578)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10578)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
        }

        Method (WTMU, 7, Serialized)
        {
            If ((SMUV == One))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A40)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A44)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A48)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A4C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10AD0)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10AD4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
            ElseIf ((SMUV == 0x02))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A80)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A88)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A8C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A90)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A94)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A98)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A9C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A20)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A80)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A80)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
        }

        OperationRegion (DBGP, SystemIO, 0x80, 0x08)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x24)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        Release (_GL)
                    }
                }
                ElseIf ((SMUV == 0x02))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WTMU (One, Zero, Zero, Zero, Zero, Zero, 0x17)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        Release (_GL)
                    }
                }
            }
        }

        Method (NOSP, 0, Serialized)
        {
            Notify (^^^^PLTF.C000, 0x85) // Device-Specific
            If ((NTRD > One))
            {
                Notify (^^^^PLTF.C001, 0x85) // Device-Specific
            }

            If ((NTRD > 0x02))
            {
                Notify (^^^^PLTF.C002, 0x85) // Device-Specific
            }

            If ((NTRD > 0x03))
            {
                Notify (^^^^PLTF.C003, 0x85) // Device-Specific
            }

            If ((NTRD > 0x04))
            {
                Notify (^^^^PLTF.C004, 0x85) // Device-Specific
            }

            If ((NTRD > 0x05))
            {
                Notify (^^^^PLTF.C005, 0x85) // Device-Specific
            }

            If ((NTRD > 0x06))
            {
                Notify (^^^^PLTF.C006, 0x85) // Device-Specific
            }

            If ((NTRD > 0x07))
            {
                Notify (^^^^PLTF.C007, 0x85) // Device-Specific
            }

            If ((NTRD > 0x08))
            {
                Notify (^^^^PLTF.C008, 0x85) // Device-Specific
            }

            If ((NTRD > 0x09))
            {
                Notify (^^^^PLTF.C009, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0A))
            {
                Notify (^^^^PLTF.C00A, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0B))
            {
                Notify (^^^^PLTF.C00B, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0C))
            {
                Notify (^^^^PLTF.C00C, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0D))
            {
                Notify (^^^^PLTF.C00D, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0E))
            {
                Notify (^^^^PLTF.C00E, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0F))
            {
                Notify (^^^^PLTF.C00F, 0x85) // Device-Specific
            }

            If ((NTRD > 0x10))
            {
                Notify (^^^^PLTF.C010, 0x85) // Device-Specific
            }

            If ((NTRD > 0x11))
            {
                Notify (^^^^PLTF.C011, 0x85) // Device-Specific
            }

            If ((NTRD > 0x12))
            {
                Notify (^^^^PLTF.C012, 0x85) // Device-Specific
            }

            If ((NTRD > 0x13))
            {
                Notify (^^^^PLTF.C013, 0x85) // Device-Specific
            }

            If ((NTRD > 0x14))
            {
                Notify (^^^^PLTF.C014, 0x85) // Device-Specific
            }

            If ((NTRD > 0x15))
            {
                Notify (^^^^PLTF.C015, 0x85) // Device-Specific
            }

            If ((NTRD > 0x16))
            {
                Notify (^^^^PLTF.C016, 0x85) // Device-Specific
            }

            If ((NTRD > 0x17))
            {
                Notify (^^^^PLTF.C017, 0x85) // Device-Specific
            }

            If ((NTRD > 0x18))
            {
                Notify (^^^^PLTF.C018, 0x85) // Device-Specific
            }

            If ((NTRD > 0x19))
            {
                Notify (^^^^PLTF.C019, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1A))
            {
                Notify (^^^^PLTF.C01A, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1B))
            {
                Notify (^^^^PLTF.C01B, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1C))
            {
                Notify (^^^^PLTF.C01C, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1D))
            {
                Notify (^^^^PLTF.C01D, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1E))
            {
                Notify (^^^^PLTF.C01E, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1F))
            {
                Notify (^^^^PLTF.C01F, 0x85) // Device-Specific
            }
        }

        Method (_QB1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x25)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                            If ((PCOR == One))
                            {
                                NOSP ()
                            }
                        }

                        Release (_GL)
                    }
                }
                ElseIf ((SMUV == 0x02))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WTMU (One, Zero, Zero, Zero, Zero, Zero, 0x18)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                            If ((PCOR == One))
                            {
                                NOSP ()
                            }
                        }

                        Release (_GL)
                    }
                }
            }
        }

        Method (WKDO, 0, Serialized)
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x25)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                        }

                        Release (_GL)
                    }
                }
                ElseIf ((SMUV == 0x02))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WTMU (One, Zero, Zero, Zero, Zero, Zero, 0x18)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                        }

                        Release (_GL)
                    }
                }
            }
        }

        Method (STMN, 1, Serialized)
        {
            If ((SMUV == One))
            {
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                    WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                    WM32 (0xE0000000, SMND, Zero, 0x20, One)
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                    WM32 (0xE0000000, SMND, Zero, 0x20, 0x04)
                }

                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMND, Zero, 0x20, One)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                WM32 (0xE0000000, SMND, Zero, 0x20, 0x03)
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A40)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1 = Zero
                    While (((Local0 == Zero) && (Local1 < 0x0F)))
                    {
                        Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                        Local1 += One
                    }

                    BASE = Local0
                    BASE += 0x017C
                }
            }
            ElseIf ((SMUV == 0x02))
            {
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A80)
                    WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                    WM32 (0xE0000000, SMND, Zero, 0x20, One)
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A20)
                    WM32 (0xE0000000, SMND, Zero, 0x20, 0x66)
                }

                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A80)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMND, Zero, 0x20, One)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A20)
                WM32 (0xE0000000, SMND, Zero, 0x20, 0x65)
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A88)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1 = Zero
                    While (((Local0 == Zero) && (Local1 < 0x0F)))
                    {
                        Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                        Local1 += One
                    }

                    BASE = Local0
                    BASE += 0x0320
                }
            }
        }

        Method (INIT, 0, Serialized)
        {
            CreateDWordField (WRBF, Zero, REAX)
            CreateDWordField (WRBF, 0x04, REBX)
            CreateDWordField (WRBF, 0x08, RECX)
            CreateDWordField (WRBF, 0x0C, REDX)
            Local0 = Zero
            While ((Local0 < 0x08))
            {
                Local3 = 0xC0010068
                If ((Local0 > 0x03))
                {
                    Local3 += One
                }

                WRBF = GMSR (Local3)
                Local1 = REAX /* \_SB_.PCI0.SBRG.EC0_.INIT.REAX */
                Local7 = (Local0 % 0x04)
                Local7 *= 0x08
                Local1 >>= Local7
                Local1 &= 0xFF
                CCD0 [Local0] = Local1
                If ((Local1 > One))
                {
                    C0SZ += One
                    If ((Local1 < MCC0))
                    {
                        MCC0 = Local1
                    }

                    If ((Local1 > XCC0))
                    {
                        XCC0 = Local1
                    }
                }

                Local3 = 0xC001006A
                If ((Local0 > 0x03))
                {
                    Local3 += One
                }

                WRBF = GMSR (Local3)
                Local2 = REAX /* \_SB_.PCI0.SBRG.EC0_.INIT.REAX */
                Local2 >>= Local7
                Local2 &= 0xFF
                CCD1 [Local0] = Local2
                If ((Local2 > One))
                {
                    C1SZ += One
                    If ((Local2 < MCC1))
                    {
                        MCC1 = Local2
                    }

                    If ((Local2 > XCC1))
                    {
                        XCC1 = Local2
                    }
                }

                If (((Local1 <= One) && (Local2 <= One)))
                {
                    Break
                }

                Local0 += One
            }

            If ((C1SZ > Zero))
            {
                STMN (Zero)
                Local0 = Zero
                While ((Local0 < C0SZ))
                {
                    Local5 = DerefOf (CCD0 [Local0])
                    TPKG [Local0] = Local5
                    C0LO [Local0] = Local5
                    C0HI [Local0] = Local5
                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C0SZ))
                {
                    Local1 = (Local0 + One)
                    While ((Local1 < C0SZ))
                    {
                        Local2 = DerefOf (TPKG [Local0])
                        Local3 = DerefOf (TPKG [Local1])
                        If ((Local2 < Local3))
                        {
                            TPKG [Local0] = Local3
                            TPKG [Local1] = Local2
                            Local2 = DerefOf (C0SA [Local0])
                            Local3 = DerefOf (C0SA [Local1])
                            C0SA [Local0] = Local3
                            C0SA [Local1] = Local2
                        }

                        Local1 += One
                    }

                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C1SZ))
                {
                    Local2 = DerefOf (CCD1 [Local0])
                    TPKG [Local0] = Local2
                    C1LO [Local0] = Local2
                    C1HI [Local0] = Local2
                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C1SZ))
                {
                    Local1 = (Local0 + One)
                    While ((Local1 < C1SZ))
                    {
                        Local2 = DerefOf (TPKG [Local0])
                        Local3 = DerefOf (TPKG [Local1])
                        If ((Local2 < Local3))
                        {
                            TPKG [Local0] = Local3
                            TPKG [Local1] = Local2
                            Local2 = DerefOf (C1SA [Local0])
                            Local3 = DerefOf (C1SA [Local1])
                            C1SA [Local0] = Local3
                            C1SA [Local1] = Local2
                        }

                        Local1 += One
                    }

                    Local0 += One
                }

                If ((XCC1 > XCC0))
                {
                    If ((MCC1 <= XCC0))
                    {
                        Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                        Local0 += One
                        Local2 = DerefOf (C1SA [(C1SZ - One)])
                        Local1 = DerefOf (CCD1 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C1LO [Local2] = Local1
                        If ((C1SZ > One))
                        {
                            Local1 = (C1SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C1SA [Local1])
                                Local3 = DerefOf (C1SA [(Local1 + One)])
                                If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C1LO [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C1LO [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }
                        }

                        If ((MCC0 <= XCC1))
                        {
                            Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                            Local0 += One
                            Local2 = DerefOf (C0SA [(C0SZ - One)])
                            Local1 = DerefOf (CCD0 [Local2])
                            Local1 += Local0
                            If ((Local1 > 0xFF))
                            {
                                Local1 = 0xFF
                            }

                            C0HI [Local2] = Local1
                            If ((C0SZ > One))
                            {
                                Local1 = (C0SZ - 0x02)
                                While ((Local1 > Zero))
                                {
                                    Local2 = DerefOf (C0SA [Local1])
                                    Local3 = DerefOf (C0SA [(Local1 + One)])
                                    If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                        )))
                                    {
                                        Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                        Local4 += One
                                        Local5 = DerefOf (C0HI [Local2])
                                        Local5 += Local4
                                        If ((Local5 > 0xFF))
                                        {
                                            Local5 = 0xFF
                                        }

                                        C0HI [Local2] = Local5
                                    }

                                    Local1 -= One
                                }

                                Local1 = Zero
                                Local2 = DerefOf (C0SA [Local1])
                                Local3 = DerefOf (C0SA [(Local1 + One)])
                                If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C0HI [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C0HI [Local2] = Local5
                                }
                            }
                        }
                    }
                    ElseIf ((MCC0 <= XCC1))
                    {
                        Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                        Local0 += One
                        Local2 = DerefOf (C0SA [(C0SZ - One)])
                        Local1 = DerefOf (CCD0 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C0HI [Local2] = Local1
                        If ((C0SZ > One))
                        {
                            Local1 = (C0SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C0SA [Local1])
                                Local3 = DerefOf (C0SA [(Local1 + One)])
                                If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C0HI [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C0HI [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C0SA [Local1])
                            Local3 = DerefOf (C0SA [(Local1 + One)])
                            If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C0HI [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C0HI [Local2] = Local5
                            }
                        }
                    }
                }
                ElseIf ((MCC0 <= XCC1))
                {
                    Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                    Local0 += One
                    Local2 = DerefOf (C0SA [(C0SZ - One)])
                    Local1 = DerefOf (CCD0 [Local2])
                    Local1 += Local0
                    If ((Local1 > 0xFF))
                    {
                        Local1 = 0xFF
                    }

                    C0HI [Local2] = Local1
                    If ((C0SZ > One))
                    {
                        Local1 = (C0SZ - 0x02)
                        While ((Local1 > Zero))
                        {
                            Local2 = DerefOf (C0SA [Local1])
                            Local3 = DerefOf (C0SA [(Local1 + One)])
                            If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C0HI [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C0HI [Local2] = Local5
                            }

                            Local1 -= One
                        }

                        Local1 = Zero
                        Local2 = DerefOf (C0SA [Local1])
                        Local3 = DerefOf (C0SA [(Local1 + One)])
                        If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                            )))
                        {
                            Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                            Local4 += One
                            Local5 = DerefOf (C0HI [Local2])
                            Local5 += Local4
                            If ((Local5 > 0xFF))
                            {
                                Local5 = 0xFF
                            }

                            C0HI [Local2] = Local5
                        }
                    }

                    If ((MCC1 <= XCC0))
                    {
                        Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                        Local0 += One
                        Local2 = DerefOf (C1SA [(C1SZ - One)])
                        Local1 = DerefOf (CCD1 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C1LO [Local2] = Local1
                        If ((C1SZ > One))
                        {
                            Local1 = (C1SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C1SA [Local1])
                                Local3 = DerefOf (C1SA [(Local1 + One)])
                                If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C1LO [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C1LO [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }
                        }
                    }
                }
                ElseIf ((MCC1 <= XCC0))
                {
                    Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                    Local0 += One
                    Local2 = DerefOf (C1SA [(C1SZ - One)])
                    Local1 = DerefOf (C1LO [Local2])
                    Local1 += Local0
                    If ((Local1 > 0xFF))
                    {
                        Local1 = 0xFF
                    }

                    C1LO [Local2] = Local1
                    If ((C1SZ > One))
                    {
                        Local1 = (C1SZ - 0x02)
                        While ((Local1 > Zero))
                        {
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }

                            Local1 -= One
                        }

                        Local1 = Zero
                        Local2 = DerefOf (C1SA [Local1])
                        Local3 = DerefOf (C1SA [(Local1 + One)])
                        If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                            )))
                        {
                            Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                            Local4 += One
                            Local5 = DerefOf (C1LO [Local2])
                            Local5 += Local4
                            If ((Local5 > 0xFF))
                            {
                                Local5 = 0xFF
                            }

                            C1LO [Local2] = Local5
                        }
                    }
                }

                Local0 = DerefOf (C0LO [One])
                Local1 = Local0
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C0LO [One] = Local0
                }

                Local0 = DerefOf (C1LO [One])
                Local1 = Local0
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C1LO [One] = Local0
                }

                Local0 = DerefOf (C0HI [One])
                Local1 = Local0
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C0HI [One] = Local0
                }

                Local0 = DerefOf (C1HI [One])
                Local1 = Local0
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C1HI [One] = Local0
                }
            }
            Else
            {
                SWST = 0xFF
            }
        }

        Method (QSW0, 1, Serialized)
        {
            CreateDWordField (WRBF, Zero, REAX)
            CreateDWordField (WRBF, 0x04, REBX)
            CreateDWordField (WRBF, 0x08, RECX)
            CreateDWordField (WRBF, 0x0C, REDX)
            Local0 = Zero
            REAX = Zero
            While ((Local0 < C0SZ))
            {
                If ((Arg0 == One))
                {
                    Local1 = DerefOf (C0HI [Local0])
                }
                Else
                {
                    Local1 = DerefOf (C0LO [Local0])
                }

                Local7 = Local0
                Local7 %= 0x04
                Local7 *= 0x08
                Local1 <<= Local7
                REAX |= Local1
                If (((Local0 == 0x03) || (Local0 == (C0SZ - One))))
                {
                    Local3 = 0xC0010068
                    If ((Local0 > 0x03))
                    {
                        Local3 += One
                    }

                    RECX = Local3
                    REDX = Zero
                    SMSR (WRBF)
                    REAX = Zero
                }

                Local0 += One
            }

            Local0 = Zero
            REAX = Zero
            While ((Local0 < C1SZ))
            {
                If ((Arg0 == One))
                {
                    Local1 = DerefOf (C1HI [Local0])
                }
                Else
                {
                    Local1 = DerefOf (C1LO [Local0])
                }

                Local7 = Local0
                Local7 %= 0x04
                Local7 *= 0x08
                Local1 <<= Local7
                REAX |= Local1
                If (((Local0 == 0x03) || (Local0 == (C1SZ - One))))
                {
                    Local3 = 0xC001006A
                    If ((Local0 > 0x03))
                    {
                        Local3 += One
                    }

                    RECX = Local3
                    REDX = Zero
                    SMSR (WRBF)
                    REAX = Zero
                }

                Local0 += One
            }

            SWST = Arg0
        }

        Method (_QE0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((Acquire (_GL, 0x03E8) == Zero))
            {
                If ((((HCNT >= HYST) || (SWST == 0xFF)) || (SWST == 
                    One)))
                {
                    Local0 = ECRB (0xFF)
                    ECCR (One)
                    ECWB (0xDB, Zero)
                    ECCR (Local0)
                }

                If (((SWST == Zero) && (INI0 == Zero)))
                {
                    STMN (Zero)
                    INIT ()
                    INI0 = One
                }

                If (((SWST != One) && (SWST != 0xFF)))
                {
                    If ((TRES == Zero))
                    {
                        If ((HCNT >= HYST))
                        {
                            QSW0 (One)
                            NOSP ()
                            If ((SMUV == One))
                            {
                                WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                            }

                            HCNT = Zero
                        }

                        HCNT += One
                    }
                    Else
                    {
                        OperationRegion (MEMR, SystemMemory, BASE, 0x04)
                        Field (MEMR, DWordAcc, NoLock, Preserve)
                        {
                            MERD,   32
                        }

                        Local5 = Zero
                        Local0 = Zero
                        While ((Local5 < 0x03))
                        {
                            STMN (One)
                            Local5 += One
                            Local1 = MERD /* \_SB_.PCI0.SBRG.EC0_._QE0.MERD */
                            Local0 += Local1
                        }

                        Divide (Local0, 0x002DC6C0, Local7, Local6)
                        If ((Local6 > TRES))
                        {
                            If ((HCNT >= HYST))
                            {
                                QSW0 (One)
                                NOSP ()
                                If ((SMUV == One))
                                {
                                    WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                                }

                                HCNT = Zero
                            }

                            HCNT += One
                        }
                    }
                }
                Else
                {
                    HCNT = Zero
                }

                Release (_GL)
            }
        }

        Method (_QE1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((Acquire (_GL, 0x03E8) == Zero))
            {
                If ((((HCNT >= HYST) || (SWST == 0xFF)) || (SWST == 
                    0x02)))
                {
                    Local0 = ECRB (0xFF)
                    ECCR (One)
                    ECWB (0xDB, Zero)
                    ECCR (Local0)
                }

                If (((SWST == Zero) && (INI0 == Zero)))
                {
                    STMN (Zero)
                    INIT ()
                    INI0 = One
                }

                If (((SWST != 0x02) && (SWST != 0xFF)))
                {
                    If ((TRES == Zero))
                    {
                        If ((HCNT >= HYST))
                        {
                            QSW0 (0x02)
                            NOSP ()
                            If ((SMUV == One))
                            {
                                WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                            }

                            HCNT = Zero
                        }

                        HCNT += One
                    }
                    Else
                    {
                        OperationRegion (MEMR, SystemMemory, BASE, 0x04)
                        Field (MEMR, DWordAcc, NoLock, Preserve)
                        {
                            MERD,   32
                        }

                        Local5 = Zero
                        Local0 = Zero
                        While ((Local5 < 0x03))
                        {
                            STMN (One)
                            Local5 += One
                            Local1 = MERD /* \_SB_.PCI0.SBRG.EC0_._QE1.MERD */
                            Local0 += Local1
                        }

                        Divide (Local0, 0x002DC6C0, Local7, Local6)
                        If ((Local6 <= TRES))
                        {
                            If ((HCNT >= HYST))
                            {
                                QSW0 (0x02)
                                NOSP ()
                                If ((SMUV == One))
                                {
                                    WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                                }

                                HCNT = Zero
                            }

                            HCNT += One
                        }
                    }
                }
                Else
                {
                    HCNT = Zero
                }

                Release (_GL)
            }
        }

        Method (DOSW, 1, NotSerialized)
        {
            WKDO ()
        }
    }

    Name (BDID, 0x00)
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x06)
            {
                One, 
                0x02, 
                One, 
                0x02, 
                0x03, 
                0x04
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = Zero
                Local2 = Zero
                If ((Arg0 <= 0x02))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }
                ElseIf ((Local1 & (One << Local0)))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x03
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC0.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x2008
                Local2 = (Local1 & 0x03)
                Local3 = ((Local1 >> 0x08) & 0x0F)
                If ((Arg0 <= 0x02))
                {
                    If ((Local3 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local2 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC0.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x03))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x03))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x02))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x02))
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x04))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x04))
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x06)
            {
                0x05, 
                0x06, 
                0x05, 
                0x06, 
                0x07, 
                0x08
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = 0x02
                Local2 = 0x02
                If ((Arg0 <= 0x02))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }
                ElseIf ((Local1 & (One << Local0)))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x03
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC1.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x2008
                Local2 = ((Local1 >> 0x02) & 0x03)
                Local3 = ((Local1 >> 0x0C) & 0x0F)
                If ((Arg0 <= 0x02))
                {
                    If ((Local3 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local2 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC1.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x03))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x03))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x02))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x02))
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x04))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x04))
                }
            }
        }
    }

    Scope (_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x04)
            {
                0x09, 
                0x0A, 
                0x0B, 
                0x0C
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = Zero
                Local2 = Zero
                If ((Local2 & (One << Local0)))
                {
                    If ((Local1 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = 0x03
                    }
                    Else
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }

                Return (PCKG) /* \_SB_.PCI0.GP19.XHC2.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x2008
                Local2 = ((Local1 >> 0x04) & 0x03)
                Local3 = ((Local1 >> 0x10) & 0x0F)
                If ((Arg0 <= Zero))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local3 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP19.XHC2.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }
        }
    }

    OperationRegion (CPVS, SystemMemory, 0x75F03000, 0x0087)
    Field (CPVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        G000,   8, 
        Offset (0x01), 
        G001,   8, 
        Offset (0x02), 
        G002,   8, 
        Offset (0x03), 
        G003,   8, 
        Offset (0x04), 
        G004,   32, 
        Offset (0x08), 
        G005,   16, 
        Offset (0x0A), 
        G006,   16, 
        Offset (0x0C), 
        G007,   32, 
        Offset (0x10), 
        G008,   32, 
        Offset (0x14), 
        G009,   32, 
        Offset (0x18), 
        G00A,   32, 
        Offset (0x1C), 
        G00B,   64, 
        Offset (0x24), 
        G00C,   64, 
        Offset (0x2C), 
        G00D,   64, 
        Offset (0x34), 
        G00E,   64, 
        Offset (0x3C), 
        G00F,   16, 
        Offset (0x3E), 
        G010,   16, 
        Offset (0x40), 
        G011,   8, 
        Offset (0x41), 
        G012,   32, 
        Offset (0x45), 
        G013,   32, 
        Offset (0x49), 
        G014,   32, 
        Offset (0x4D), 
        G015,   32, 
        Offset (0x51), 
        G016,   32, 
        Offset (0x55), 
        G017,   8, 
        Offset (0x56), 
        G018,   32, 
        Offset (0x5A), 
        G019,   32, 
        Offset (0x5E), 
        G01A,   32, 
        Offset (0x62), 
        G01B,   32, 
        Offset (0x66), 
        G01C,   32, 
        Offset (0x6A), 
        G01D,   8, 
        Offset (0x6B), 
        G01E,   8, 
        Offset (0x6C), 
        G01F,   8, 
        Offset (0x6D), 
        G020,   8, 
        Offset (0x6E), 
        G021,   8, 
        Offset (0x6F), 
        G022,   8, 
        Offset (0x70), 
        G023,   8, 
        Offset (0x71), 
        G024,   8, 
        Offset (0x72), 
        G025,   8, 
        Offset (0x73), 
        G026,   8, 
        Offset (0x74), 
        G027,   8, 
        Offset (0x75), 
        G028,   32, 
        Offset (0x79), 
        G029,   32, 
        Offset (0x7D), 
        G02A,   32, 
        Offset (0x81), 
        G02B,   32, 
        Offset (0x85), 
        G02C,   8, 
        Offset (0x86), 
        G02D,   8
    }

    Name (PWVA, 0xFFFFFFFF)
    Method (PWGS, 1, NotSerialized)
    {
        Local0 = M013 (G015, Zero, G016, One)
        If ((Local0 == One))
        {
            PWVA = Zero
            M014 (G015, Zero, G016, One, Zero)
        }

        Local0 = Arg0
        Local1 = (One << Local0)
        Local2 = (Local1 & PWVA) /* \PWVA */
        If ((Local2 == Zero))
        {
            PWVA |= Local1 /* \PWVA */
            M460 ("  OEM-ASL PWGS 0x%X don\'t Unlock from S0I3, PWVA = 0x%X\n", Arg0, PWVA, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        Return (One)
    }

    Method (UPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-UPWD Unlock Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (SPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-SPWD Save Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    If ((G002 != One))
    {
        Scope (\_SB.PCI0.GPP0)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }

        Scope (\_SB.PCI0.GPP2)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }

        Scope (\_GPE)
        {
            Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L08 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (G002 == 
        0x04)))){}
    If ((G002 != 0x03))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
        }
    }

    If (((G002 != 0x03) && (G000 == One)))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G004 != 0x43FA1022))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP60.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (PTGN, Package (0x16)
                {
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0x15, 
                    0x16, 
                    0x17, 
                    0x18, 
                    0x19, 
                    0x1A
                })
                Method (GUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local5 = 0x000FFC3C
                    If ((Local5 & (One << Local0)))
                    {
                        If ((Arg0 <= 0x06))
                        {
                            PCKG [Zero] = 0xFF
                            PCKG [One] = 0x03
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x07)
                            If ((Local5 & (One << Local1)))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x03
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = Zero
                            }
                        }
                    }

                    If ((Arg0 > 0x06))
                    {
                        Local2 = (Arg0 - 0x07)
                        If ((One & (One << Local2)))
                        {
                            Local3 = 0x03
                            If (Local3)
                            {
                                Local4 = Zero
                                While (Local3)
                                {
                                    If ((Local3 & One))
                                    {
                                        Local4 += One
                                    }

                                    Local3 >>= One
                                }

                                If ((Local4 > One))
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x0A
                                }
                                Else
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x09
                                }
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x08
                            }
                        }
                    }
                    Else
                    {
                        Local2 = (Arg0 - One)
                        Local3 = 0x03
                        If ((Local3 & (One << Local2)))
                        {
                            Local4 = Zero
                            While (Local3)
                            {
                                If ((Local3 & One))
                                {
                                    Local4 += One
                                }

                                Local3 >>= One
                            }

                            If ((Local4 > One))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x0A
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x09
                            }
                        }
                    }

                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RHUB.GUPC.PCKG */
                }

                Method (GPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local1 = 0x000FFC3C
                    Local1 |= 0x0103
                    If ((Local1 & (One << Local0)))
                    {
                        VISI = One
                    }
                    Else
                    {
                        VISI = Zero
                    }

                    If ((0x0103 & (One << Local0)))
                    {
                        Local2 = 0x03
                        If ((Arg1 == One))
                        {
                            Local2 &= 0xFFFFFFFD
                        }

                        If ((Local2 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                        ElseIf ((0x0100 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                    }
                    Else
                    {
                        Local3 = (Arg0 - One)
                    }

                    GPOS = DerefOf (PTGN [Local3])
                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RHUB.GPLD.PCKG */
                }

                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (One, One))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x07, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x07, One))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x08, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x08, One))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x03, One))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x09, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x09, One))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x04, One))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0A, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0A, One))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x05, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x05, One))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0B, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0B, One))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x06, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x06, One))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0C, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0C, One))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0D, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0D, One))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0E, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0E, One))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0F, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0F, One))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x10, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x10, One))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x11, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x11, One))
                    }
                }

                Device (POTI)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x12, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x12, One))
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && (G000 == 0x02)))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Device (XH00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }

            Device (EP01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }

            Device (UP02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (DP80)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP90)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GPP7.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (PTGN, Package (0x16)
                {
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0x15, 
                    0x16, 
                    0x17, 
                    0x18, 
                    0x19, 
                    0x1A
                })
                Method (GUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local5 = 0x000FFC3C
                    If ((Local5 & (One << Local0)))
                    {
                        If ((Arg0 <= 0x06))
                        {
                            PCKG [Zero] = 0xFF
                            PCKG [One] = 0x03
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x07)
                            If ((Local5 & (One << Local1)))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x03
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = Zero
                            }
                        }
                    }

                    If ((Arg0 > 0x06))
                    {
                        Local2 = (Arg0 - 0x07)
                        If ((One & (One << Local2)))
                        {
                            Local3 = 0x03
                            If (Local3)
                            {
                                Local4 = Zero
                                While (Local3)
                                {
                                    If ((Local3 & One))
                                    {
                                        Local4 += One
                                    }

                                    Local3 >>= One
                                }

                                If ((Local4 > One))
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x0A
                                }
                                Else
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x09
                                }
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x08
                            }
                        }
                    }
                    Else
                    {
                        Local2 = (Arg0 - One)
                        Local3 = 0x03
                        If ((Local3 & (One << Local2)))
                        {
                            Local4 = Zero
                            While (Local3)
                            {
                                If ((Local3 & One))
                                {
                                    Local4 += One
                                }

                                Local3 >>= One
                            }

                            If ((Local4 > One))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x0A
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x09
                            }
                        }
                    }

                    Return (PCKG) /* \_SB_.PCI0.GPP7.XH00.RHUB.GUPC.PCKG */
                }

                Method (GPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local1 = 0x000FFC3C
                    Local1 |= 0x0103
                    If ((Local1 & (One << Local0)))
                    {
                        VISI = One
                    }
                    Else
                    {
                        VISI = Zero
                    }

                    If ((0x0103 & (One << Local0)))
                    {
                        Local2 = 0x03
                        If ((Arg1 == One))
                        {
                            Local2 &= 0xFFFFFFFD
                        }

                        If ((Local2 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                        ElseIf ((0x0100 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                    }
                    Else
                    {
                        Local3 = (Arg0 - One)
                    }

                    GPOS = DerefOf (PTGN [Local3])
                    Return (PCKG) /* \_SB_.PCI0.GPP7.XH00.RHUB.GPLD.PCKG */
                }

                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (One, One))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x07, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x07, One))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x08, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x08, One))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x03, One))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x09, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x09, One))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x04, One))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0A, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0A, One))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x05, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x05, One))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0B, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0B, One))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x06, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x06, One))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0C, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0C, One))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0D, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0D, One))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0E, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0E, One))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0F, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0F, One))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x10, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x10, One))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x11, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x11, One))
                    }
                }

                Device (POTI)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x12, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x12, One))
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G002 != 0x04))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 != Zero))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (GPB1, 0x5A5A5A5A)
                Name (IOR0, 0x5A5A5A5A)
                Name (IOR1, 0x5A5A5A5A)
                Name (IOR2, 0x5A5A5A5A)
                Name (IOR3, 0x5A5A5A5A)
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (PTGN, Package (0x16)
                {
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x25, 
                    0x26, 
                    0x27, 
                    0x28, 
                    0x29, 
                    0x2A, 
                    0x2B, 
                    0x2C, 
                    0x2D, 
                    0x2E
                })
                Method (GUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Name (PGTB, Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 >= 0x07))
                    {
                        Local0 = (Arg0 - 0x07)
                        If ((0x0300 & (One << Local0)))
                        {
                            Return (PGTB) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GUPC.PGTB */
                        }
                    }

                    If ((Arg0 >= 0x07))
                    {
                        Local0 = (Arg0 + One)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    If ((0x00043C3C & (One << Local0)))
                    {
                        If ((Arg0 <= 0x06))
                        {
                            PCKG [Zero] = 0xFF
                            PCKG [One] = 0x03
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x07)
                            If ((0x00043C3C & (One << Local1)))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x03
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = Zero
                            }
                        }
                    }

                    If ((Arg0 >= 0x07))
                    {
                        Local2 = (Arg0 - 0x07)
                        If ((One & (One << Local2)))
                        {
                            Local3 = 0x03
                            If (Local3)
                            {
                                Local4 = Zero
                                While (Local3)
                                {
                                    If ((Local3 & One))
                                    {
                                        Local4 += One
                                    }

                                    Local3 >>= One
                                }

                                If ((Local4 > One))
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x0A
                                }
                                Else
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x09
                                }
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x08
                            }
                        }
                    }
                    Else
                    {
                        Local2 = (Arg0 - One)
                        Local3 = 0x03
                        If ((Local3 & (One << Local2)))
                        {
                            Local4 = Zero
                            While (Local3)
                            {
                                If ((Local3 & One))
                                {
                                    Local4 += One
                                }

                                Local3 >>= One
                            }

                            If ((Local4 > One))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x0A
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x09
                            }
                        }
                    }

                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GUPC.PCKG */
                }

                Method (GPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    If ((Arg0 >= 0x07))
                    {
                        Local0 = (Arg0 + One)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local1 = 0x00043C3C
                    Local1 |= 0x0103
                    Local1 |= 0x00030000
                    If ((Local1 & (One << Local0)))
                    {
                        VISI = One
                    }
                    Else
                    {
                        VISI = Zero
                    }

                    If ((0x0103 & (One << Local0)))
                    {
                        Local2 = 0x03
                        If ((Arg1 == One))
                        {
                            Local2 &= 0xFFFFFFFD
                        }

                        If ((Local2 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                        ElseIf ((0x0100 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                    }
                    Else
                    {
                        Local3 = (Arg0 - One)
                    }

                    GPOS = DerefOf (PTGN [Local3])
                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GPLD.PCKG */
                }

                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (One, One))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x07, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x07, One))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x08, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x08, One))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x03, One))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x09, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x09, One))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x04, One))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0A, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0A, One))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x05, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x05, One))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0B, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0B, One))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x06, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x06, One))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0C, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0C, One))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0D, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0D, One))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0E, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0E, One))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0F, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0F, One))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x10, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x10, One))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x11, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x11, One))
                    }
                }

                Device (POTI)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x12, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x12, One))
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00)
    {
        Device (TBDP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Device (TBDC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (TBTD)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0xFF, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x0,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "TOP",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "ROUND",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Device (XHCI)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (SS01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.TBTD.XHCI.RHUB.SS01._UPC.UPCP */
                        }
                    }

                    Device (SS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.TBTD.XHCI.RHUB.SS02._UPC.UPCP */
                        }
                    }

                    Device (SS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0x09, 
                            Zero, 
                            Zero
                        })
                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                        {
                            Local0 = 0x0F
                            Return (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GPLD (Local0, One))
                        }
                    }

                    Device (SS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0x09, 
                            Zero, 
                            Zero
                        })
                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                        {
                            Local0 = 0x10
                            Return (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GPLD (Local0, One))
                        }
                    }
                }
            }
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 == Zero))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Device (EP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }
        }
    }

    If ((G002 != 0x03))
    {
        Scope (\_GPE)
        {
            Method (_L02, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L02 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            }
        }
    }

    Scope (\_SB.PCI0.GP17)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (DOSA, Zero)
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DOSA = Arg0
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x07)
            {
                0x00010110, 
                0x00010210, 
                0x00010220, 
                0x00010230, 
                0x00010240, 
                0x00031000, 
                0x00032000
            })
        }

        Device (LCD)
        {
            Name (_ADR, 0x0110)  // _ADR: Address
            Name (BCLB, Package (0x34)
            {
                0x5A, 
                0x3C, 
                0x02, 
                0x04, 
                0x06, 
                0x08, 
                0x0A, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x16, 
                0x18, 
                0x1A, 
                0x1C, 
                0x1E, 
                0x20, 
                0x22, 
                0x24, 
                0x26, 
                0x28, 
                0x2A, 
                0x2C, 
                0x2E, 
                0x30, 
                0x32, 
                0x34, 
                0x36, 
                0x38, 
                0x3A, 
                0x3C, 
                0x3E, 
                0x40, 
                0x42, 
                0x44, 
                0x46, 
                0x48, 
                0x4A, 
                0x4C, 
                0x4E, 
                0x50, 
                0x52, 
                0x54, 
                0x56, 
                0x58, 
                0x5A, 
                0x5C, 
                0x5E, 
                0x60, 
                0x62, 
                0x64
            })
            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                AFN7 (Local0)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x1A, 
            0x04
        })
    }

    Scope (\_GPE)
    {
        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x0E)
    Name (UR2I, 0x05)
    Name (UR3I, 0x0F)
    Name (UR4I, 0x10)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x16)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (\_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (\_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            Offset (0x04), 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            Offset (0x16), 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            Offset (0x20), 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            Offset (0x4B), 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            Offset (0x58), 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            Offset (0x69), 
            IM69,   8, 
            Offset (0x6A), 
            IM6A,   8, 
            Offset (0x6B), 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PGA0,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PGA0 = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PGA0 = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            Offset (0xF5), 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            Offset (0xF9), 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2D)
                    IRQNoFlags (_Y2E)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y2D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y2D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y2E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2F)
                    IRQNoFlags (_Y30)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y30._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y31)
                    IRQNoFlags (_Y32)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y31._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y31._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y32._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y33)
                    IRQNoFlags (_Y34)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y33._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y33._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y34._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    If ((G027 == One))
    {
        Scope (\_GPE)
        {
            Name (ETP0, 0x55)
            Name (ETP1, 0x55)
            Name (ETP2, 0x55)
            Name (ETP3, 0x55)
            Name (ETP4, 0x55)
            Name (ETP5, 0x55)
            Name (ETP6, 0x55)
            Name (ETP7, 0x55)
            Name (ETP8, 0x55)
            Name (ETP9, 0x55)
            Name (ETPA, 0x55)
            Name (ETPB, 0x55)
            Name (ETPC, 0x55)
            Name (ETPD, 0x55)
            Name (ETPE, 0x55)
            Name (ETPF, 0x55)
            Name (ETPG, 0x55)
            Name (ETPH, 0x55)
            Name (ET17, 0x55)
            Name (ET18, 0x55)
            Name (ET19, 0x55)
            Method (_E10, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._E10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M644 (0xFED80200, 0x04, 0x10)
                If ((\_GPE.ETP0 != 0xFF))
                {
                    \_GPE.ETP0 = (M017 (Zero, One, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP0 == One) || (\_GPE.ETP0 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP0))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == One))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP0, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP0, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP1 != 0xFF))
                {
                    \_GPE.ETP1 = (M017 (Zero, One, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP1 == One) || (\_GPE.ETP1 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP1))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP2 != 0xFF))
                {
                    \_GPE.ETP2 = (M017 (Zero, One, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP2 == One) || (\_GPE.ETP2 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP2))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP3 != 0xFF))
                {
                    \_GPE.ETP3 = (M017 (Zero, One, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP3 == One) || (\_GPE.ETP3 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP3))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP4 != 0xFF))
                {
                    \_GPE.ETP4 = (M017 (Zero, One, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP4 == One) || (\_GPE.ETP4 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP4))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP5 != 0xFF))
                {
                    \_GPE.ETP5 = (M017 (Zero, One, 0x06, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP5 == One) || (\_GPE.ETP5 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP5))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP5, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP6 != 0xFF))
                {
                    \_GPE.ETP6 = (M017 (Zero, One, 0x07, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP6 == One) || (\_GPE.ETP6 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP6))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP6, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP7 != 0xFF))
                {
                    \_GPE.ETP7 = (M017 (Zero, 0x02, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP7 == One) || (\_GPE.ETP7 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP7))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x03))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP7, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x04))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP7, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP7, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP8 != 0xFF))
                {
                    \_GPE.ETP8 = (M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP8 == One) || (\_GPE.ETP8 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP8))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x02))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP8, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP8, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP9 != 0xFF))
                {
                    \_GPE.ETP9 = (M017 (Zero, 0x03, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP9 == One) || (\_GPE.ETP9 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP9))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP9, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPA != 0xFF))
                {
                    \_GPE.ETPA = (M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPA == One) || (\_GPE.ETPA == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPA))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPA, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPB != 0xFF))
                {
                    \_GPE.ETPB = (M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPB == One) || (\_GPE.ETPB == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPB))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPB, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPC != 0xFF))
                {
                    \_GPE.ETPC = (M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPC == One) || (\_GPE.ETPC == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPC))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPC, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPD != 0xFF))
                {
                    \_GPE.ETPD = (M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPD == One) || (\_GPE.ETPD == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPD))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPD, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPE != 0xFF))
                {
                    \_GPE.ETPE = (M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPE == One) || (\_GPE.ETPE == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPE))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPE, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPF != 0xFF))
                {
                    \_GPE.ETPF = (M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPF == One) || (\_GPE.ETPF == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPF))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPF, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPG != 0xFF))
                {
                    \_GPE.ETPG = (M017 (Zero, 0x04, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPG == One) || (\_GPE.ETPG == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPG))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPG, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPG, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPH != 0xFF))
                {
                    \_GPE.ETPH = (M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPH == One) || (\_GPE.ETPH == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPH))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPH, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPH, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET17 != 0xFF))
                {
                    \_GPE.ET17 = (M017 (Zero, 0x08, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET17 == One) || (\_GPE.ET17 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP17))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET18 != 0xFF))
                {
                    \_GPE.ET18 = (M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET18 == One) || (\_GPE.ET18 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP18))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP18, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET19 != 0xFF))
                {
                    \_GPE.ET19 = (M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET19 == One) || (\_GPE.ET19 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP19))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP00)
    {
        Device (WIFI)
        {
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (MPCI, PCI_Config, Zero, 0x10)
            Field (MPCI, AnyAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                MPVD,   32
            }

            Method (MWST, 0, Serialized)
            {
                If (CondRefOf (MPVD))
                {
                    Switch (ToInteger (MPVD))
                    {
                        Case (0x060814C3)
                        {
                            Return (One)
                        }
                        Case (0x061614C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (MTCL, 0, Serialized)
            {
                If (MWST ())
                {
                    Name (MWCL, Package (0x13)
                    {
                        0x4D, 
                        0x54, 
                        0x43, 
                        0x4C, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    MWCL [0x05] = W6GS /* External reference */
                    MWCL [0x06] = W6C1 /* External reference */
                    MWCL [0x07] = W6C2 /* External reference */
                    MWCL [0x08] = W6C3 /* External reference */
                    MWCL [0x09] = W6C4 /* External reference */
                    MWCL [0x0A] = W6C5 /* External reference */
                    MWCL [0x0B] = W6C6 /* External reference */
                    Return (MWCL) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.WIFI.MTCL.MWCL */
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VDID,   32
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* External reference */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }
    }

    Scope (\_SB.I2CA)
    {
        Device (CCG2)
        {
            Name (_HID, "CYP0002")  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0008, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x005A
                    }
                GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x005A
                    }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TBIN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_SB.I2CA)
    {
        Device (PDEV)
        {
            Name (_HID, "ITE8853")  // _HID: Hardware ID
            Name (_CID, "PNP0CA0")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0054
                        }
                    GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0054
                        }
                })
                Return (SBUF) /* \_SB_.I2CA.PDEV._CRS.SBUF */
            }
        }
    }

    Scope (\_SB.I2CA)
    {
        Device (RHPX)
        {
            Name (_HID, "MSFT8000")  // _HID: Hardware ID
            Name (_CID, "MSFT8000")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x004E, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "bus-I2C-I2CA", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }
                }
            })
        }
    }

    Scope (\_SB)
    {
        Name (AGRB, 0xE0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x07, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x08, 0x0F, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x13,  // ........
            /* 0078 */  0x10, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x01, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x18,  // ........
            /* 00A0 */  0x1B, 0xFF, 0xFF, 0x02, 0x00, 0x02, 0x02, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, One)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x09]) == One))
            {
                A002 = (Arg0 | 0xB0000000)
            }
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, Zero, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, Zero, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [Zero]) > Zero))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = One
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == One))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, Zero, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = Zero
                A034 = Zero
                A035 = Zero
                A036 = Zero
                A037 = Zero
                A038 = Zero
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = Zero
                A040 = Zero
                A041 = Zero
                A042 = Zero
                A043 = Zero
                A044 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = Zero
                A048 = Zero
                A049 = Zero
                A050 = Zero
                A051 = Zero
                A052 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = One
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0x16))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Arg1
                A054 = Zero
                A055 = Zero
                A056 = Zero
                A057 = Zero
                A058 = Zero
                A018 (0x6F, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A059)
                CreateDWordField (Local6, 0x04, A060)
                CreateDWordField (Local6, 0x08, A061)
                CreateDWordField (Local6, 0x0C, A062)
                CreateDWordField (Local6, 0x10, A063)
                CreateDWordField (Local6, 0x14, A064)
                A059 = Zero
                A060 = Zero
                A061 = Zero
                A062 = Zero
                A063 = Zero
                A064 = Zero
                A065 (Arg1)
                A007 (0xAA99)
            }

            Return (Zero)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A116 (Local0, Arg1)
                If ((Local1 == One))
                {
                    Local2 = A117 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, Zero, A023)
            CreateByteField (Local7, 0x02, A067)
            CreateByteField (Local7, 0x03, A118)
            A023 = 0x04
            A067 = Zero
            If ((Local2 == Zero))
            {
                A118 = Zero
            }
            Else
            {
                A118 = One
            }

            Return (Local7)
        }

        Method (A116, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A112 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A112 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A112 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A112 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A112 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A112 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A112 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A112 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A112 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A112 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A112 (Arg1))
            }
        }

        Method (A117, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A113 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A113 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A113 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A113 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A113 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A113 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A113 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A113 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A113 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A113 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A113 (Arg1))
            }
        }

        Name (AD00, Zero)
        Name (DK00, Zero)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, Zero)
        Name (AP02, Zero)
        Name (AP03, Zero)
        Name (AP05, Zero)
        Name (AP0B, 0xFF)
        Name (AP10, Zero)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, Zero, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A067)
            A067 = One
            If ((DerefOf (\_SB.ADAT [Zero]) == One))
            {
                A067 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [Zero]) == Zero))
            {
                A067 = One
                Return (Local7)
            }

            A068 (Arg0)
            If ((AP05 != One))
            {
                Return (Local7)
            }

            A069 ()
            A067 = 0x02
            Return (Local7)
        }

        Method (A070, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            If ((AP05 != One))
            {
                Return (Zero)
            }

            A069 ()
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = Zero
            }
        }

        Method (A072, 1, NotSerialized)
        {
            AP10 = One
        }

        Method (A073, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A074 (Local0)
                    Local0++
                }

                AP0B = Zero
            }

            A069 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [Zero] = 0x03
            Local7 [One] = Zero
            Local7 [0x02] = Zero
            Return (Local7)
        }

        Method (A075, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A068, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                If ((A076 (Local0, AP06) == One))
                {
                    If (((AP07 & AP08) == One))
                    {
                        Local1 = A077 (Local0)
                        A078 (Local0, Local1)
                    }
                    Else
                    {
                        A078 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A079, 0, NotSerialized)
        {
            AP02 = One
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A081, 0, NotSerialized)
        {
            AP03 = Zero
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A082 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A069, 0, NotSerialized)
        {
            A081 ()
            A079 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                Local2 = A083 (Local0)
                If ((Local1 != Local2))
                {
                    A084 (Local0, Local1)
                }
                ElseIf ((AP10 == One))
                {
                    A084 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == One))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = Zero
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A083, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        Method (A080, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A087 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A087 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A087 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A087 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A087 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A087 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A087 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A087 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A087 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A087 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A087 ())
            }
        }

        Method (A082, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A088 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A088 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A088 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A088 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A088 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A088 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A088 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A088 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A088 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A088 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A088 ())
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A089 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A089 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A089 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A089 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A089 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A089 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A089 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A089 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A089 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A089 ())
            }
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A090 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A090 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A090 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A090 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A090 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A090 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A090 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A090 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A090 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A090 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A090 (Arg1))
            }
        }

        Method (A076, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A091 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A091 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A091 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A091 (Arg1))
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A092 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A092 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A092 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A092 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A092 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A092 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A092 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A092 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A092 ())
            }
        }

        OperationRegion (A161, SystemMemory, AGRB, 0x1000)
        Field (A161, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A162,   32
        }

        BankField (A161, A162, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A161, A162, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A161, A162, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A140,   32
        }

        BankField (A161, A162, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A141,   32
        }

        BankField (A161, A162, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A142,   32
        }

        BankField (A161, A162, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A143,   32
        }

        BankField (A161, A162, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A144,   32
        }

        BankField (A161, A162, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A145,   32
        }

        BankField (A161, A162, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A161, A162, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A161, A162, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A161, A162, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A125,   32
        }

        BankField (A161, A162, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A126,   32
        }

        BankField (A161, A162, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A127,   32
        }

        BankField (A161, A162, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A128,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A129,   32
        }

        BankField (A161, A162, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A130,   32
        }

        BankField (A161, A162, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A131,   32
        }

        BankField (A161, A162, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A161, A162, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A160,   32
        }

        BankField (A161, A162, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A161, A162, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A154,   32
        }

        BankField (A161, A162, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A155,   32
        }

        BankField (A161, A162, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A156,   32
        }

        BankField (A161, A162, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A157,   32
        }

        BankField (A161, A162, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A158,   32
        }

        BankField (A161, A162, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A159,   32
        }

        BankField (A161, A162, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A168,   32
        }

        BankField (A161, A162, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A169,   32
        }

        BankField (A161, A162, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A170,   32
        }

        BankField (A161, A162, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A171,   32
        }

        Method (A119, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A100 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A100 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A100 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A100 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A100 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A100 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A100 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A100 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A100 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A100 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A100 (Arg1))
            }
        }

        Method (A120, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A121 /* \_SB_.A121 */
                Local1 &= 0xFF00FCFF
                A121 = (Local0 | Local1)
                Local1 = A121 /* \_SB_.A121 */
                A121 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == One))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0x00400000 | Local1)
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0x00400000 | Local1)
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0x00400000 | Local1)
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A119 (Local0, Arg1)
                If ((Local1 == One))
                {
                    A120 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR4.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR5.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR6.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR7.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR8.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR9.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABRA.A104 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A133)
            CreateDWordField (Arg1, 0x04, A134)
            CreateDWordField (Arg1, 0x08, A135)
            CreateDWordField (Arg1, 0x0C, A136)
            CreateDWordField (Arg1, 0x10, A137)
            CreateDWordField (Arg1, 0x14, A138)
            A139 = Zero
            While ((A139 != Zero)){}
            A140 = A133 /* \_SB_.A018.A133 */
            A141 = A134 /* \_SB_.A018.A134 */
            A142 = A135 /* \_SB_.A018.A135 */
            A143 = A136 /* \_SB_.A018.A136 */
            A144 = A137 /* \_SB_.A018.A137 */
            A145 = A138 /* \_SB_.A018.A138 */
            A146 = Arg0
            While ((A139 == Zero)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A147)
            CreateDWordField (Arg1, 0x04, A148)
            CreateDWordField (Arg1, 0x08, A149)
            CreateDWordField (Arg1, 0x0C, A150)
            CreateDWordField (Arg1, 0x10, A151)
            CreateDWordField (Arg1, 0x14, A152)
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            A154 = A147 /* \_SB_.A046.A147 */
            A155 = A148 /* \_SB_.A046.A148 */
            A156 = A149 /* \_SB_.A046.A149 */
            A157 = A150 /* \_SB_.A046.A150 */
            A158 = A151 /* \_SB_.A046.A151 */
            A159 = A152 /* \_SB_.A046.A152 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A153 = Local1
            A160 = 0xFFFFFFFF
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A163,   32
            }

            Release (\_SB.AM00)
            Return (A163) /* \_SB_.AMNR.A163 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A164,   32
            }

            A164 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, A165)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A165))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                If ((Local1 == One))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, Zero, A166)
                    CreateDWordField (Local3, 0x04, A167)
                    A166 = A140 /* \_SB_.A140 */
                    A167 = A141 /* \_SB_.A141 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR0.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR0.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR1.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR1.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR2.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR2.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR3.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR3.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR4.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR4.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR5.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR5.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR6.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR6.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR7.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR7.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR8.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR8.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR9.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR9.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABRA.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABRA.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A172, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == One))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A173 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A103, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A173, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A101 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A101 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A101 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A101 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A101 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A101 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A101 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A101 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A101 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A101 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A101 (Arg1))
            }
        }

        Method (A065, 1, Serialized)
        {
            Local0 = Zero
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((Local1 == Zero))
            {
                A012 = Local2
                A172 (Zero)
            }

            If ((Local1 == One))
            {
                A012 = Local2
                A172 (One)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, One)
        Name (A009, Zero)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((AD00 == Zero))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }

    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001068, 
                0x00001482, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001069
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
    }

    Scope (\_GPE)
    {
        Name (TNAT, Zero)
        Name (TBSX, Zero)
        Name (TBAD, Zero)
        Name (TBCD, Zero)
        Name (TAAD, Zero)
        Name (TBRP, Zero)
        Method (MMRP, 0, Serialized)
        {
            If ((TAAD == Zero))
            {
                Local6 = M049 (M331, 0x12)
                Local6 = M252 (Zero, Zero, Local6)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If ((Local6 == Local2))
                {
                    Local6 = Zero
                }

                Local2 = M049 (M331, 0x13)
                Local3 = M049 (M331, 0x14)
                Local0 = M083 /* External reference */
                Local0 += (Local6 << 0x14)
                Local0 += (Local2 << 0x0F)
                Local0 += (Local3 << 0x0C)
                TAAD = Local0
            }
            Else
            {
                Local0 = TAAD /* \_GPE.TAAD */
            }

            Return (Local0)
        }

        Method (MMTB, 0, Serialized)
        {
            If ((TBAD == Zero))
            {
                Local0 = \_GPE.MMTA ()
                Local1 = M011 (Local0, 0x19, Zero, 0x08)
                Local0 = M083 /* External reference */
                Local0 += (Local1 << 0x14)
                TBAD = Local0
            }
            Else
            {
                Local0 = TBAD /* \_GPE.TBAD */
            }

            Return (Local0)
        }

        Method (MMTA, 0, NotSerialized)
        {
            If ((TAAD == Zero))
            {
                Local6 = M049 (M331, 0x12)
                Local6 = M252 (Zero, Zero, Local6)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If ((Local6 == Local2))
                {
                    Local6 = Zero
                }

                Local6 = M049 (M331, 0x2E)
                Local2 = 0x04
                Local3 = Zero
                Local0 = M083 /* External reference */
                Local0 += (Local6 << 0x14)
                Local0 += (Local2 << 0x0F)
                Local0 += (Local3 << 0x0C)
                TAAD = Local0
            }
            Else
            {
                Local0 = TAAD /* \_GPE.TAAD */
            }

            Return (Local0)
        }

        Method (OSUP, 3, Serialized)
        {
            Local0 = (Arg0 + 0x0540)
            OperationRegion (PXVD, SystemMemory, Local0, 0x10)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                IT2P,   32, 
                IP2T,   32, 
                DT2P,   32, 
                DP2T,   32
            }

            Local6 = 0x7FFFFFFF
            Local6 |= 0x80000000
            Local2 = DT2P /* \_GPE.OSUP.DT2P */
            If ((Local2 == Local6))
            {
                Return (0x02)
            }

            Local3 = DP2T /* \_GPE.OSUP.DP2T */
            Local3 &= One
            If ((Local3 == One))
            {
                Return (0x03)
            }

            Local1 = Arg2
            DP2T = Arg1
            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                Local4 = DT2P /* \_GPE.OSUP.DT2P */
                If ((Local4 == Local6))
                {
                    Return (0x02)
                }

                If ((Local4 & One))
                {
                    Break
                }

                Sleep (One)
            }

            DP2T = Zero
            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                Local5 = DT2P /* \_GPE.OSUP.DT2P */
                If ((Local5 == Local6))
                {
                    Return (0x02)
                }

                Local5 &= One
                If ((Local5 == Zero))
                {
                    Break
                }

                Sleep (One)
            }

            Return (One)
        }

        Method (GTBR, 0, NotSerialized)
        {
            If ((TBRP == Zero))
            {
                Local6 = Zero
                Local2 = M049 (M331, 0x13)
                Local3 = M049 (M331, 0x14)
                Local0 = M083 /* External reference */
                Local0 += (Local6 << 0x14)
                Local0 += (Local2 << 0x0F)
                Local0 += (Local3 << 0x0C)
                TBRP = Local0
            }
            Else
            {
                Local0 = TBRP /* \_GPE.TBRP */
            }

            Return (Local0)
        }

        Method (TBFF, 0, Serialized)
        {
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x0600)
            Field (PXVD, ByteAcc, NoLock, Preserve)
            {
                VEDI,   32, 
                UP04,   8, 
                Offset (0x08), 
                UP08,   32, 
                Offset (0x0C), 
                UP0C,   8, 
                Offset (0x18), 
                UP18,   8, 
                UP19,   8, 
                UP1A,   8, 
                Offset (0x1C), 
                UP1C,   8, 
                UP1D,   8, 
                Offset (0x20), 
                UP20,   16, 
                UP22,   16, 
                UP24,   16, 
                UP26,   16, 
                UP28,   32, 
                UP2C,   32, 
                Offset (0x50), 
                UP50,   8, 
                Offset (0x5F8), 
                U5F8,   32
            }

            Local2 = 0x7FFFFFFF
            Local2 |= 0x80000000
            If ((UP08 == Local2))
            {
                Return (0x02)
            }

            Local1 = \_GPE.MMTA ()
            OperationRegion (GPFG, SystemMemory, Local1, 0x30)
            Field (GPFG, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                GP04,   8, 
                Offset (0x0C), 
                GP0C,   8, 
                Offset (0x18), 
                GP18,   8, 
                GP19,   8, 
                GP1A,   8, 
                Offset (0x1C), 
                GP1C,   8, 
                GP1D,   8, 
                Offset (0x20), 
                GP20,   16, 
                GP22,   16, 
                GP24,   16, 
                GP26,   16, 
                GP28,   32, 
                GP2C,   32
            }

            If ((UP18 == Zero))
            {
                UP18 = GP19 /* \_GPE.TBFF.GP19 */
                UP19 = (GP19 + One)
                UP1A = GP1A /* \_GPE.TBFF.GP1A */
            }

            If ((VEDI == Local2))
            {
                Local4 = OSUP (Local0, 0x0D, 0x1388)
                Local5 = 0xC8
                While (((Local4 == 0x03) && Local5))
                {
                    Local5--
                    Local4 = OSUP (Local0, 0x0D, 0x1388)
                    If ((Local4 != 0x03))
                    {
                        Break
                    }

                    Sleep (One)
                }
            }
            Else
            {
                Local4 = Zero
            }

            Local1 = MMTC ()
            OperationRegion (D0FG, SystemMemory, Local1, 0x0600)
            Field (D0FG, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                D004,   8, 
                Offset (0x0C), 
                D00C,   8, 
                Offset (0x18), 
                D018,   8, 
                D019,   8, 
                D01A,   8, 
                Offset (0x1C), 
                D01C,   8, 
                D01D,   8, 
                Offset (0x20), 
                D020,   16, 
                D022,   16, 
                D024,   16, 
                D026,   16, 
                D028,   32, 
                D02C,   32, 
                Offset (0x50), 
                D050,   8, 
                Offset (0x5F8), 
                D5F8,   32
            }

            Local2 = (Local1 + 0x8000)
            OperationRegion (D1FG, SystemMemory, Local2, 0x0600)
            Field (D1FG, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                D104,   8, 
                Offset (0x0C), 
                D10C,   8, 
                Offset (0x18), 
                D118,   8, 
                D119,   8, 
                D11A,   8, 
                Offset (0x1C), 
                D11C,   8, 
                D11D,   8, 
                Offset (0x20), 
                D120,   16, 
                D122,   16, 
                D124,   16, 
                D126,   16, 
                D128,   32, 
                D12C,   32, 
                Offset (0x50), 
                D150,   8, 
                Offset (0x5F8), 
                E5F8,   32
            }

            Local3 = (Local1 + 0x00010000)
            OperationRegion (D2FG, SystemMemory, Local3, 0x0600)
            Field (D2FG, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                D204,   8, 
                Offset (0x0C), 
                D20C,   8, 
                Offset (0x18), 
                D218,   8, 
                D219,   8, 
                D21A,   8, 
                Offset (0x1C), 
                D21C,   8, 
                D21D,   8, 
                Offset (0x20), 
                D220,   16, 
                D222,   16, 
                D224,   16, 
                D226,   16, 
                D228,   32, 
                D22C,   32, 
                Offset (0x50), 
                D250,   8, 
                Offset (0x5F8), 
                F5F8,   32
            }

            Local5 = (Local1 + 0x00020000)
            OperationRegion (D4FG, SystemMemory, Local5, 0x0600)
            Field (D4FG, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                D404,   8, 
                Offset (0x0C), 
                D40C,   8, 
                Offset (0x18), 
                D418,   8, 
                D419,   8, 
                D41A,   8, 
                Offset (0x1C), 
                D41C,   8, 
                D41D,   8, 
                Offset (0x20), 
                D420,   16, 
                D422,   16, 
                D424,   16, 
                D426,   16, 
                D428,   32, 
                D42C,   32, 
                Offset (0x50), 
                D450,   8, 
                Offset (0x5F8), 
                G5F8,   32
            }

            Local7 = M049 (M331, 0x2D)
            If ((Local7 != One))
            {
                If ((UP50 == 0x15))
                {
                    U5F8 = 0xC0000000
                }

                If ((D050 == 0x15))
                {
                    D5F8 = 0xC0000000
                }

                If ((D150 == 0x15))
                {
                    E5F8 = 0xC0000000
                }

                If ((D250 == 0x15))
                {
                    F5F8 = 0xC0000000
                }

                If ((D450 == 0x15))
                {
                    G5F8 = 0xC0000000
                }
            }

            If (((Local4 == Zero) && (UP20 == Zero)))
            {
                If ((\_GPE.TNAT != Zero))
                {
                    UP0C = 0x20
                    UP1C = GP1C /* \_GPE.TBFF.GP1C */
                    UP1D = GP1D /* \_GPE.TBFF.GP1D */
                    UP20 = GP20 /* \_GPE.TBFF.GP20 */
                    UP22 = GP22 /* \_GPE.TBFF.GP22 */
                    UP24 = GP24 /* \_GPE.TBFF.GP24 */
                    UP26 = GP26 /* \_GPE.TBFF.GP26 */
                    UP28 = GP28 /* \_GPE.TBFF.GP28 */
                    UP2C = GP2C /* \_GPE.TBFF.GP2C */
                    UP04 = 0x07
                    D00C = 0x20
                    D018 = UP19 /* \_GPE.TBFF.UP19 */
                    D019 = (UP19 + One)
                    D01A = (UP19 + One)
                    D01C = 0xF1
                    D01D = One
                    D020 = UP22 /* \_GPE.TBFF.UP22 */
                    D022 = UP22 /* \_GPE.TBFF.UP22 */
                    D024 = 0xFFF1
                    D026 = One
                    D028 = Zero
                    D02C = Zero
                    D004 = 0x06
                    D20C = 0x20
                    Local6 = ((UP1A - UP19) >> One)
                    D218 = UP19 /* \_GPE.TBFF.UP19 */
                    D219 = (UP19 + (Local6 + One))
                    D21A = (UP19 + (Local6 + One))
                    D21C = 0xF1
                    D21D = One
                    D220 = (UP22 - 0x10)
                    D222 = (UP22 - 0x10)
                    D224 = 0xFFF1
                    D226 = One
                    D228 = Zero
                    D22C = Zero
                    D204 = 0x06
                    D10C = 0x20
                    Local6 = ((UP1A - UP19) >> One)
                    D118 = UP19 /* \_GPE.TBFF.UP19 */
                    D119 = (D019 + One)
                    D11A = (UP19 + Local6)
                    Local6 = (UP1D - UP1C) /* \_GPE.TBFF.UP1C */
                    Local6 = ((Local6 + 0x10) >> One)
                    D11C = (UP1C + Local6)
                    D11D = UP1D /* \_GPE.TBFF.UP1D */
                    Local6 = ((UP22 - 0x20) - UP20) /* \_GPE.TBFF.UP20 */
                    Local6 = ((Local6 + 0x10) >> One)
                    D120 = (UP20 + Local6)
                    D122 = (UP22 - 0x20)
                    Local6 = ((UP2C << 0x10) + (UP26 + 0x0F))
                    Local7 = ((UP28 << 0x10) + (UP24 - One))
                    Local6 = ((Local6 - Local7) >> One)
                    Local7 = ((Local6 + Local7) + One)
                    D124 = (Local7 & 0xFFFF)
                    D128 = (Local7 >> 0x10)
                    D126 = UP26 /* \_GPE.TBFF.UP26 */
                    D12C = UP2C /* \_GPE.TBFF.UP2C */
                    D104 = 0x07
                    D40C = 0x20
                    D418 = UP19 /* \_GPE.TBFF.UP19 */
                    D419 = (D21A + One)
                    D41A = UP1A /* \_GPE.TBFF.UP1A */
                    Local6 = (UP1D - UP1C) /* \_GPE.TBFF.UP1C */
                    Local6 = ((Local6 + 0x10) >> One)
                    D41C = UP1C /* \_GPE.TBFF.UP1C */
                    D41D = (UP1D - Local6)
                    D420 = UP20 /* \_GPE.TBFF.UP20 */
                    D422 = (D120 - 0x10)
                    D424 = UP24 /* \_GPE.TBFF.UP24 */
                    D428 = UP28 /* \_GPE.TBFF.UP28 */
                    Local7 = ((D128 << 0x10) + (D124 - 0x10))
                    D426 = (Local7 & 0xFFFF)
                    D42C = (Local7 >> 0x10)
                    D404 = 0x07
                    Local6 = ((D019 << 0x14) + (Local1 & 0xF00FFFFF))
                    OperationRegion (HSFG, SystemMemory, Local6, 0x30)
                    Field (HSFG, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        HS04,   8, 
                        Offset (0x0C), 
                        HS0C,   8, 
                        Offset (0x10), 
                        HS10,   32, 
                        HS14,   32
                    }

                    HS0C = 0x20
                    HS10 = ((D020 << 0x10) + 0x000C0000)
                    HS14 = ((D020 << 0x10) + 0x000BF000)
                    HS04 = 0x06
                    Local7 = ((D219 << 0x14) + (Local1 & 0xF00FFFFF))
                    OperationRegion (USFG, SystemMemory, Local7, 0x30)
                    Field (USFG, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        US04,   8, 
                        Offset (0x0C), 
                        US0C,   8, 
                        Offset (0x10), 
                        US10,   32
                    }

                    US0C = 0x20
                    US10 = ((D220 << 0x10) + 0x000F0000)
                    US04 = 0x06
                    GP0C = 0x20
                    UP0C = 0x20
                    GP04 = 0x07
                    Local0 = GP04 /* \_GPE.TBFF.GP04 */
                    Local0 = GP0C /* \_GPE.TBFF.GP0C */
                    Local0 = GP18 /* \_GPE.TBFF.GP18 */
                    Local0 = GP19 /* \_GPE.TBFF.GP19 */
                    Local0 = GP1A /* \_GPE.TBFF.GP1A */
                    Local0 = GP1C /* \_GPE.TBFF.GP1C */
                    Local0 = GP1D /* \_GPE.TBFF.GP1D */
                    Local0 = GP20 /* \_GPE.TBFF.GP20 */
                    Local0 = GP22 /* \_GPE.TBFF.GP22 */
                    Local0 = GP24 /* \_GPE.TBFF.GP24 */
                    Local0 = GP26 /* \_GPE.TBFF.GP26 */
                    Local0 = GP28 /* \_GPE.TBFF.GP28 */
                    Local0 = GP2C /* \_GPE.TBFF.GP2C */
                    Local0 = UP04 /* \_GPE.TBFF.UP04 */
                    Local0 = UP0C /* \_GPE.TBFF.UP0C */
                    Local0 = UP18 /* \_GPE.TBFF.UP18 */
                    Local0 = UP19 /* \_GPE.TBFF.UP19 */
                    Local0 = UP1A /* \_GPE.TBFF.UP1A */
                    Local0 = UP1C /* \_GPE.TBFF.UP1C */
                    Local0 = UP1D /* \_GPE.TBFF.UP1D */
                    Local0 = UP20 /* \_GPE.TBFF.UP20 */
                    Local0 = UP22 /* \_GPE.TBFF.UP22 */
                    Local0 = UP24 /* \_GPE.TBFF.UP24 */
                    Local0 = UP26 /* \_GPE.TBFF.UP26 */
                    Local0 = UP28 /* \_GPE.TBFF.UP28 */
                    Local0 = UP2C /* \_GPE.TBFF.UP2C */
                    Local0 = UP50 /* \_GPE.TBFF.UP50 */
                    Local0 = D004 /* \_GPE.TBFF.D004 */
                    Local0 = D00C /* \_GPE.TBFF.D00C */
                    Local0 = D018 /* \_GPE.TBFF.D018 */
                    Local0 = D019 /* \_GPE.TBFF.D019 */
                    Local0 = D01A /* \_GPE.TBFF.D01A */
                    Local0 = D01C /* \_GPE.TBFF.D01C */
                    Local0 = D01D /* \_GPE.TBFF.D01D */
                    Local0 = D020 /* \_GPE.TBFF.D020 */
                    Local0 = D022 /* \_GPE.TBFF.D022 */
                    Local0 = D024 /* \_GPE.TBFF.D024 */
                    Local0 = D026 /* \_GPE.TBFF.D026 */
                    Local0 = D028 /* \_GPE.TBFF.D028 */
                    Local0 = D02C /* \_GPE.TBFF.D02C */
                    Local0 = D050 /* \_GPE.TBFF.D050 */
                    Local0 = D104 /* \_GPE.TBFF.D104 */
                    Local0 = D10C /* \_GPE.TBFF.D10C */
                    Local0 = D118 /* \_GPE.TBFF.D118 */
                    Local0 = D119 /* \_GPE.TBFF.D119 */
                    Local0 = D11A /* \_GPE.TBFF.D11A */
                    Local0 = D11C /* \_GPE.TBFF.D11C */
                    Local0 = D11D /* \_GPE.TBFF.D11D */
                    Local0 = D120 /* \_GPE.TBFF.D120 */
                    Local0 = D122 /* \_GPE.TBFF.D122 */
                    Local0 = D124 /* \_GPE.TBFF.D124 */
                    Local0 = D126 /* \_GPE.TBFF.D126 */
                    Local0 = D128 /* \_GPE.TBFF.D128 */
                    Local0 = D12C /* \_GPE.TBFF.D12C */
                    Local0 = D150 /* \_GPE.TBFF.D150 */
                    Local0 = D204 /* \_GPE.TBFF.D204 */
                    Local0 = D20C /* \_GPE.TBFF.D20C */
                    Local0 = D218 /* \_GPE.TBFF.D218 */
                    Local0 = D219 /* \_GPE.TBFF.D219 */
                    Local0 = D21A /* \_GPE.TBFF.D21A */
                    Local0 = D21C /* \_GPE.TBFF.D21C */
                    Local0 = D21D /* \_GPE.TBFF.D21D */
                    Local0 = D220 /* \_GPE.TBFF.D220 */
                    Local0 = D222 /* \_GPE.TBFF.D222 */
                    Local0 = D224 /* \_GPE.TBFF.D224 */
                    Local0 = D226 /* \_GPE.TBFF.D226 */
                    Local0 = D228 /* \_GPE.TBFF.D228 */
                    Local0 = D22C /* \_GPE.TBFF.D22C */
                    Local0 = D250 /* \_GPE.TBFF.D250 */
                    Local0 = D404 /* \_GPE.TBFF.D404 */
                    Local0 = D40C /* \_GPE.TBFF.D40C */
                    Local0 = D418 /* \_GPE.TBFF.D418 */
                    Local0 = D419 /* \_GPE.TBFF.D419 */
                    Local0 = D41A /* \_GPE.TBFF.D41A */
                    Local0 = D41C /* \_GPE.TBFF.D41C */
                    Local0 = D41D /* \_GPE.TBFF.D41D */
                    Local0 = D420 /* \_GPE.TBFF.D420 */
                    Local0 = D422 /* \_GPE.TBFF.D422 */
                    Local0 = D424 /* \_GPE.TBFF.D424 */
                    Local0 = D426 /* \_GPE.TBFF.D426 */
                    Local0 = D428 /* \_GPE.TBFF.D428 */
                    Local0 = D42C /* \_GPE.TBFF.D42C */
                    Local0 = D450 /* \_GPE.TBFF.D450 */
                    Local0 = HS04 /* \_GPE.TBFF.HS04 */
                    Local0 = HS0C /* \_GPE.TBFF.HS0C */
                    Local0 = HS10 /* \_GPE.TBFF.HS10 */
                    Local0 = HS14 /* \_GPE.TBFF.HS14 */
                    Local0 = US04 /* \_GPE.TBFF.US04 */
                    Local0 = US0C /* \_GPE.TBFF.US0C */
                    Local0 = US10 /* \_GPE.TBFF.US10 */
                }
            }

            Return (Local4)
        }

        Method (GNIS, 0, Serialized)
        {
            If (!GP5F ())
            {
                Return (Zero)
            }

            Local0 = (MMTB () + 0x0544)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                HPFI,   1, 
                Offset (0x04), 
                TB2P,   32
            }

            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local1 = TB2P /* \_GPE.GNIS.TB2P */
            If ((Local1 == Local5))
            {
                Return (Zero)
            }

            Local2 = HPFI /* \_GPE.GNIS.HPFI */
            If ((Local2 == One))
            {
                HPFI = Zero
                Return (Zero)
            }

            Return (One)
        }

        Mutex (EEBB, 0x00)
        Method (XTBT, 0, Serialized)
        {
            Acquire (EEBB, 0xFFFF)
            M000 (0x0DCC)
            If (GNIS ())
            {
                M000 (0x0DCD)
                Release (EEBB)
                Return (Zero)
            }

            Local0 = TBFF ()
            If ((Local0 == Zero))
            {
                If ((\_GPE.TNAT == Zero))
                {
                    Local1 = M049 (M331, 0x22)
                    M232 (Local1, 0x21, Zero)
                }

                Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                M000 (0x0DCE)
                Release (EEBB)
                Return (Zero)
            }

            If ((Local0 == 0x02))
            {
                Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                M000 (0x0DCF)
                Release (EEBB)
                Return (Zero)
            }

            If ((\_GPE.TNAT == Zero))
            {
                Local1 = M049 (M331, 0x22)
                M232 (Local1, 0x21, Zero)
            }

            Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
            M000 (0x0DD0)
            Release (EEBB)
        }

        Method (MMTC, 0, Serialized)
        {
            If ((TBCD == Zero))
            {
                Local0 = \_GPE.MMTB ()
                Local1 = M011 (Local0, 0x19, Zero, 0x08)
                Local0 = M083 /* External reference */
                Local0 += (Local1 << 0x14)
                TBCD = Local0
            }
            Else
            {
                Local0 = TBCD /* \_GPE.TBCD */
            }

            Return (Local0)
        }

        Method (TBCC, 0, Serialized)
        {
            Local0 = (MMTB () + 0x08)
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                CCRE,   32
            }

            Local1 = CCRE /* \_GPE.TBCC.CCRE */
            Return (Local1)
        }

        Method (GP5F, 0, Serialized)
        {
            Local0 = One
            Return (Local0)
        }

        Method (XL11, 0, NotSerialized)
        {
            If ((\_GPE.TNAT >= 0x03))
            {
                Local4 = M04B (M331, 0x1C)
                If ((M009 (Local4) == One))
                {
                    \_GPE.XTBT ()
                }
            }
            ElseIf ((\_SB.PCI0.GPP7.M333 == One))
            {
                If ((\_GPE.TBSX == Zero))
                {
                    \_GPE.XTBT ()
                }
            }
            Else
            {
                Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            }
        }
    }

    Scope (\_SB)
    {
        Device (WMTF)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,  // H...^ wJ
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,  // .H !...A
                /* 0010 */  0x54, 0x46, 0x01, 0x02                           // TF..
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, FP)
            }
        }

        Method (IPTS, 1, Serialized)
        {
            If ((((Arg0 == 0x03) || (Arg0 == 0x04)) && (\_GPE.TNAT < 0x02)))
            {
                Name (GBST, Zero)
                GBST = M013 (\_GPE.GTBR (), 0x54, Zero, 0x20)
                M014 (\_GPE.GTBR (), 0x54, Zero, 0x20, (GBST & 0xFFFF7FFC))
                Local4 = \_GPE.MMTB ()
                Local5 = (Local4 + 0x0548)
                OperationRegion (PXVD, SystemMemory, Local5, 0x08)
                Field (PXVD, DWordAcc, NoLock, Preserve)
                {
                    TB2P,   32, 
                    P2TB,   32
                }

                Local1 = 0x32
                P2TB = 0x05
                While ((Local1 > Zero))
                {
                    Local1--
                    Local2 = TB2P /* \_SB_.IPTS.TB2P */
                    If (((Local2 == 0xFFFFFFFF) && (Local1 == One)))
                    {
                        Return (Zero)
                    }

                    If (((Local2 != 0xFFFFFFFF) && (Local2 & One)))
                    {
                        Break
                    }

                    If ((Local1 == One))
                    {
                        Sleep (0x03E8)
                        Return (Zero)
                    }

                    Sleep (0x64)
                }

                P2TB = Zero
                M014 (\_GPE.GTBR (), 0x54, Zero, 0x20, (GBST & 0xFFFF7FFF))
            }
        }

        Method (IWAK, 1, Serialized)
        {
            If ((((Arg0 == 0x03) || (Arg0 == 0x04)) && (\_GPE.TNAT < 0x02)))
            {
                \_GPE.TBSX = Zero
                Acquire (\_GPE.EEBB, 0xFFFF)
                M000 (0x0DCA)
                Local1 = 0x7FFFFFFF
                Local1 |= 0x80000000
                Local0 = \_GPE.TBCC ()
                Local2 = M131 /* External reference */
                If (Local2)
                {
                    Local4 = One
                    Local2 = M049 (M131, 0x10)
                    Local3 = M049 (M131, 0x11)
                    Local3 = (M084 + ((Local2 * 0x0100) + Local3))
                    If (((Local0 != Local1) && (M011 (Local3, 0x0E, One, One) == 
                        Zero)))
                    {
                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                        Local4 = 0x02
                    }

                    If (((Local0 == Local1) && (M011 (Local3, 0x0E, One, One) == One)))
                    {
                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                        Local4 = 0x02
                    }

                    If (((Local4 == One) && (Arg0 == 0x04)))
                    {
                        If ((M011 (Local3, 0x0E, One, One) == One))
                        {
                            Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                        }
                    }
                }

                M000 (0x0DCB)
                Release (\_GPE.EEBB)
            }
        }
    }

    Scope (\_SB.PCI0.GPP7)
    {
        Name (M333, One)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            M000 (0x0DC6)
            \_GPE.TNAT = M049 (M331, 0x1B)
            \_SB.PCI0.GPP7.M333 = One
            \_GPE.TBSX = Zero
            M000 (0x0DC7)
        }

        Name (_S0W, Zero)  // _S0W: S0 Device Wake State
        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
        }
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A, M240, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATPX Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0C))
            {
                PX12 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (((M098 & 0x02) == 0x02))
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x000C4800
            M162 = M099 /* External reference */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            If (CondRefOf (\_SB.MACO))
            {
                \_SB.MACO = (Arg0 & One)
                M460 ("    Set _SB.MACO to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            }
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Method (PX12, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            Local0 = M049 (M133, 0x17)
            If ((Local0 != Zero))
            {
                M111 (Local0, (Arg0 & One))
            }

            M460 ("    Set Display Panel Reset to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Name (ATIB, Buffer (0x0100){})
        Name (M291, 0x81)
        Method (ATIF, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x15))
            {
                Return (AF21 ())
            }

            If ((Arg0 == 0x16))
            {
                Return (AF22 ())
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }

            If ((Arg0 == 0x18))
            {
                Return (AF24 ())
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = Zero
            M158 = Zero
            M159 = Zero
            M160 = Zero
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            M460 ("    Return Supported Notifications Mask = 0x%X  Supported Functions Bit Vector = 0x%X\n", M159, M160, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            M161 = 0x03
            Local0 = ((M103 >> 0x18) & 0xFF)
            Local1 = (M103 & 0x03)
            M162 = Local1
            If (((Local0 >= 0xD0) && (Local0 <= 0xD9)))
            {
                M157 = 0x0B
                M163 = Local0
                M291 = Local0
            }
            Else
            {
                M157 = 0x0A
                If ((M291 != 0x81))
                {
                    M291 = 0x81
                }
            }

            M460 ("    Return Flags = 0x%X  Notify Command Code = 0x%X\n", M162, M291, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            ATIB = Zero
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            M460 ("    Return Pending System BIOS Requests                        = 0x%X\n", M174, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Expansion Mode                                      = 0x%X\n", M175, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: Target Graphics Controller           = 0x%X\n", M176, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: State Id                             = 0x%X\n", M177, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: Target Graphics Controller      = 0x%X\n", M178, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: State Id                        = 0x%X\n", M179, Zero, Zero, Zero, Zero, Zero)
            M460 ("           System Power Source                                 = 0x%X\n", M180, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Panel Brightness Backlight Level                    = 0x%X\n", M181, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = 0x%X\n", M301, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M302, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M04A (M133, 0xD4)
            If ((Local0 != Zero))
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M162)
            CreateByteField (ATIB, 0x04, M292)
            CreateByteField (ATIB, 0x05, M293)
            CreateByteField (ATIB, 0x06, M294)
            CreateByteField (ATIB, 0x07, M295)
            CreateByteField (ATIB, 0x08, M296)
            CreateByteField (ATIB, 0x09, M297)
            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Flags                  = 0x%X\n", M162, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Error Code             = 0x%X\n", M292, Zero, Zero, Zero, Zero, Zero)
            If ((M157 > 0x05))
            {
                M460 ("           AC Level               = 0x%X\n", M293, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Level               = 0x%X\n", M294, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Min Input Signal Level = 0x%X\n", M295, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Max Input Signal Level = 0x%X\n", M296, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Count                  = %d\n", M297, Zero, Zero, Zero, Zero, Zero)
                If ((M157 > 0x0A))
                {
                    Local1 = 0x0A
                    While ((Local1 < M157))
                    {
                        Local2 = DerefOf (ATIB [Local1])
                        Local1++
                        Local3 = DerefOf (ATIB [Local1])
                        Local1++
                        Local4 = ((Local1 - 0x0A) >> One)
                        M460 ("           Count[%d]  Luminance Level = 0x%X  Signal Level = %d\n", Local4, Local2, Local3, Zero, Zero, Zero)
                    }
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF21, 0, NotSerialized)
        {
            ATIB = M29A /* External reference */
            CreateWordField (ATIB, Zero, M297)
            CreateWordField (ATIB, 0x02, M157)
            M460 ("    Return Num Devices            = 0x%X\n", M297, Zero, Zero, Zero, Zero, Zero)
            M460 ("    Return Device Structure size  = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            Local0 = Zero
            If (((M297 > Zero) && (M297 < 0x04)))
            {
                While ((Local0 < M297))
                {
                    Local1 = ((Local0 << 0x02) + 0x04)
                    Local2 = (Local1 + 0x02)
                    Local3 = DerefOf (ATIB [Local1])
                    Local4 = DerefOf (ATIB [Local2])
                    M460 ("    Return Device Structure [%d] Flags              = 0x%X\n", Local0, Local3, Zero, Zero, Zero, Zero)
                    M460 ("    Return Device Structure [%d] Bus                = 0x%X\n", Local0, Local4, Zero, Zero, Zero, Zero)
                    Local0++
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF22, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M298)
            CreateDWordField (ATIB, 0x03, M299)
            Local0 = M049 (M133, 0x01F9)
            If ((Local0 >= One))
            {
                M157 = 0x07
                Local0--
                M298 = Local0
                M299 = M04B (M133, 0x01FA)
            }
            Else
            {
                M157 = Zero
                M298 = Zero
                M299 = Zero
            }

            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = %d\n", M298, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M299, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M305)
            CreateByteField (ATIB, 0x03, M306)
            CreateByteField (ATIB, 0x04, M307)
            CreateByteField (ATIB, 0x05, M308)
            CreateByteField (ATIB, 0x06, M309)
            CreateByteField (ATIB, 0x07, M30A)
            CreateByteField (ATIB, 0x08, M30B)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            If ((M157 >= 0x02))
            {
                M460 ("           AC Maximum Performance Limit = %d\n", M305, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Performance Limit  = %d\n", M306, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Battery Limit      = %d\n", M307, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Maximum Performance Limit = %d\n", M308, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Performance Limit  = %d\n", M309, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Battery Limit      = %d\n", M30A, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Battery Saver Limit       = %d\n", M30B, Zero, Zero, Zero, Zero, Zero)
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF24, 0, NotSerialized)
        {
            ATIB = M652 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M653)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           ISP Device Number = %d\n", M653, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN0  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                M460 ("    Notify (VGA, 0x%X)\n", M291, Zero, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN1  Supported Notification Mask = 0x%X  Save Expansion Mode = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN2  Supported Notification Mask = 0x%X  Thermal State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN3  Supported Notification Mask = 0x%X  Forced Power State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN4  Supported Notification Mask = 0x%X  System Power Source = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 != Local1))
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                    Notify (VGA, M291)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN5  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN6  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN7  Supported Notification Mask = 0x%X  Panel Brightness: Backlight Level = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN8  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFNC  Supported Notification Mask = 0x%X  Power Limit: Target Graphics Controller = 0x%X  Value = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }
    }

    Scope (\_SB.PCI0.GPP0)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (SWUS)
        {
            PowerResource (M237, 0x00, 0x0000)
            {
                Name (M239, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (M239) /* \_SB_.PCI0.GPP0.SWUS.M237.M239 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    M239 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    M239 = Zero
                }
            }

            Name (XPR0, Package (0x01)
            {
                M237
            })
            Name (XPR2, Package (0x01)
            {
                M237
            })
            Name (XPR3, Package (0x01)
            {
                M237
            })
            Name (XS0W, 0x04)
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.DDPM */
            }

            Device (SWDS)
            {
                PowerResource (M237, 0x00, 0x0000)
                {
                    Name (M239, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (M239) /* \_SB_.PCI0.GPP0.SWUS.SWDS.M237.M239 */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        M239 = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        M239 = Zero
                    }
                }

                Name (XPR0, Package (0x01)
                {
                    M237
                })
                Name (XPR2, Package (0x01)
                {
                    M237
                })
                Name (XPR3, Package (0x01)
                {
                    M237
                })
                Name (XS0W, 0x04)
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    M432 = ((M049 (M128, 0x66) >> 0x04) & One)
                                    M433 = ((M049 (M128, 0x66) >> 0x05) & One)
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP0.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP0.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }

    OperationRegion (CPNV, SystemMemory, 0x765E2018, 0x00010117)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32, 
        M652,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x00, 0x03, 0x80, 0x00                           // ....
    })
    OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
    Field (VARP, DWordAcc, NoLock, Preserve)
    {
        VAP1,   32
    }

    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If (Zero)
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        Local1 = VAP1 /* \VAP1 */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (VARQ, SystemIO, 0x0CD8, 0x08)
    Field (VARQ, DWordAcc, NoLock, Preserve)
    {
        VAQ1,   32
    }

    Method (M004, 1, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & One))))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* External reference */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* External reference */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    Local4 = One
                    While (((Local2 != 0xFF) && (Local4 != 0xFF)))
                    {
                        Local4 = M049 ((Local0 + Local1), 0x04)
                        If ((Local4 == Arg0))
                        {
                            Local2 = M049 ((Local0 + Local1), Zero)
                            If ((Local2 < 0x0A))
                            {
                                Local5 = M049 ((Local0 + Local1), 0x07)
                                If ((Arg1 >= 0x04))
                                {
                                    If ((Arg1 == 0x04))
                                    {
                                        Local3 = Zero
                                    }
                                    ElseIf ((Arg1 == 0x05))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        Local3 = One
                                    }
                                }
                                ElseIf (((Local5 & 0x80) == 0x80))
                                {
                                    Local3 = M049 ((Local0 + Local1), One)
                                    If ((Arg1 == Zero))
                                    {
                                        Local3 = Zero
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    ElseIf ((Local5 & 0x04))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    ElseIf ((M085 >= 0x04))
                                    {
                                        Local3 = 0x03
                                    }
                                    Else
                                    {
                                        Local3 = 0x0F
                                    }
                                }
                                Else
                                {
                                    Local3 = 0xFF
                                }

                                If ((Local3 != 0xFF))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        Local7 = M04B ((Local0 + Local1), 0x08)
                                        If ((M085 == 0x08))
                                        {
                                            If (((Local7 & 0x0FF00000) > Zero))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                Local6 |= (Local3 << (Local2 << One))
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                    0x03) << One), 0x02, Local3)
                                            }
                                        }
                                        ElseIf (((Local7 >> 0x1C) == 0x02))
                                        {
                                            M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                            One) << 0x02), 0x04, Local3)
                                    }

                                    If ((Arg1 == Zero))
                                    {
                                        M000 (0x0DE0)
                                    }

                                    If ((Arg1 == One))
                                    {
                                        M000 (0x0DE1)
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        M000 (0x0DE2)
                                    }
                                }
                            }

                            Local2 = 0xFF
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M21A, 1, Serialized)
    {
        Local3 = One
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* External reference */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* External reference */
                If ((Local0 != Zero))
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    Local4 = One
                    While (((Local2 != 0xFF) && (Local4 != 0xFF)))
                    {
                        Local4 = M049 ((Local0 + Local1), 0x04)
                        If ((Local4 == Arg0))
                        {
                            Local2 = M049 ((Local0 + Local1), Zero)
                            If ((Local2 < 0x0A))
                            {
                                If ((M085 >= 0x04))
                                {
                                    Local7 = M04B ((Local0 + Local1), 0x08)
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local3 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local3 = ((Local3 >> (Local2 << One)) & 0x03)
                                        }
                                        Else
                                        {
                                            Local3 = M011 ((M084 + 0x0E00), (Local2 >> 0x02), (
                                                (Local2 & 0x03) << One), 0x02)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        Local3 = M011 ((M084 + 0x1300), (Local2 >> 0x02), (
                                            (Local2 & 0x03) << One), 0x02)
                                    }
                                    Else
                                    {
                                        Local3 = M011 ((M084 + 0x0E00), (Local2 >> 0x02), (
                                            (Local2 & 0x03) << One), 0x02)
                                    }

                                    If ((Local3 == 0x03))
                                    {
                                        Local3 = One
                                    }
                                    ElseIf (((Local3 == Zero) || (Local3 == 0x02)))
                                    {
                                        Local3 = Zero
                                    }
                                    Else
                                    {
                                        Local3 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local3 = M011 ((M084 + 0x0E00), (Local2 >> One), (
                                        (Local2 & One) << 0x02), 0x04)
                                    If ((Local3 == 0x0F))
                                    {
                                        Local3 = One
                                    }
                                    ElseIf ((((Local3 == One) || (Local3 == 0x02)) || ((
                                        Local3 == 0x03) || (Local3 == 0x04))))
                                    {
                                        Local3 = 0x02
                                    }
                                    ElseIf ((Local3 == 0x0C))
                                    {
                                        Local3 = 0x02
                                    }
                                    Else
                                    {
                                        Local3 = Zero
                                    }
                                }
                            }

                            Local2 = 0xFF
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }

        M460 ("  KER-ASL-CpmGetDeviceClock (0x%X) = %d\n", Arg0, Local3, Zero, Zero, Zero, Zero)
        Return (Local3)
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & 0x03))))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* External reference */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Name (M047, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If (((M046 == 0xAA) || (M047 == 0xAA)))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("DisplayMux"))
                {
                    M047 = One
                    M460 ("  KER-ASL-_OSI = This OS can support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M047 = Zero
                    M460 ("  KER-ASL-_OSI = This OS cannot support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }

                If (\_OSI ("Windows 2022"))
                {
                    M046 = 0x0C
                    M460 ("  KER-ASL-_OSI = Windows 11, version 22H2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    OperationRegion (VARW, SystemMemory, 0xFED8020C, 0x14)
    Field (VARW, DWordAcc, NoLock, Preserve)
    {
        VA0C,   32, 
        Offset (0x0C), 
        VA18,   32, 
        VA1C,   32
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* External reference */
                FCRM = Zero
                FCRM = M456 /* External reference */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* External reference */
                FCRM = Zero
                FCRM = M456 /* External reference */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M602, 3, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x3D, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        If ((Arg2 != 0x3D))
        {
            TEMP [0x02] = Arg2
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateAcpi65UPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M602.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        ElseIf ((M085 == 0x15))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x15))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* External reference */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* External reference */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x15))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* External reference */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        Local1 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
                Local1 = (Local0 & 0x7FFC)
                Local1 |= (Arg1 & 0x7FFF)
                M04D (Arg0, (Local2 + 0x04), Local1)
                Local1 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X -> 0x%X\n", Arg0, Arg1, Local0, Local1, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x06
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x03 + (0x10 + (Arg0 * 0x06)))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x73, 0x03, 0x16, 0x04, 0x15, 0x74, 0x05,  // Ys....t.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x18, 0x1A,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x1C, 0x01, 0x68, 0x00, 0x69, 0x6A   // ....h.ij
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x15))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x11))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }

        Return (Zero)
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (M128, 0x94)
        If ((((Arg0 != Zero) && (Arg0 != One)) || (
            Local1 == One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* External reference */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x03)
    {
        0x02, 
        Package (0x05)
        {
            Package (0x07)
            {
                0x06, 
                0x0F, 
                0x13, 
                0x10, 
                0x12, 
                0x14, 
                0x15
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            Package (0x02)
            {
                One, 
                0x11
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* External reference */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        Local7 = Zero
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            Local5 = DerefOf (Local4 [Zero])
            Local6 = One
            While ((Local6 <= Local5))
            {
                If ((DerefOf (Local4 [Local6]) == Local0))
                {
                    Local7 = One
                    Break
                }

                Local6++
            }

            If ((One == Local7))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                M4F1 (Zero)
                M4F1 (One)
                M4F1 (0x02)
                M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Name (MACO, Zero)
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020026, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set SMTEn", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        0x0002004D, 
        0x0002004E, 
        0x0002004F, 
        0x00020050, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "Set Nitro RX", 
        "Set Nitro TX", 
        "Set Nitro Control Line", 
        "Set Robust Training", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x49)
    {
        0x48, 
        Package (0x04)
        {
            0x00020050, 
            Zero, 
            0x49, 
            Buffer (0x019C)
            {
                /* 0000 */  0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // P.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002004F, 
            Zero, 
            0x48, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // O.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002004E, 
            Zero, 
            0x47, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4E, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,  // N.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002004D, 
            Zero, 
            0x46, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4D, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // M.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x45, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x42, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            Zero, 
            0x3C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3A, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x36, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x90, 0x06, 0x00, 0x00,  // 4.......
                /* 0010 */  0xA0, 0x05, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // ........
                /* 0020 */  0x60, 0x04, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // `..."...
                /* 0028 */  0x72, 0x06, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // r.......
                /* 0030 */  0x4C, 0x04, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // L...(...
                /* 0038 */  0xDB, 0x08, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // ....[...
                /* 0040 */  0x28, 0x0A, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // (.......
                /* 0048 */  0xB8, 0x0B, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0050 */  0x13, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0058 */  0x18, 0x06, 0x00, 0x00, 0xBB, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0x98, 0x08, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // ........
                /* 0068 */  0x77, 0x08, 0x00, 0x00, 0xA5, 0x03, 0x00, 0x00,  // w.......
                /* 0070 */  0xC8, 0x00, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // ....w...
                /* 0078 */  0xD0, 0x07, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 0080 */  0x64, 0x00, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // d.......
                /* 0088 */  0x90, 0x01, 0x00, 0x00, 0xE9, 0x04, 0x00, 0x00,  // ........
                /* 0090 */  0x54, 0x0B, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // T... ...
                /* 0098 */  0xDC, 0x05, 0x00, 0x00, 0xA3, 0x09, 0x00, 0x00,  // ........
                /* 00A0 */  0x14, 0x05, 0x00, 0x00, 0x35, 0x05, 0x00, 0x00,  // ....5...
                /* 00A8 */  0x34, 0x08, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // 4.......
                /* 00B0 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 00B8 */  0x78, 0x05, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // x...@...
                /* 00C0 */  0x08, 0x07, 0x00, 0x00, 0x8C, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF1, 0x07, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00,  // ........
                /* 00D0 */  0x60, 0x09, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // `...U...
                /* 00D8 */  0xB9, 0x08, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0xD2, 0x0F, 0x00, 0x00, 0x82, 0x14, 0x00, 0x00,  // ........
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            Zero, 
            0x33, 
            Buffer (0x019C)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x0B, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0xBC, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00,  // ....X...
                /* 0018 */  0x84, 0x03, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0020 */  0x64, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00,  // d...,...
                /* 0028 */  0xC8, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0030 */  0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2F, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x0E, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0020 */  0x06, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00,  // ....=...
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0030 */  0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // <.......
                /* 0038 */  0x1E, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1C, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x04, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,  // ....x...
                /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // <...(...
                /* 0018 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x38, 0x01, 0x00, 0x00,  // =...8...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0x80, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0xC4, 0x02, 0x00, 0x00,  // <.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x48, 0x00, 0x00, 0x00,  // ....H...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x74, 0x00, 0x00, 0x00,  // ....t...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00,  // ....'...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00,  // ;...'...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00020026, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x26, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // &.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (ISMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x75F17018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1568, 
            AQVS,   32, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                AODV = AQVS /* \AQVS */
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = ISMI /* \ISMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 != Zero))
        {
            Local2 = M049 (M610, 0x10)
            Local3 = MEMI /* \MGRT.MEMI */
            Local4 = MEMD /* \MGRT.MEMD */
            M04E (M610, 0x11, Local3)
            M04E (M610, 0x15, Local4)
            M232 (Local2, Zero, Zero)
        }
    }

    Scope (\_SB)
    {
        Name (M630, 0x5555)
        Name (U4PC, 0xFF)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, Zero)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((\_SB.U4PC != 0xFF))
                    {
                        Local5 = (\_SB.U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((\_SB.M630 == 0x5555))
                            {
                                Local1 = \_SB.M625 (0x0180, 0x03E8)
                                \_SB.M630 = Local1
                            }
                            Else
                            {
                                Local1 = \_SB.M630
                            }

                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local1 = \DIMS /* External reference */
                            M232 (Local1, 0x55, Zero)
                            \DDEP = Zero
                        }
                    }

                    Local2 |= 0x04
                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((M049 (M620, 0x45) == Zero))
                            {
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                        Else
                        {
                            Local2 &= 0xFFFBFFFF
                        }
                    }
                    Else
                    {
                        Local2 &= 0xFFFBFFFF
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) != Zero))
                            {
                                Local4 = M049 (M620, 0x43)
                                Local1 = \_SB.M625 ((0x0102 + (Local4 << 0x10)), 0x03E8)
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }

    Scope (\_SB)
    {
        Device (PMF)
        {
            Name (_HID, "AMDI0101")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("dff8e55f-bcfd-46fb-ba0a-efd0450f34ee") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Local0 = Buffer (0x08){}
                            CreateWordField (Local0, Zero, ABSI)
                            CreateByteField (Local0, 0x02, ASFN)
                            CreateDWordField (Local0, 0x03, ACVL)
                            Local1 = ToInteger (Arg3)
                            ACVL = Local1
                            ABSI = 0x07
                            ASFN = 0x32
                            If (CondRefOf (\_SB.ALIB))
                            {
                                \_SB.ALIB (0x0C, Local0)
                            }
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Name (TGPI, 0x0F)
        Device (PTIO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC40000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (ASMT)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "ASMT0001")  // _HID: Hardware ID
            Name (_CID, "ASMT0001")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0001
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0002
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0003
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0004
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0005
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0006
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0007
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0008
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0009
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000A
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000B
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000C
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000D
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000E
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000F
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0010
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0011
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0012
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0013
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0014
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0015
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0016
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0017
                        }
                })
                Return (RBUF) /* \_SB_.ASMT._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TGPI == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68)
    {
        Name (SPTS, 0x01)
        Name (TSGP, 0x0F)
        Device (SPTO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xDCF00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SPTS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (ASMP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "ASMT0001")  // _HID: Hardware ID
            Name (_CID, "ASMT0001")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0001
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0002
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0003
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0004
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0005
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0006
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0007
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0008
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0009
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000A
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000B
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000C
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000D
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000E
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000F
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0010
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0011
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0012
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0013
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0014
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0015
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0016
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0017
                        }
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.ASMP._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSGP == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}

